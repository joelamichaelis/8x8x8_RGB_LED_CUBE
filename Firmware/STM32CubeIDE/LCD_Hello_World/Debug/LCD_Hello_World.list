
LCD_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800294c  0800294c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  080029c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080029c4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008098  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014df  00000000  00000000  00028131  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00029610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001783d  00000000  00000000  0002a400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069d4  00000000  00000000  00041c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082bb5  00000000  00000000  00048611  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb1c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f8c  00000000  00000000  000cb244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a0 	.word	0x080028a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028a0 	.word	0x080028a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <lcd20x4_i2c_sendCommand>:



/* Private functions */
static void lcd20x4_i2c_sendCommand(uint8_t command)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	011b      	lsls	r3, r3, #4
 800016a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f023 030f 	bic.w	r3, r3, #15
 8000172:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000174:	7bbb      	ldrb	r3, [r7, #14]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
 800017e:	7bbb      	ldrb	r3, [r7, #14]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <lcd20x4_i2c_sendCommand+0x60>)
 800019e:	6818      	ldr	r0, [r3, #0]
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <lcd20x4_i2c_sendCommand+0x64>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	b299      	uxth	r1, r3
 80001a6:	f107 0208 	add.w	r2, r7, #8
 80001aa:	23c8      	movs	r3, #200	; 0xc8
 80001ac:	9300      	str	r3, [sp, #0]
 80001ae:	2304      	movs	r3, #4
 80001b0:	f000 fef6 	bl	8000fa0 <HAL_I2C_Master_Transmit>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	20000090 	.word	0x20000090

080001c4 <lcd20x4_i2c_sendData>:

static void lcd20x4_i2c_sendData(uint8_t data)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	011b      	lsls	r3, r3, #4
 80001d2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	f023 030f 	bic.w	r3, r3, #15
 80001da:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030d 	orr.w	r3, r3, #13
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	723b      	strb	r3, [r7, #8]
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0309 	orr.w	r3, r3, #9
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	727b      	strb	r3, [r7, #9]
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	f043 030d 	orr.w	r3, r3, #13
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	72bb      	strb	r3, [r7, #10]
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	f043 0309 	orr.w	r3, r3, #9
 8000200:	b2db      	uxtb	r3, r3
 8000202:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <lcd20x4_i2c_sendData+0x60>)
 8000206:	6818      	ldr	r0, [r3, #0]
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <lcd20x4_i2c_sendData+0x64>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	b299      	uxth	r1, r3
 800020e:	f107 0208 	add.w	r2, r7, #8
 8000212:	23c8      	movs	r3, #200	; 0xc8
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2304      	movs	r3, #4
 8000218:	f000 fec2 	bl	8000fa0 <HAL_I2C_Master_Transmit>
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	2000008c 	.word	0x2000008c
 8000228:	20000090 	.word	0x20000090

0800022c <lcd20x4_i2c_init>:
/**
 * @brief Initialise LCD20x4
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd20x4_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fb1b 	bl	8000870 <HAL_Delay>
  lcd20x4_i2cHandle = pI2cHandle;
 800023a:	4a30      	ldr	r2, [pc, #192]	; (80002fc <lcd20x4_i2c_init+0xd0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <lcd20x4_i2c_init+0xd0>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000248:	2205      	movs	r2, #5
 800024a:	214e      	movs	r1, #78	; 0x4e
 800024c:	f000 ffa6 	bl	800119c <HAL_I2C_IsDeviceReady>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d010      	beq.n	8000278 <lcd20x4_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000256:	4b29      	ldr	r3, [pc, #164]	; (80002fc <lcd20x4_i2c_init+0xd0>)
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800025e:	2205      	movs	r2, #5
 8000260:	217e      	movs	r1, #126	; 0x7e
 8000262:	f000 ff9b 	bl	800119c <HAL_I2C_IsDeviceReady>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <lcd20x4_i2c_init+0x44>
    {
      return false;
 800026c:	2300      	movs	r3, #0
 800026e:	e040      	b.n	80002f2 <lcd20x4_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000270:	4b23      	ldr	r3, [pc, #140]	; (8000300 <lcd20x4_i2c_init+0xd4>)
 8000272:	227e      	movs	r2, #126	; 0x7e
 8000274:	701a      	strb	r2, [r3, #0]
 8000276:	e002      	b.n	800027e <lcd20x4_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000278:	4b21      	ldr	r3, [pc, #132]	; (8000300 <lcd20x4_i2c_init+0xd4>)
 800027a:	224e      	movs	r2, #78	; 0x4e
 800027c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 800027e:	202d      	movs	r0, #45	; 0x2d
 8000280:	f000 faf6 	bl	8000870 <HAL_Delay>
  //2. Attentions sequence
  lcd20x4_i2c_sendCommand(0x30);
 8000284:	2030      	movs	r0, #48	; 0x30
 8000286:	f7ff ff69 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f000 faf0 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x30);
 8000290:	2030      	movs	r0, #48	; 0x30
 8000292:	f7ff ff63 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 faea 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x30);
 800029c:	2030      	movs	r0, #48	; 0x30
 800029e:	f7ff ff5d 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(8);
 80002a2:	2008      	movs	r0, #8
 80002a4:	f000 fae4 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x20);
 80002a8:	2020      	movs	r0, #32
 80002aa:	f7ff ff57 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(8);
 80002ae:	2008      	movs	r0, #8
 80002b0:	f000 fade 	bl	8000870 <HAL_Delay>

  lcd20x4_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80002b4:	2028      	movs	r0, #40	; 0x28
 80002b6:	f7ff ff51 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 fad8 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80002c0:	2008      	movs	r0, #8
 80002c2:	f7ff ff4b 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fad2 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_CLEARDISPLAY);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ff45 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 80002d2:	2003      	movs	r0, #3
 80002d4:	f000 facc 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80002d8:	2006      	movs	r0, #6
 80002da:	f7ff ff3f 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 fac6 	bl	8000870 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 80002e4:	200c      	movs	r0, #12
 80002e6:	f7ff ff39 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 80002ea:	2003      	movs	r0, #3
 80002ec:	f000 fac0 	bl	8000870 <HAL_Delay>

  return true;
 80002f0:	2301      	movs	r3, #1
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	20000090 	.word	0x20000090

08000304 <lcd20x4_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 - 3 (4 row LCD)
 * @param[in] col - 0 - 19 (20 column LCD)
 */
void lcd20x4_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	f003 030f 	and.w	r3, r3, #15
 800031a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d107      	bne.n	8000332 <lcd20x4_i2c_setCursor+0x2e>
  {
    maskData |= (0x80);
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000328:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff15 	bl	800015c <lcd20x4_i2c_sendCommand>
  }
  if(row==1)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d107      	bne.n	8000348 <lcd20x4_i2c_setCursor+0x44>
  {
    maskData |= (0xC0);
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800033e:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff0a 	bl	800015c <lcd20x4_i2c_sendCommand>
  }
  if(row==2)
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d107      	bne.n	800035e <lcd20x4_i2c_setCursor+0x5a>
  {
    maskData |= (0x94);
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	f063 036b 	orn	r3, r3, #107	; 0x6b
 8000354:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff feff 	bl	800015c <lcd20x4_i2c_sendCommand>
  }
  if(row==3)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d107      	bne.n	8000374 <lcd20x4_i2c_setCursor+0x70>
  {
    maskData |= (0xD4);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	f063 032b 	orn	r3, r3, #43	; 0x2b
 800036a:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff fef4 	bl	800015c <lcd20x4_i2c_sendCommand>
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <lcd20x4_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd20x4_i2c_1stLine(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  lcd20x4_i2c_setCursor(0,0);
 8000380:	2100      	movs	r1, #0
 8000382:	2000      	movs	r0, #0
 8000384:	f7ff ffbe 	bl	8000304 <lcd20x4_i2c_setCursor>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <lcd20x4_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd20x4_i2c_clear(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  lcd20x4_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff fee3 	bl	800015c <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 8000396:	2003      	movs	r0, #3
 8000398:	f000 fa6a 	bl	8000870 <HAL_Delay>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <lcd20x4_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd20x4_i2c_printf(const char* str, ...)
{
 80003a0:	b40f      	push	{r0, r1, r2, r3}
 80003a2:	b590      	push	{r4, r7, lr}
 80003a4:	b089      	sub	sp, #36	; 0x24
 80003a6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80003a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003ac:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fe76 	bl	80020a8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<20; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	77fb      	strb	r3, [r7, #31]
 80003c0:	e00b      	b.n	80003da <lcd20x4_i2c_printf+0x3a>
  {
    lcd20x4_i2c_sendData((uint8_t)stringArray[i]);
 80003c2:	7ffb      	ldrb	r3, [r7, #31]
 80003c4:	f107 0220 	add.w	r2, r7, #32
 80003c8:	4413      	add	r3, r2
 80003ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff fef8 	bl	80001c4 <lcd20x4_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<20; i++)
 80003d4:	7ffb      	ldrb	r3, [r7, #31]
 80003d6:	3301      	adds	r3, #1
 80003d8:	77fb      	strb	r3, [r7, #31]
 80003da:	7ffc      	ldrb	r4, [r7, #31]
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff feb3 	bl	800014c <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	429c      	cmp	r4, r3
 80003ea:	d202      	bcs.n	80003f2 <lcd20x4_i2c_printf+0x52>
 80003ec:	7ffb      	ldrb	r3, [r7, #31]
 80003ee:	2b13      	cmp	r3, #19
 80003f0:	d9e7      	bls.n	80003c2 <lcd20x4_i2c_printf+0x22>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 f9d2 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f832 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f89a 	bl	8000544 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000410:	f000 f86a 	bl	80004e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd20x4_i2c_init(&hi2c1);
 8000414:	4812      	ldr	r0, [pc, #72]	; (8000460 <main+0x60>)
 8000416:	f7ff ff09 	bl	800022c <lcd20x4_i2c_init>

  if(HAL_I2C_IsDeviceReady(&hi2c1, (KEYPAD_ADDRESS<<1), 2, 10) == HAL_OK)
 800041a:	230a      	movs	r3, #10
 800041c:	2202      	movs	r2, #2
 800041e:	21b6      	movs	r1, #182	; 0xb6
 8000420:	480f      	ldr	r0, [pc, #60]	; (8000460 <main+0x60>)
 8000422:	f000 febb 	bl	800119c <HAL_I2C_IsDeviceReady>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d108      	bne.n	800043e <main+0x3e>
  {
	  lcd20x4_i2c_1stLine();
 800042c:	f7ff ffa6 	bl	800037c <lcd20x4_i2c_1stLine>
	  HAL_Delay(50);
 8000430:	2032      	movs	r0, #50	; 0x32
 8000432:	f000 fa1d 	bl	8000870 <HAL_Delay>
	  lcd20x4_i2c_printf("Keypad Ready!");
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <main+0x64>)
 8000438:	f7ff ffb2 	bl	80003a0 <lcd20x4_i2c_printf>
 800043c:	e002      	b.n	8000444 <main+0x44>
  }
  else lcd20x4_i2c_printf("Keypad Init Failed");
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <main+0x68>)
 8000440:	f7ff ffae 	bl	80003a0 <lcd20x4_i2c_printf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  lcd20x4_i2c_clear();
 8000444:	f7ff ffa2 	bl	800038c <lcd20x4_i2c_clear>
	  HAL_Delay(1000);
 8000448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800044c:	f000 fa10 	bl	8000870 <HAL_Delay>
	  lcd20x4_i2c_printf("Hello World!");
 8000450:	4806      	ldr	r0, [pc, #24]	; (800046c <main+0x6c>)
 8000452:	f7ff ffa5 	bl	80003a0 <lcd20x4_i2c_printf>
	  HAL_Delay(1000);
 8000456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045a:	f000 fa09 	bl	8000870 <HAL_Delay>
	  lcd20x4_i2c_clear();
 800045e:	e7f1      	b.n	8000444 <main+0x44>
 8000460:	200000a0 	.word	0x200000a0
 8000464:	080028b8 	.word	0x080028b8
 8000468:	080028c8 	.word	0x080028c8
 800046c:	080028dc 	.word	0x080028dc

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b090      	sub	sp, #64	; 0x40
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	2228      	movs	r2, #40	; 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fdf4 	bl	800206c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000492:	2302      	movs	r3, #2
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000496:	2301      	movs	r3, #1
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	2310      	movs	r3, #16
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049e:	2300      	movs	r3, #0
 80004a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 f9ae 	bl	8001808 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004b2:	f000 f87d 	bl	80005b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fc1a 	bl	8001d08 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004da:	f000 f869 	bl	80005b0 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	; 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_I2C1_Init+0x50>)
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_I2C1_Init+0x54>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_I2C1_Init+0x50>)
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_I2C1_Init+0x58>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_I2C1_Init+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_I2C1_Init+0x50>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_I2C1_Init+0x50>)
 8000506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800050a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_I2C1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_I2C1_Init+0x50>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <MX_I2C1_Init+0x50>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_I2C1_Init+0x50>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_I2C1_Init+0x50>)
 8000526:	f000 fc03 	bl	8000d30 <HAL_I2C_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000530:	f000 f83e 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000a0 	.word	0x200000a0
 800053c:	40005400 	.word	0x40005400
 8000540:	000186a0 	.word	0x000186a0

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_GPIO_Init+0x64>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <MX_GPIO_Init+0x64>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_GPIO_Init+0x64>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_GPIO_Init+0x64>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <MX_GPIO_Init+0x64>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_GPIO_Init+0x64>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Keypad_IRQ_Pin */
  GPIO_InitStruct.Pin = Keypad_IRQ_Pin;
 8000588:	2320      	movs	r3, #32
 800058a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Keypad_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_GPIO_Init+0x68>)
 800059c:	f000 fa6e 	bl	8000a7c <HAL_GPIO_Init>

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010c00 	.word	0x40010c00

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <Error_Handler+0x6>

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <HAL_I2C_MspInit+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d123      	bne.n	8000684 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_I2C_MspInit+0x74>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <HAL_I2C_MspInit+0x74>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_I2C_MspInit+0x74>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000658:	2312      	movs	r3, #18
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <HAL_I2C_MspInit+0x78>)
 8000668:	f000 fa08 	bl	8000a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_I2C_MspInit+0x74>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_I2C_MspInit+0x74>)
 8000672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000676:	61d3      	str	r3, [r2, #28]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_I2C_MspInit+0x74>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40005400 	.word	0x40005400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010c00 	.word	0x40010c00

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006de:	f000 f8ab 	bl	8000838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <_sbrk+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <_sbrk+0x60>)
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <_sbrk+0x64>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <_sbrk+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	429a      	cmp	r2, r3
 8000716:	d207      	bcs.n	8000728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000718:	f001 fc7e 	bl	8002018 <__errno>
 800071c:	4602      	mov	r2, r0
 800071e:	230c      	movs	r3, #12
 8000720:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	e009      	b.n	800073c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <_sbrk+0x64>)
 8000738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20005000 	.word	0x20005000
 8000748:	00000400 	.word	0x00000400
 800074c:	20000094 	.word	0x20000094
 8000750:	20000100 	.word	0x20000100

08000754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000760:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000762:	e003      	b.n	800076c <LoopCopyDataInit>

08000764 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000766:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000768:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800076a:	3104      	adds	r1, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000770:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000772:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000774:	d3f6      	bcc.n	8000764 <CopyDataInit>
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000778:	e002      	b.n	8000780 <LoopFillZerobss>

0800077a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800077c:	f842 3b04 	str.w	r3, [r2], #4

08000780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000782:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000784:	d3f9      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000786:	f7ff ffe5 	bl	8000754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078a:	f001 fc4b 	bl	8002024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fe37 	bl	8000400 <main>
  bx lr
 8000792:	4770      	bx	lr
  ldr r3, =_sidata
 8000794:	08002954 	.word	0x08002954
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800079c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007a4:	200000fc 	.word	0x200000fc

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f929 	bl	8000a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff fef6 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f933 	bl	8000a62 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f000 f909 	bl	8000a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000008 	.word	0x20000008
 8000858:	200000f4 	.word	0x200000f4

0800085c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	200000f4 	.word	0x200000f4

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fff0 	bl	800085c <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_Delay+0x40>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffe0 	bl	800085c <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000008 	.word	0x20000008

080008b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	60d3      	str	r3, [r2, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <__NVIC_GetPriorityGrouping+0x18>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	f003 0307 	and.w	r3, r3, #7
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	490c      	ldr	r1, [pc, #48]	; (8000964 <__NVIC_SetPriority+0x4c>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000940:	e00a      	b.n	8000958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4908      	ldr	r1, [pc, #32]	; (8000968 <__NVIC_SetPriority+0x50>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	3b04      	subs	r3, #4
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	440b      	add	r3, r1
 8000956:	761a      	strb	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f1c3 0307 	rsb	r3, r3, #7
 8000986:	2b04      	cmp	r3, #4
 8000988:	bf28      	it	cs
 800098a:	2304      	movcs	r3, #4
 800098c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3304      	adds	r3, #4
 8000992:	2b06      	cmp	r3, #6
 8000994:	d902      	bls.n	800099c <NVIC_EncodePriority+0x30>
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3b03      	subs	r3, #3
 800099a:	e000      	b.n	800099e <NVIC_EncodePriority+0x32>
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 32ff 	mov.w	r2, #4294967295
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43da      	mvns	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b4:	f04f 31ff 	mov.w	r1, #4294967295
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43d9      	mvns	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	4313      	orrs	r3, r2
         );
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3724      	adds	r7, #36	; 0x24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f7ff ff90 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff49 	bl	80008b4 <__NVIC_SetPriorityGrouping>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a3c:	f7ff ff5e 	bl	80008fc <__NVIC_GetPriorityGrouping>
 8000a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	6978      	ldr	r0, [r7, #20]
 8000a48:	f7ff ff90 	bl	800096c <NVIC_EncodePriority>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff5f 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffb0 	bl	80009d0 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b08b      	sub	sp, #44	; 0x2c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	e127      	b.n	8000ce0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a90:	2201      	movs	r2, #1
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 8116 	bne.w	8000cda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d034      	beq.n	8000b20 <HAL_GPIO_Init+0xa4>
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d80d      	bhi.n	8000ad6 <HAL_GPIO_Init+0x5a>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d02b      	beq.n	8000b16 <HAL_GPIO_Init+0x9a>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d804      	bhi.n	8000acc <HAL_GPIO_Init+0x50>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d031      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d01c      	beq.n	8000b04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aca:	e048      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d043      	beq.n	8000b58 <HAL_GPIO_Init+0xdc>
 8000ad0:	2b11      	cmp	r3, #17
 8000ad2:	d01b      	beq.n	8000b0c <HAL_GPIO_Init+0x90>
          break;
 8000ad4:	e043      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad6:	4a89      	ldr	r2, [pc, #548]	; (8000cfc <HAL_GPIO_Init+0x280>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d026      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000adc:	4a87      	ldr	r2, [pc, #540]	; (8000cfc <HAL_GPIO_Init+0x280>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d806      	bhi.n	8000af0 <HAL_GPIO_Init+0x74>
 8000ae2:	4a87      	ldr	r2, [pc, #540]	; (8000d00 <HAL_GPIO_Init+0x284>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d020      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000ae8:	4a86      	ldr	r2, [pc, #536]	; (8000d04 <HAL_GPIO_Init+0x288>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01d      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
          break;
 8000aee:	e036      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af0:	4a85      	ldr	r2, [pc, #532]	; (8000d08 <HAL_GPIO_Init+0x28c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000af6:	4a85      	ldr	r2, [pc, #532]	; (8000d0c <HAL_GPIO_Init+0x290>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d016      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000afc:	4a84      	ldr	r2, [pc, #528]	; (8000d10 <HAL_GPIO_Init+0x294>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d013      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
          break;
 8000b02:	e02c      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	623b      	str	r3, [r7, #32]
          break;
 8000b0a:	e028      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	3304      	adds	r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e023      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e01e      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	330c      	adds	r3, #12
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e019      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b32:	2304      	movs	r3, #4
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e012      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d105      	bne.n	8000b4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	611a      	str	r2, [r3, #16]
          break;
 8000b4a:	e008      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	615a      	str	r2, [r3, #20]
          break;
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2bff      	cmp	r3, #255	; 0xff
 8000b62:	d801      	bhi.n	8000b68 <HAL_GPIO_Init+0xec>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	e001      	b.n	8000b6c <HAL_GPIO_Init+0xf0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d802      	bhi.n	8000b7a <HAL_GPIO_Init+0xfe>
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x104>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	3b08      	subs	r3, #8
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	210f      	movs	r1, #15
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	401a      	ands	r2, r3
 8000b92:	6a39      	ldr	r1, [r7, #32]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 8096 	beq.w	8000cda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bae:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <HAL_GPIO_Init+0x298>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a58      	ldr	r2, [pc, #352]	; (8000d14 <HAL_GPIO_Init+0x298>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b56      	ldr	r3, [pc, #344]	; (8000d14 <HAL_GPIO_Init+0x298>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc6:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <HAL_GPIO_Init+0x29c>)
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a4b      	ldr	r2, [pc, #300]	; (8000d1c <HAL_GPIO_Init+0x2a0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d013      	beq.n	8000c1a <HAL_GPIO_Init+0x19e>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <HAL_GPIO_Init+0x2a4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d00d      	beq.n	8000c16 <HAL_GPIO_Init+0x19a>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <HAL_GPIO_Init+0x2a8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d007      	beq.n	8000c12 <HAL_GPIO_Init+0x196>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <HAL_GPIO_Init+0x2ac>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_GPIO_Init+0x192>
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x1a0>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e004      	b.n	8000c1c <HAL_GPIO_Init+0x1a0>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_Init+0x1a0>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_Init+0x1a0>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1e:	f002 0203 	and.w	r2, r2, #3
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	4093      	lsls	r3, r2
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c2c:	493a      	ldr	r1, [pc, #232]	; (8000d18 <HAL_GPIO_Init+0x29c>)
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4938      	ldr	r1, [pc, #224]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4933      	ldr	r1, [pc, #204]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	492e      	ldr	r1, [pc, #184]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4929      	ldr	r1, [pc, #164]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	4924      	ldr	r1, [pc, #144]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	608b      	str	r3, [r1, #8]
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	491f      	ldr	r1, [pc, #124]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	491a      	ldr	r1, [pc, #104]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	3301      	adds	r3, #1
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f aed0 	bne.w	8000a90 <HAL_GPIO_Init+0x14>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	372c      	adds	r7, #44	; 0x2c
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10110000 	.word	0x10110000
 8000d04:	10120000 	.word	0x10120000
 8000d08:	10310000 	.word	0x10310000
 8000d0c:	10320000 	.word	0x10320000
 8000d10:	10220000 	.word	0x10220000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e11f      	b.n	8000f82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fc60 	bl	800061c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2224      	movs	r2, #36	; 0x24
 8000d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d94:	f001 f90e 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8000d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a7b      	ldr	r2, [pc, #492]	; (8000f8c <HAL_I2C_Init+0x25c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d807      	bhi.n	8000db4 <HAL_I2C_Init+0x84>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4a7a      	ldr	r2, [pc, #488]	; (8000f90 <HAL_I2C_Init+0x260>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	e006      	b.n	8000dc2 <HAL_I2C_Init+0x92>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a77      	ldr	r2, [pc, #476]	; (8000f94 <HAL_I2C_Init+0x264>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	bf94      	ite	ls
 8000dbc:	2301      	movls	r3, #1
 8000dbe:	2300      	movhi	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e0db      	b.n	8000f82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4a72      	ldr	r2, [pc, #456]	; (8000f98 <HAL_I2C_Init+0x268>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a64      	ldr	r2, [pc, #400]	; (8000f8c <HAL_I2C_Init+0x25c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d802      	bhi.n	8000e04 <HAL_I2C_Init+0xd4>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3301      	adds	r3, #1
 8000e02:	e009      	b.n	8000e18 <HAL_I2C_Init+0xe8>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4a63      	ldr	r2, [pc, #396]	; (8000f9c <HAL_I2C_Init+0x26c>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	099b      	lsrs	r3, r3, #6
 8000e16:	3301      	adds	r3, #1
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4956      	ldr	r1, [pc, #344]	; (8000f8c <HAL_I2C_Init+0x25c>)
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d80d      	bhi.n	8000e54 <HAL_I2C_Init+0x124>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1e59      	subs	r1, r3, #1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	bf38      	it	cc
 8000e50:	2304      	movcc	r3, #4
 8000e52:	e04f      	b.n	8000ef4 <HAL_I2C_Init+0x1c4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d111      	bne.n	8000e80 <HAL_I2C_Init+0x150>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e58      	subs	r0, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf0c      	ite	eq
 8000e78:	2301      	moveq	r3, #1
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	e012      	b.n	8000ea6 <HAL_I2C_Init+0x176>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1e58      	subs	r0, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6859      	ldr	r1, [r3, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	0099      	lsls	r1, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e96:	3301      	adds	r3, #1
 8000e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_Init+0x17e>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e022      	b.n	8000ef4 <HAL_I2C_Init+0x1c4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_I2C_Init+0x1a4>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1e58      	subs	r0, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6859      	ldr	r1, [r3, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed2:	e00f      	b.n	8000ef4 <HAL_I2C_Init+0x1c4>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	1e58      	subs	r0, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	0099      	lsls	r1, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	6809      	ldr	r1, [r1, #0]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6911      	ldr	r1, [r2, #16]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68d2      	ldr	r2, [r2, #12]
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	000186a0 	.word	0x000186a0
 8000f90:	001e847f 	.word	0x001e847f
 8000f94:	003d08ff 	.word	0x003d08ff
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	10624dd3 	.word	0x10624dd3

08000fa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	461a      	mov	r2, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	817b      	strh	r3, [r7, #10]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fc52 	bl	800085c <HAL_GetTick>
 8000fb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b20      	cmp	r3, #32
 8000fc4:	f040 80e0 	bne.w	8001188 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2319      	movs	r3, #25
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4970      	ldr	r1, [pc, #448]	; (8001194 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 fa92 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e0d3      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_I2C_Master_Transmit+0x50>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e0cc      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d007      	beq.n	8001016 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2221      	movs	r2, #33	; 0x21
 800102a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2210      	movs	r2, #16
 8001032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	893a      	ldrh	r2, [r7, #8]
 8001046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104c:	b29a      	uxth	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_I2C_Master_Transmit+0x1f8>)
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001058:	8979      	ldrh	r1, [r7, #10]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	6a3a      	ldr	r2, [r7, #32]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f9ca 	bl	80013f8 <I2C_MasterRequestWrite>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e08d      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001084:	e066      	b.n	8001154 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	6a39      	ldr	r1, [r7, #32]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 fb0c 	bl	80016a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00d      	beq.n	80010b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	2b04      	cmp	r3, #4
 800109c:	d107      	bne.n	80010ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e06b      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010da:	3b01      	subs	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d11b      	bne.n	8001128 <HAL_I2C_Master_Transmit+0x188>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d017      	beq.n	8001128 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001120:	3b01      	subs	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	6a39      	ldr	r1, [r7, #32]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 fafc 	bl	800172a <I2C_WaitOnBTFFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	2b04      	cmp	r3, #4
 800113e:	d107      	bne.n	8001150 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e01a      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001158:	2b00      	cmp	r3, #0
 800115a:	d194      	bne.n	8001086 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2220      	movs	r2, #32
 8001170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001188:	2302      	movs	r3, #2
  }
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	00100002 	.word	0x00100002
 8001198:	ffff0000 	.word	0xffff0000

0800119c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fb56 	bl	800085c <HAL_GetTick>
 80011b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b20      	cmp	r3, #32
 80011c0:	f040 8111 	bne.w	80013e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2319      	movs	r3, #25
 80011ca:	2201      	movs	r2, #1
 80011cc:	4988      	ldr	r1, [pc, #544]	; (80013f0 <HAL_I2C_IsDeviceReady+0x254>)
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f994 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80011da:	2302      	movs	r3, #2
 80011dc:	e104      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_I2C_IsDeviceReady+0x50>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e0fd      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d007      	beq.n	8001212 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2224      	movs	r2, #36	; 0x24
 8001226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a70      	ldr	r2, [pc, #448]	; (80013f4 <HAL_I2C_IsDeviceReady+0x258>)
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001244:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f952 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00d      	beq.n	800127a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126c:	d103      	bne.n	8001276 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0b6      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001288:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fae7 	bl	800085c <HAL_GetTick>
 800128e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80012be:	e025      	b.n	800130c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012c0:	f7ff facc 	bl	800085c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d302      	bcc.n	80012d6 <HAL_I2C_IsDeviceReady+0x13a>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	22a0      	movs	r2, #160	; 0xa0
 80012da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2ba0      	cmp	r3, #160	; 0xa0
 8001316:	d005      	beq.n	8001324 <HAL_I2C_IsDeviceReady+0x188>
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_I2C_IsDeviceReady+0x188>
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0cd      	beq.n	80012c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2220      	movs	r2, #32
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d129      	bne.n	800138e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001348:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2319      	movs	r3, #25
 8001366:	2201      	movs	r2, #1
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <HAL_I2C_IsDeviceReady+0x254>)
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f8c6 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e036      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e02c      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2319      	movs	r3, #25
 80013ae:	2201      	movs	r2, #1
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <HAL_I2C_IsDeviceReady+0x254>)
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f8a2 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e012      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f4ff af32 	bcc.w	8001236 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2220      	movs	r2, #32
 80013d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80013e6:	2302      	movs	r3, #2
  }
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	00100002 	.word	0x00100002
 80013f4:	ffff0000 	.word	0xffff0000

080013f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d006      	beq.n	8001422 <I2C_MasterRequestWrite+0x2a>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <I2C_MasterRequestWrite+0x2a>
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001420:	d108      	bne.n	8001434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e00b      	b.n	800144c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	2b12      	cmp	r3, #18
 800143a:	d107      	bne.n	800144c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800144a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f84f 	bl	80014fc <I2C_WaitOnFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00d      	beq.n	8001480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001472:	d103      	bne.n	800147c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e035      	b.n	80014ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001488:	d108      	bne.n	800149c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800148a:	897b      	ldrh	r3, [r7, #10]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	e01b      	b.n	80014d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	11db      	asrs	r3, r3, #7
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0306 	and.w	r3, r3, #6
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f063 030f 	orn	r3, r3, #15
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490e      	ldr	r1, [pc, #56]	; (80014f4 <I2C_MasterRequestWrite+0xfc>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f875 	bl	80015aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e010      	b.n	80014ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <I2C_MasterRequestWrite+0x100>)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f865 	bl	80015aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	00010008 	.word	0x00010008
 80014f8:	00010002 	.word	0x00010002

080014fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800150c:	e025      	b.n	800155a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d021      	beq.n	800155a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001516:	f7ff f9a1 	bl	800085c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d302      	bcc.n	800152c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d116      	bne.n	800155a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f043 0220 	orr.w	r2, r3, #32
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e023      	b.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0c1b      	lsrs	r3, r3, #16
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10d      	bne.n	8001580 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4013      	ands	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	e00c      	b.n	800159a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4013      	ands	r3, r2
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	429a      	cmp	r2, r3
 800159e:	d0b6      	beq.n	800150e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015b8:	e051      	b.n	800165e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c8:	d123      	bne.n	8001612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f043 0204 	orr.w	r2, r3, #4
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e046      	b.n	80016a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d021      	beq.n	800165e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161a:	f7ff f91f 	bl	800085c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d302      	bcc.n	8001630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d116      	bne.n	800165e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e020      	b.n	80016a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10c      	bne.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4013      	ands	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	e00b      	b.n	800169a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	43da      	mvns	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	4013      	ands	r3, r2
 800168e:	b29b      	uxth	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d18d      	bne.n	80015ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b4:	e02d      	b.n	8001712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f878 	bl	80017ac <I2C_IsAcknowledgeFailed>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e02d      	b.n	8001722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d021      	beq.n	8001712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff f8c5 	bl	800085c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d116      	bne.n	8001712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0220 	orr.w	r2, r3, #32
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e007      	b.n	8001722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b80      	cmp	r3, #128	; 0x80
 800171e:	d1ca      	bne.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001736:	e02d      	b.n	8001794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f837 	bl	80017ac <I2C_IsAcknowledgeFailed>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e02d      	b.n	80017a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174e:	d021      	beq.n	8001794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001750:	f7ff f884 	bl	800085c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d302      	bcc.n	8001766 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e007      	b.n	80017a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d1ca      	bne.n	8001738 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c2:	d11b      	bne.n	80017fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0204 	orr.w	r2, r3, #4
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e26c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d00c      	beq.n	800184e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d112      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
 8001840:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d10b      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d06c      	beq.n	8001934 <HAL_RCC_OscConfig+0x12c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d168      	bne.n	8001934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e246      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x76>
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e02e      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x98>
 8001886:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a77      	ldr	r2, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0xbc>
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a67      	ldr	r2, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7fe ffba 	bl	800085c <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7fe ffb6 	bl	800085c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1fa      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xe4>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7fe ffa6 	bl	800085c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7fe ffa2 	bl	800085c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1e6      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x10c>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001942:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1ba      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4939      	ldr	r1, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe ff5b 	bl	800085c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7fe ff57 	bl	800085c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e19b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe ff3a 	bl	800085c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7fe ff36 	bl	800085c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e17a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03a      	beq.n	8001a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7fe ff1a 	bl	800085c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7fe ff16 	bl	800085c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e15a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 fac6 	bl	8001fdc <RCC_Delay>
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7fe ff00 	bl	800085c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5e:	e00f      	b.n	8001a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7fe fefc 	bl	800085c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d908      	bls.n	8001a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e140      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	42420000 	.word	0x42420000
 8001a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b9e      	ldr	r3, [pc, #632]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e9      	bne.n	8001a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a6 	beq.w	8001be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a93      	ldr	r2, [pc, #588]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7fe febd 	bl	800085c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7fe feb9 	bl	800085c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0fd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x312>
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e02d      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x334>
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x356>
 8001b44:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a69      	ldr	r2, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7fe fe6d 	bl	800085c <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7fe fe69 	bl	800085c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0ab      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x37e>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7fe fe57 	bl	800085c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7fe fe53 	bl	800085c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e095      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8081 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d061      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d146      	bne.n	8001c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe27 	bl	800085c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7fe fe23 	bl	800085c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e067      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	492d      	ldr	r1, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a19      	ldr	r1, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fdf7 	bl	800085c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe fdf3 	bl	800085c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e037      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46a>
 8001c90:	e02f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fde0 	bl	800085c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe fddc 	bl	800085c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e020      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x498>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42420060 	.word	0x42420060

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fd30 	bl	800085c <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7fe fd2c 	bl	800085c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fc8e 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08002900 	.word	0x08002900
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b490      	push	{r4, r7}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ee4:	1d3c      	adds	r4, r7, #4
 8001ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x40>
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x46>
 8001f1a:	e02d      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f1e:	623b      	str	r3, [r7, #32]
      break;
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f2e:	4413      	add	r3, r2
 8001f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c5b      	lsrs	r3, r3, #17
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4e:	4413      	add	r3, r2
 8001f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f5a:	fb02 f203 	mul.w	r2, r2, r3
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e004      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	623b      	str	r3, [r7, #32]
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f7a:	623b      	str	r3, [r7, #32]
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc90      	pop	{r4, r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	080028ec 	.word	0x080028ec
 8001f90:	080028fc 	.word	0x080028fc
 8001f94:	40021000 	.word	0x40021000
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002910 	.word	0x08002910

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <__errno>:
 8002018:	4b01      	ldr	r3, [pc, #4]	; (8002020 <__errno+0x8>)
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2000000c 	.word	0x2000000c

08002024 <__libc_init_array>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	2500      	movs	r5, #0
 8002028:	4e0c      	ldr	r6, [pc, #48]	; (800205c <__libc_init_array+0x38>)
 800202a:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <__libc_init_array+0x3c>)
 800202c:	1ba4      	subs	r4, r4, r6
 800202e:	10a4      	asrs	r4, r4, #2
 8002030:	42a5      	cmp	r5, r4
 8002032:	d109      	bne.n	8002048 <__libc_init_array+0x24>
 8002034:	f000 fc34 	bl	80028a0 <_init>
 8002038:	2500      	movs	r5, #0
 800203a:	4e0a      	ldr	r6, [pc, #40]	; (8002064 <__libc_init_array+0x40>)
 800203c:	4c0a      	ldr	r4, [pc, #40]	; (8002068 <__libc_init_array+0x44>)
 800203e:	1ba4      	subs	r4, r4, r6
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	42a5      	cmp	r5, r4
 8002044:	d105      	bne.n	8002052 <__libc_init_array+0x2e>
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800204c:	4798      	blx	r3
 800204e:	3501      	adds	r5, #1
 8002050:	e7ee      	b.n	8002030 <__libc_init_array+0xc>
 8002052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002056:	4798      	blx	r3
 8002058:	3501      	adds	r5, #1
 800205a:	e7f2      	b.n	8002042 <__libc_init_array+0x1e>
 800205c:	0800294c 	.word	0x0800294c
 8002060:	0800294c 	.word	0x0800294c
 8002064:	0800294c 	.word	0x0800294c
 8002068:	08002950 	.word	0x08002950

0800206c <memset>:
 800206c:	4603      	mov	r3, r0
 800206e:	4402      	add	r2, r0
 8002070:	4293      	cmp	r3, r2
 8002072:	d100      	bne.n	8002076 <memset+0xa>
 8002074:	4770      	bx	lr
 8002076:	f803 1b01 	strb.w	r1, [r3], #1
 800207a:	e7f9      	b.n	8002070 <memset+0x4>

0800207c <_vsiprintf_r>:
 800207c:	b500      	push	{lr}
 800207e:	b09b      	sub	sp, #108	; 0x6c
 8002080:	9100      	str	r1, [sp, #0]
 8002082:	9104      	str	r1, [sp, #16]
 8002084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002088:	9105      	str	r1, [sp, #20]
 800208a:	9102      	str	r1, [sp, #8]
 800208c:	4905      	ldr	r1, [pc, #20]	; (80020a4 <_vsiprintf_r+0x28>)
 800208e:	9103      	str	r1, [sp, #12]
 8002090:	4669      	mov	r1, sp
 8002092:	f000 f86d 	bl	8002170 <_svfiprintf_r>
 8002096:	2200      	movs	r2, #0
 8002098:	9b00      	ldr	r3, [sp, #0]
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	b01b      	add	sp, #108	; 0x6c
 800209e:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a2:	bf00      	nop
 80020a4:	ffff0208 	.word	0xffff0208

080020a8 <vsiprintf>:
 80020a8:	4613      	mov	r3, r2
 80020aa:	460a      	mov	r2, r1
 80020ac:	4601      	mov	r1, r0
 80020ae:	4802      	ldr	r0, [pc, #8]	; (80020b8 <vsiprintf+0x10>)
 80020b0:	6800      	ldr	r0, [r0, #0]
 80020b2:	f7ff bfe3 	b.w	800207c <_vsiprintf_r>
 80020b6:	bf00      	nop
 80020b8:	2000000c 	.word	0x2000000c

080020bc <__ssputs_r>:
 80020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c0:	688e      	ldr	r6, [r1, #8]
 80020c2:	4682      	mov	sl, r0
 80020c4:	429e      	cmp	r6, r3
 80020c6:	460c      	mov	r4, r1
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	d837      	bhi.n	800213e <__ssputs_r+0x82>
 80020ce:	898a      	ldrh	r2, [r1, #12]
 80020d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020d4:	d031      	beq.n	800213a <__ssputs_r+0x7e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	6825      	ldr	r5, [r4, #0]
 80020da:	6909      	ldr	r1, [r1, #16]
 80020dc:	1a6f      	subs	r7, r5, r1
 80020de:	6965      	ldr	r5, [r4, #20]
 80020e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80020e8:	f109 0301 	add.w	r3, r9, #1
 80020ec:	443b      	add	r3, r7
 80020ee:	429d      	cmp	r5, r3
 80020f0:	bf38      	it	cc
 80020f2:	461d      	movcc	r5, r3
 80020f4:	0553      	lsls	r3, r2, #21
 80020f6:	d530      	bpl.n	800215a <__ssputs_r+0x9e>
 80020f8:	4629      	mov	r1, r5
 80020fa:	f000 fb37 	bl	800276c <_malloc_r>
 80020fe:	4606      	mov	r6, r0
 8002100:	b950      	cbnz	r0, 8002118 <__ssputs_r+0x5c>
 8002102:	230c      	movs	r3, #12
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f8ca 3000 	str.w	r3, [sl]
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002112:	81a3      	strh	r3, [r4, #12]
 8002114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002118:	463a      	mov	r2, r7
 800211a:	6921      	ldr	r1, [r4, #16]
 800211c:	f000 fab6 	bl	800268c <memcpy>
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212a:	81a3      	strh	r3, [r4, #12]
 800212c:	6126      	str	r6, [r4, #16]
 800212e:	443e      	add	r6, r7
 8002130:	6026      	str	r6, [r4, #0]
 8002132:	464e      	mov	r6, r9
 8002134:	6165      	str	r5, [r4, #20]
 8002136:	1bed      	subs	r5, r5, r7
 8002138:	60a5      	str	r5, [r4, #8]
 800213a:	454e      	cmp	r6, r9
 800213c:	d900      	bls.n	8002140 <__ssputs_r+0x84>
 800213e:	464e      	mov	r6, r9
 8002140:	4632      	mov	r2, r6
 8002142:	4641      	mov	r1, r8
 8002144:	6820      	ldr	r0, [r4, #0]
 8002146:	f000 faac 	bl	80026a2 <memmove>
 800214a:	68a3      	ldr	r3, [r4, #8]
 800214c:	2000      	movs	r0, #0
 800214e:	1b9b      	subs	r3, r3, r6
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	441e      	add	r6, r3
 8002156:	6026      	str	r6, [r4, #0]
 8002158:	e7dc      	b.n	8002114 <__ssputs_r+0x58>
 800215a:	462a      	mov	r2, r5
 800215c:	f000 fb60 	bl	8002820 <_realloc_r>
 8002160:	4606      	mov	r6, r0
 8002162:	2800      	cmp	r0, #0
 8002164:	d1e2      	bne.n	800212c <__ssputs_r+0x70>
 8002166:	6921      	ldr	r1, [r4, #16]
 8002168:	4650      	mov	r0, sl
 800216a:	f000 fab3 	bl	80026d4 <_free_r>
 800216e:	e7c8      	b.n	8002102 <__ssputs_r+0x46>

08002170 <_svfiprintf_r>:
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	461d      	mov	r5, r3
 8002176:	898b      	ldrh	r3, [r1, #12]
 8002178:	b09d      	sub	sp, #116	; 0x74
 800217a:	061f      	lsls	r7, r3, #24
 800217c:	4680      	mov	r8, r0
 800217e:	460c      	mov	r4, r1
 8002180:	4616      	mov	r6, r2
 8002182:	d50f      	bpl.n	80021a4 <_svfiprintf_r+0x34>
 8002184:	690b      	ldr	r3, [r1, #16]
 8002186:	b96b      	cbnz	r3, 80021a4 <_svfiprintf_r+0x34>
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	f000 faef 	bl	800276c <_malloc_r>
 800218e:	6020      	str	r0, [r4, #0]
 8002190:	6120      	str	r0, [r4, #16]
 8002192:	b928      	cbnz	r0, 80021a0 <_svfiprintf_r+0x30>
 8002194:	230c      	movs	r3, #12
 8002196:	f8c8 3000 	str.w	r3, [r8]
 800219a:	f04f 30ff 	mov.w	r0, #4294967295
 800219e:	e0c8      	b.n	8002332 <_svfiprintf_r+0x1c2>
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	6163      	str	r3, [r4, #20]
 80021a4:	2300      	movs	r3, #0
 80021a6:	9309      	str	r3, [sp, #36]	; 0x24
 80021a8:	2320      	movs	r3, #32
 80021aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ae:	2330      	movs	r3, #48	; 0x30
 80021b0:	f04f 0b01 	mov.w	fp, #1
 80021b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b8:	9503      	str	r5, [sp, #12]
 80021ba:	4637      	mov	r7, r6
 80021bc:	463d      	mov	r5, r7
 80021be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021c2:	b10b      	cbz	r3, 80021c8 <_svfiprintf_r+0x58>
 80021c4:	2b25      	cmp	r3, #37	; 0x25
 80021c6:	d13e      	bne.n	8002246 <_svfiprintf_r+0xd6>
 80021c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80021cc:	d00b      	beq.n	80021e6 <_svfiprintf_r+0x76>
 80021ce:	4653      	mov	r3, sl
 80021d0:	4632      	mov	r2, r6
 80021d2:	4621      	mov	r1, r4
 80021d4:	4640      	mov	r0, r8
 80021d6:	f7ff ff71 	bl	80020bc <__ssputs_r>
 80021da:	3001      	adds	r0, #1
 80021dc:	f000 80a4 	beq.w	8002328 <_svfiprintf_r+0x1b8>
 80021e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021e2:	4453      	add	r3, sl
 80021e4:	9309      	str	r3, [sp, #36]	; 0x24
 80021e6:	783b      	ldrb	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 809d 	beq.w	8002328 <_svfiprintf_r+0x1b8>
 80021ee:	2300      	movs	r3, #0
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	9307      	str	r3, [sp, #28]
 80021fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002200:	931a      	str	r3, [sp, #104]	; 0x68
 8002202:	462f      	mov	r7, r5
 8002204:	2205      	movs	r2, #5
 8002206:	f817 1b01 	ldrb.w	r1, [r7], #1
 800220a:	4850      	ldr	r0, [pc, #320]	; (800234c <_svfiprintf_r+0x1dc>)
 800220c:	f000 fa30 	bl	8002670 <memchr>
 8002210:	9b04      	ldr	r3, [sp, #16]
 8002212:	b9d0      	cbnz	r0, 800224a <_svfiprintf_r+0xda>
 8002214:	06d9      	lsls	r1, r3, #27
 8002216:	bf44      	itt	mi
 8002218:	2220      	movmi	r2, #32
 800221a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800221e:	071a      	lsls	r2, r3, #28
 8002220:	bf44      	itt	mi
 8002222:	222b      	movmi	r2, #43	; 0x2b
 8002224:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002228:	782a      	ldrb	r2, [r5, #0]
 800222a:	2a2a      	cmp	r2, #42	; 0x2a
 800222c:	d015      	beq.n	800225a <_svfiprintf_r+0xea>
 800222e:	462f      	mov	r7, r5
 8002230:	2000      	movs	r0, #0
 8002232:	250a      	movs	r5, #10
 8002234:	9a07      	ldr	r2, [sp, #28]
 8002236:	4639      	mov	r1, r7
 8002238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800223c:	3b30      	subs	r3, #48	; 0x30
 800223e:	2b09      	cmp	r3, #9
 8002240:	d94d      	bls.n	80022de <_svfiprintf_r+0x16e>
 8002242:	b1b8      	cbz	r0, 8002274 <_svfiprintf_r+0x104>
 8002244:	e00f      	b.n	8002266 <_svfiprintf_r+0xf6>
 8002246:	462f      	mov	r7, r5
 8002248:	e7b8      	b.n	80021bc <_svfiprintf_r+0x4c>
 800224a:	4a40      	ldr	r2, [pc, #256]	; (800234c <_svfiprintf_r+0x1dc>)
 800224c:	463d      	mov	r5, r7
 800224e:	1a80      	subs	r0, r0, r2
 8002250:	fa0b f000 	lsl.w	r0, fp, r0
 8002254:	4318      	orrs	r0, r3
 8002256:	9004      	str	r0, [sp, #16]
 8002258:	e7d3      	b.n	8002202 <_svfiprintf_r+0x92>
 800225a:	9a03      	ldr	r2, [sp, #12]
 800225c:	1d11      	adds	r1, r2, #4
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	9103      	str	r1, [sp, #12]
 8002262:	2a00      	cmp	r2, #0
 8002264:	db01      	blt.n	800226a <_svfiprintf_r+0xfa>
 8002266:	9207      	str	r2, [sp, #28]
 8002268:	e004      	b.n	8002274 <_svfiprintf_r+0x104>
 800226a:	4252      	negs	r2, r2
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	9207      	str	r2, [sp, #28]
 8002272:	9304      	str	r3, [sp, #16]
 8002274:	783b      	ldrb	r3, [r7, #0]
 8002276:	2b2e      	cmp	r3, #46	; 0x2e
 8002278:	d10c      	bne.n	8002294 <_svfiprintf_r+0x124>
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	2b2a      	cmp	r3, #42	; 0x2a
 800227e:	d133      	bne.n	80022e8 <_svfiprintf_r+0x178>
 8002280:	9b03      	ldr	r3, [sp, #12]
 8002282:	3702      	adds	r7, #2
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	9203      	str	r2, [sp, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	bfb8      	it	lt
 800228e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002292:	9305      	str	r3, [sp, #20]
 8002294:	4d2e      	ldr	r5, [pc, #184]	; (8002350 <_svfiprintf_r+0x1e0>)
 8002296:	2203      	movs	r2, #3
 8002298:	7839      	ldrb	r1, [r7, #0]
 800229a:	4628      	mov	r0, r5
 800229c:	f000 f9e8 	bl	8002670 <memchr>
 80022a0:	b138      	cbz	r0, 80022b2 <_svfiprintf_r+0x142>
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	1b40      	subs	r0, r0, r5
 80022a6:	fa03 f000 	lsl.w	r0, r3, r0
 80022aa:	9b04      	ldr	r3, [sp, #16]
 80022ac:	3701      	adds	r7, #1
 80022ae:	4303      	orrs	r3, r0
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	7839      	ldrb	r1, [r7, #0]
 80022b4:	2206      	movs	r2, #6
 80022b6:	4827      	ldr	r0, [pc, #156]	; (8002354 <_svfiprintf_r+0x1e4>)
 80022b8:	1c7e      	adds	r6, r7, #1
 80022ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022be:	f000 f9d7 	bl	8002670 <memchr>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d038      	beq.n	8002338 <_svfiprintf_r+0x1c8>
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <_svfiprintf_r+0x1e8>)
 80022c8:	bb13      	cbnz	r3, 8002310 <_svfiprintf_r+0x1a0>
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	3307      	adds	r3, #7
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	3308      	adds	r3, #8
 80022d4:	9303      	str	r3, [sp, #12]
 80022d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022d8:	444b      	add	r3, r9
 80022da:	9309      	str	r3, [sp, #36]	; 0x24
 80022dc:	e76d      	b.n	80021ba <_svfiprintf_r+0x4a>
 80022de:	fb05 3202 	mla	r2, r5, r2, r3
 80022e2:	2001      	movs	r0, #1
 80022e4:	460f      	mov	r7, r1
 80022e6:	e7a6      	b.n	8002236 <_svfiprintf_r+0xc6>
 80022e8:	2300      	movs	r3, #0
 80022ea:	250a      	movs	r5, #10
 80022ec:	4619      	mov	r1, r3
 80022ee:	3701      	adds	r7, #1
 80022f0:	9305      	str	r3, [sp, #20]
 80022f2:	4638      	mov	r0, r7
 80022f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022f8:	3a30      	subs	r2, #48	; 0x30
 80022fa:	2a09      	cmp	r2, #9
 80022fc:	d903      	bls.n	8002306 <_svfiprintf_r+0x196>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0c8      	beq.n	8002294 <_svfiprintf_r+0x124>
 8002302:	9105      	str	r1, [sp, #20]
 8002304:	e7c6      	b.n	8002294 <_svfiprintf_r+0x124>
 8002306:	fb05 2101 	mla	r1, r5, r1, r2
 800230a:	2301      	movs	r3, #1
 800230c:	4607      	mov	r7, r0
 800230e:	e7f0      	b.n	80022f2 <_svfiprintf_r+0x182>
 8002310:	ab03      	add	r3, sp, #12
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4622      	mov	r2, r4
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <_svfiprintf_r+0x1ec>)
 8002318:	a904      	add	r1, sp, #16
 800231a:	4640      	mov	r0, r8
 800231c:	f3af 8000 	nop.w
 8002320:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002324:	4681      	mov	r9, r0
 8002326:	d1d6      	bne.n	80022d6 <_svfiprintf_r+0x166>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	065b      	lsls	r3, r3, #25
 800232c:	f53f af35 	bmi.w	800219a <_svfiprintf_r+0x2a>
 8002330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002332:	b01d      	add	sp, #116	; 0x74
 8002334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002338:	ab03      	add	r3, sp, #12
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4622      	mov	r2, r4
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_svfiprintf_r+0x1ec>)
 8002340:	a904      	add	r1, sp, #16
 8002342:	4640      	mov	r0, r8
 8002344:	f000 f882 	bl	800244c <_printf_i>
 8002348:	e7ea      	b.n	8002320 <_svfiprintf_r+0x1b0>
 800234a:	bf00      	nop
 800234c:	08002918 	.word	0x08002918
 8002350:	0800291e 	.word	0x0800291e
 8002354:	08002922 	.word	0x08002922
 8002358:	00000000 	.word	0x00000000
 800235c:	080020bd 	.word	0x080020bd

08002360 <_printf_common>:
 8002360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002364:	4691      	mov	r9, r2
 8002366:	461f      	mov	r7, r3
 8002368:	688a      	ldr	r2, [r1, #8]
 800236a:	690b      	ldr	r3, [r1, #16]
 800236c:	4606      	mov	r6, r0
 800236e:	4293      	cmp	r3, r2
 8002370:	bfb8      	it	lt
 8002372:	4613      	movlt	r3, r2
 8002374:	f8c9 3000 	str.w	r3, [r9]
 8002378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800237c:	460c      	mov	r4, r1
 800237e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002382:	b112      	cbz	r2, 800238a <_printf_common+0x2a>
 8002384:	3301      	adds	r3, #1
 8002386:	f8c9 3000 	str.w	r3, [r9]
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	0699      	lsls	r1, r3, #26
 800238e:	bf42      	ittt	mi
 8002390:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002394:	3302      	addmi	r3, #2
 8002396:	f8c9 3000 	strmi.w	r3, [r9]
 800239a:	6825      	ldr	r5, [r4, #0]
 800239c:	f015 0506 	ands.w	r5, r5, #6
 80023a0:	d107      	bne.n	80023b2 <_printf_common+0x52>
 80023a2:	f104 0a19 	add.w	sl, r4, #25
 80023a6:	68e3      	ldr	r3, [r4, #12]
 80023a8:	f8d9 2000 	ldr.w	r2, [r9]
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	42ab      	cmp	r3, r5
 80023b0:	dc29      	bgt.n	8002406 <_printf_common+0xa6>
 80023b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	3300      	adds	r3, #0
 80023ba:	bf18      	it	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	0692      	lsls	r2, r2, #26
 80023c0:	d42e      	bmi.n	8002420 <_printf_common+0xc0>
 80023c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023c6:	4639      	mov	r1, r7
 80023c8:	4630      	mov	r0, r6
 80023ca:	47c0      	blx	r8
 80023cc:	3001      	adds	r0, #1
 80023ce:	d021      	beq.n	8002414 <_printf_common+0xb4>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	68e5      	ldr	r5, [r4, #12]
 80023d4:	f003 0306 	and.w	r3, r3, #6
 80023d8:	2b04      	cmp	r3, #4
 80023da:	bf18      	it	ne
 80023dc:	2500      	movne	r5, #0
 80023de:	f8d9 2000 	ldr.w	r2, [r9]
 80023e2:	f04f 0900 	mov.w	r9, #0
 80023e6:	bf08      	it	eq
 80023e8:	1aad      	subeq	r5, r5, r2
 80023ea:	68a3      	ldr	r3, [r4, #8]
 80023ec:	6922      	ldr	r2, [r4, #16]
 80023ee:	bf08      	it	eq
 80023f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bfc4      	itt	gt
 80023f8:	1a9b      	subgt	r3, r3, r2
 80023fa:	18ed      	addgt	r5, r5, r3
 80023fc:	341a      	adds	r4, #26
 80023fe:	454d      	cmp	r5, r9
 8002400:	d11a      	bne.n	8002438 <_printf_common+0xd8>
 8002402:	2000      	movs	r0, #0
 8002404:	e008      	b.n	8002418 <_printf_common+0xb8>
 8002406:	2301      	movs	r3, #1
 8002408:	4652      	mov	r2, sl
 800240a:	4639      	mov	r1, r7
 800240c:	4630      	mov	r0, r6
 800240e:	47c0      	blx	r8
 8002410:	3001      	adds	r0, #1
 8002412:	d103      	bne.n	800241c <_printf_common+0xbc>
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241c:	3501      	adds	r5, #1
 800241e:	e7c2      	b.n	80023a6 <_printf_common+0x46>
 8002420:	2030      	movs	r0, #48	; 0x30
 8002422:	18e1      	adds	r1, r4, r3
 8002424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800242e:	4422      	add	r2, r4
 8002430:	3302      	adds	r3, #2
 8002432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002436:	e7c4      	b.n	80023c2 <_printf_common+0x62>
 8002438:	2301      	movs	r3, #1
 800243a:	4622      	mov	r2, r4
 800243c:	4639      	mov	r1, r7
 800243e:	4630      	mov	r0, r6
 8002440:	47c0      	blx	r8
 8002442:	3001      	adds	r0, #1
 8002444:	d0e6      	beq.n	8002414 <_printf_common+0xb4>
 8002446:	f109 0901 	add.w	r9, r9, #1
 800244a:	e7d8      	b.n	80023fe <_printf_common+0x9e>

0800244c <_printf_i>:
 800244c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002450:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002454:	460c      	mov	r4, r1
 8002456:	7e09      	ldrb	r1, [r1, #24]
 8002458:	b085      	sub	sp, #20
 800245a:	296e      	cmp	r1, #110	; 0x6e
 800245c:	4617      	mov	r7, r2
 800245e:	4606      	mov	r6, r0
 8002460:	4698      	mov	r8, r3
 8002462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002464:	f000 80b3 	beq.w	80025ce <_printf_i+0x182>
 8002468:	d822      	bhi.n	80024b0 <_printf_i+0x64>
 800246a:	2963      	cmp	r1, #99	; 0x63
 800246c:	d036      	beq.n	80024dc <_printf_i+0x90>
 800246e:	d80a      	bhi.n	8002486 <_printf_i+0x3a>
 8002470:	2900      	cmp	r1, #0
 8002472:	f000 80b9 	beq.w	80025e8 <_printf_i+0x19c>
 8002476:	2958      	cmp	r1, #88	; 0x58
 8002478:	f000 8083 	beq.w	8002582 <_printf_i+0x136>
 800247c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002480:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002484:	e032      	b.n	80024ec <_printf_i+0xa0>
 8002486:	2964      	cmp	r1, #100	; 0x64
 8002488:	d001      	beq.n	800248e <_printf_i+0x42>
 800248a:	2969      	cmp	r1, #105	; 0x69
 800248c:	d1f6      	bne.n	800247c <_printf_i+0x30>
 800248e:	6820      	ldr	r0, [r4, #0]
 8002490:	6813      	ldr	r3, [r2, #0]
 8002492:	0605      	lsls	r5, r0, #24
 8002494:	f103 0104 	add.w	r1, r3, #4
 8002498:	d52a      	bpl.n	80024f0 <_printf_i+0xa4>
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	da03      	bge.n	80024aa <_printf_i+0x5e>
 80024a2:	222d      	movs	r2, #45	; 0x2d
 80024a4:	425b      	negs	r3, r3
 80024a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024aa:	486f      	ldr	r0, [pc, #444]	; (8002668 <_printf_i+0x21c>)
 80024ac:	220a      	movs	r2, #10
 80024ae:	e039      	b.n	8002524 <_printf_i+0xd8>
 80024b0:	2973      	cmp	r1, #115	; 0x73
 80024b2:	f000 809d 	beq.w	80025f0 <_printf_i+0x1a4>
 80024b6:	d808      	bhi.n	80024ca <_printf_i+0x7e>
 80024b8:	296f      	cmp	r1, #111	; 0x6f
 80024ba:	d020      	beq.n	80024fe <_printf_i+0xb2>
 80024bc:	2970      	cmp	r1, #112	; 0x70
 80024be:	d1dd      	bne.n	800247c <_printf_i+0x30>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	e003      	b.n	80024d2 <_printf_i+0x86>
 80024ca:	2975      	cmp	r1, #117	; 0x75
 80024cc:	d017      	beq.n	80024fe <_printf_i+0xb2>
 80024ce:	2978      	cmp	r1, #120	; 0x78
 80024d0:	d1d4      	bne.n	800247c <_printf_i+0x30>
 80024d2:	2378      	movs	r3, #120	; 0x78
 80024d4:	4865      	ldr	r0, [pc, #404]	; (800266c <_printf_i+0x220>)
 80024d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024da:	e055      	b.n	8002588 <_printf_i+0x13c>
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e2:	1d19      	adds	r1, r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6011      	str	r1, [r2, #0]
 80024e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024ec:	2301      	movs	r3, #1
 80024ee:	e08c      	b.n	800260a <_printf_i+0x1be>
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024f6:	6011      	str	r1, [r2, #0]
 80024f8:	bf18      	it	ne
 80024fa:	b21b      	sxthne	r3, r3
 80024fc:	e7cf      	b.n	800249e <_printf_i+0x52>
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	6825      	ldr	r5, [r4, #0]
 8002502:	1d18      	adds	r0, r3, #4
 8002504:	6010      	str	r0, [r2, #0]
 8002506:	0628      	lsls	r0, r5, #24
 8002508:	d501      	bpl.n	800250e <_printf_i+0xc2>
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e002      	b.n	8002514 <_printf_i+0xc8>
 800250e:	0668      	lsls	r0, r5, #25
 8002510:	d5fb      	bpl.n	800250a <_printf_i+0xbe>
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	296f      	cmp	r1, #111	; 0x6f
 8002516:	bf14      	ite	ne
 8002518:	220a      	movne	r2, #10
 800251a:	2208      	moveq	r2, #8
 800251c:	4852      	ldr	r0, [pc, #328]	; (8002668 <_printf_i+0x21c>)
 800251e:	2100      	movs	r1, #0
 8002520:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002524:	6865      	ldr	r5, [r4, #4]
 8002526:	2d00      	cmp	r5, #0
 8002528:	60a5      	str	r5, [r4, #8]
 800252a:	f2c0 8095 	blt.w	8002658 <_printf_i+0x20c>
 800252e:	6821      	ldr	r1, [r4, #0]
 8002530:	f021 0104 	bic.w	r1, r1, #4
 8002534:	6021      	str	r1, [r4, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d13d      	bne.n	80025b6 <_printf_i+0x16a>
 800253a:	2d00      	cmp	r5, #0
 800253c:	f040 808e 	bne.w	800265c <_printf_i+0x210>
 8002540:	4665      	mov	r5, ip
 8002542:	2a08      	cmp	r2, #8
 8002544:	d10b      	bne.n	800255e <_printf_i+0x112>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	07db      	lsls	r3, r3, #31
 800254a:	d508      	bpl.n	800255e <_printf_i+0x112>
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	6862      	ldr	r2, [r4, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	bfde      	ittt	le
 8002554:	2330      	movle	r3, #48	; 0x30
 8002556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800255a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800255e:	ebac 0305 	sub.w	r3, ip, r5
 8002562:	6123      	str	r3, [r4, #16]
 8002564:	f8cd 8000 	str.w	r8, [sp]
 8002568:	463b      	mov	r3, r7
 800256a:	aa03      	add	r2, sp, #12
 800256c:	4621      	mov	r1, r4
 800256e:	4630      	mov	r0, r6
 8002570:	f7ff fef6 	bl	8002360 <_printf_common>
 8002574:	3001      	adds	r0, #1
 8002576:	d14d      	bne.n	8002614 <_printf_i+0x1c8>
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	b005      	add	sp, #20
 800257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002582:	4839      	ldr	r0, [pc, #228]	; (8002668 <_printf_i+0x21c>)
 8002584:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002588:	6813      	ldr	r3, [r2, #0]
 800258a:	6821      	ldr	r1, [r4, #0]
 800258c:	1d1d      	adds	r5, r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6015      	str	r5, [r2, #0]
 8002592:	060a      	lsls	r2, r1, #24
 8002594:	d50b      	bpl.n	80025ae <_printf_i+0x162>
 8002596:	07ca      	lsls	r2, r1, #31
 8002598:	bf44      	itt	mi
 800259a:	f041 0120 	orrmi.w	r1, r1, #32
 800259e:	6021      	strmi	r1, [r4, #0]
 80025a0:	b91b      	cbnz	r3, 80025aa <_printf_i+0x15e>
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	f022 0220 	bic.w	r2, r2, #32
 80025a8:	6022      	str	r2, [r4, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	e7b7      	b.n	800251e <_printf_i+0xd2>
 80025ae:	064d      	lsls	r5, r1, #25
 80025b0:	bf48      	it	mi
 80025b2:	b29b      	uxthmi	r3, r3
 80025b4:	e7ef      	b.n	8002596 <_printf_i+0x14a>
 80025b6:	4665      	mov	r5, ip
 80025b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80025bc:	fb02 3311 	mls	r3, r2, r1, r3
 80025c0:	5cc3      	ldrb	r3, [r0, r3]
 80025c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025c6:	460b      	mov	r3, r1
 80025c8:	2900      	cmp	r1, #0
 80025ca:	d1f5      	bne.n	80025b8 <_printf_i+0x16c>
 80025cc:	e7b9      	b.n	8002542 <_printf_i+0xf6>
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	6825      	ldr	r5, [r4, #0]
 80025d2:	1d18      	adds	r0, r3, #4
 80025d4:	6961      	ldr	r1, [r4, #20]
 80025d6:	6010      	str	r0, [r2, #0]
 80025d8:	0628      	lsls	r0, r5, #24
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	d501      	bpl.n	80025e2 <_printf_i+0x196>
 80025de:	6019      	str	r1, [r3, #0]
 80025e0:	e002      	b.n	80025e8 <_printf_i+0x19c>
 80025e2:	066a      	lsls	r2, r5, #25
 80025e4:	d5fb      	bpl.n	80025de <_printf_i+0x192>
 80025e6:	8019      	strh	r1, [r3, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	4665      	mov	r5, ip
 80025ec:	6123      	str	r3, [r4, #16]
 80025ee:	e7b9      	b.n	8002564 <_printf_i+0x118>
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	1d19      	adds	r1, r3, #4
 80025f4:	6011      	str	r1, [r2, #0]
 80025f6:	681d      	ldr	r5, [r3, #0]
 80025f8:	6862      	ldr	r2, [r4, #4]
 80025fa:	2100      	movs	r1, #0
 80025fc:	4628      	mov	r0, r5
 80025fe:	f000 f837 	bl	8002670 <memchr>
 8002602:	b108      	cbz	r0, 8002608 <_printf_i+0x1bc>
 8002604:	1b40      	subs	r0, r0, r5
 8002606:	6060      	str	r0, [r4, #4]
 8002608:	6863      	ldr	r3, [r4, #4]
 800260a:	6123      	str	r3, [r4, #16]
 800260c:	2300      	movs	r3, #0
 800260e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002612:	e7a7      	b.n	8002564 <_printf_i+0x118>
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	462a      	mov	r2, r5
 8002618:	4639      	mov	r1, r7
 800261a:	4630      	mov	r0, r6
 800261c:	47c0      	blx	r8
 800261e:	3001      	adds	r0, #1
 8002620:	d0aa      	beq.n	8002578 <_printf_i+0x12c>
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	079b      	lsls	r3, r3, #30
 8002626:	d413      	bmi.n	8002650 <_printf_i+0x204>
 8002628:	68e0      	ldr	r0, [r4, #12]
 800262a:	9b03      	ldr	r3, [sp, #12]
 800262c:	4298      	cmp	r0, r3
 800262e:	bfb8      	it	lt
 8002630:	4618      	movlt	r0, r3
 8002632:	e7a3      	b.n	800257c <_printf_i+0x130>
 8002634:	2301      	movs	r3, #1
 8002636:	464a      	mov	r2, r9
 8002638:	4639      	mov	r1, r7
 800263a:	4630      	mov	r0, r6
 800263c:	47c0      	blx	r8
 800263e:	3001      	adds	r0, #1
 8002640:	d09a      	beq.n	8002578 <_printf_i+0x12c>
 8002642:	3501      	adds	r5, #1
 8002644:	68e3      	ldr	r3, [r4, #12]
 8002646:	9a03      	ldr	r2, [sp, #12]
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	42ab      	cmp	r3, r5
 800264c:	dcf2      	bgt.n	8002634 <_printf_i+0x1e8>
 800264e:	e7eb      	b.n	8002628 <_printf_i+0x1dc>
 8002650:	2500      	movs	r5, #0
 8002652:	f104 0919 	add.w	r9, r4, #25
 8002656:	e7f5      	b.n	8002644 <_printf_i+0x1f8>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ac      	bne.n	80025b6 <_printf_i+0x16a>
 800265c:	7803      	ldrb	r3, [r0, #0]
 800265e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002666:	e76c      	b.n	8002542 <_printf_i+0xf6>
 8002668:	08002929 	.word	0x08002929
 800266c:	0800293a 	.word	0x0800293a

08002670 <memchr>:
 8002670:	b510      	push	{r4, lr}
 8002672:	b2c9      	uxtb	r1, r1
 8002674:	4402      	add	r2, r0
 8002676:	4290      	cmp	r0, r2
 8002678:	4603      	mov	r3, r0
 800267a:	d101      	bne.n	8002680 <memchr+0x10>
 800267c:	2300      	movs	r3, #0
 800267e:	e003      	b.n	8002688 <memchr+0x18>
 8002680:	781c      	ldrb	r4, [r3, #0]
 8002682:	3001      	adds	r0, #1
 8002684:	428c      	cmp	r4, r1
 8002686:	d1f6      	bne.n	8002676 <memchr+0x6>
 8002688:	4618      	mov	r0, r3
 800268a:	bd10      	pop	{r4, pc}

0800268c <memcpy>:
 800268c:	b510      	push	{r4, lr}
 800268e:	1e43      	subs	r3, r0, #1
 8002690:	440a      	add	r2, r1
 8002692:	4291      	cmp	r1, r2
 8002694:	d100      	bne.n	8002698 <memcpy+0xc>
 8002696:	bd10      	pop	{r4, pc}
 8002698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800269c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026a0:	e7f7      	b.n	8002692 <memcpy+0x6>

080026a2 <memmove>:
 80026a2:	4288      	cmp	r0, r1
 80026a4:	b510      	push	{r4, lr}
 80026a6:	eb01 0302 	add.w	r3, r1, r2
 80026aa:	d807      	bhi.n	80026bc <memmove+0x1a>
 80026ac:	1e42      	subs	r2, r0, #1
 80026ae:	4299      	cmp	r1, r3
 80026b0:	d00a      	beq.n	80026c8 <memmove+0x26>
 80026b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026ba:	e7f8      	b.n	80026ae <memmove+0xc>
 80026bc:	4283      	cmp	r3, r0
 80026be:	d9f5      	bls.n	80026ac <memmove+0xa>
 80026c0:	1881      	adds	r1, r0, r2
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	42d3      	cmn	r3, r2
 80026c6:	d100      	bne.n	80026ca <memmove+0x28>
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026d2:	e7f7      	b.n	80026c4 <memmove+0x22>

080026d4 <_free_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4605      	mov	r5, r0
 80026d8:	2900      	cmp	r1, #0
 80026da:	d043      	beq.n	8002764 <_free_r+0x90>
 80026dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e0:	1f0c      	subs	r4, r1, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfb8      	it	lt
 80026e6:	18e4      	addlt	r4, r4, r3
 80026e8:	f000 f8d0 	bl	800288c <__malloc_lock>
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <_free_r+0x94>)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	4610      	mov	r0, r2
 80026f2:	b933      	cbnz	r3, 8002702 <_free_r+0x2e>
 80026f4:	6063      	str	r3, [r4, #4]
 80026f6:	6014      	str	r4, [r2, #0]
 80026f8:	4628      	mov	r0, r5
 80026fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026fe:	f000 b8c6 	b.w	800288e <__malloc_unlock>
 8002702:	42a3      	cmp	r3, r4
 8002704:	d90b      	bls.n	800271e <_free_r+0x4a>
 8002706:	6821      	ldr	r1, [r4, #0]
 8002708:	1862      	adds	r2, r4, r1
 800270a:	4293      	cmp	r3, r2
 800270c:	bf01      	itttt	eq
 800270e:	681a      	ldreq	r2, [r3, #0]
 8002710:	685b      	ldreq	r3, [r3, #4]
 8002712:	1852      	addeq	r2, r2, r1
 8002714:	6022      	streq	r2, [r4, #0]
 8002716:	6063      	str	r3, [r4, #4]
 8002718:	6004      	str	r4, [r0, #0]
 800271a:	e7ed      	b.n	80026f8 <_free_r+0x24>
 800271c:	4613      	mov	r3, r2
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	b10a      	cbz	r2, 8002726 <_free_r+0x52>
 8002722:	42a2      	cmp	r2, r4
 8002724:	d9fa      	bls.n	800271c <_free_r+0x48>
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	1858      	adds	r0, r3, r1
 800272a:	42a0      	cmp	r0, r4
 800272c:	d10b      	bne.n	8002746 <_free_r+0x72>
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	4401      	add	r1, r0
 8002732:	1858      	adds	r0, r3, r1
 8002734:	4282      	cmp	r2, r0
 8002736:	6019      	str	r1, [r3, #0]
 8002738:	d1de      	bne.n	80026f8 <_free_r+0x24>
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	6852      	ldr	r2, [r2, #4]
 800273e:	4401      	add	r1, r0
 8002740:	6019      	str	r1, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	e7d8      	b.n	80026f8 <_free_r+0x24>
 8002746:	d902      	bls.n	800274e <_free_r+0x7a>
 8002748:	230c      	movs	r3, #12
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	e7d4      	b.n	80026f8 <_free_r+0x24>
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	1821      	adds	r1, r4, r0
 8002752:	428a      	cmp	r2, r1
 8002754:	bf01      	itttt	eq
 8002756:	6811      	ldreq	r1, [r2, #0]
 8002758:	6852      	ldreq	r2, [r2, #4]
 800275a:	1809      	addeq	r1, r1, r0
 800275c:	6021      	streq	r1, [r4, #0]
 800275e:	6062      	str	r2, [r4, #4]
 8002760:	605c      	str	r4, [r3, #4]
 8002762:	e7c9      	b.n	80026f8 <_free_r+0x24>
 8002764:	bd38      	pop	{r3, r4, r5, pc}
 8002766:	bf00      	nop
 8002768:	20000098 	.word	0x20000098

0800276c <_malloc_r>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	1ccd      	adds	r5, r1, #3
 8002770:	f025 0503 	bic.w	r5, r5, #3
 8002774:	3508      	adds	r5, #8
 8002776:	2d0c      	cmp	r5, #12
 8002778:	bf38      	it	cc
 800277a:	250c      	movcc	r5, #12
 800277c:	2d00      	cmp	r5, #0
 800277e:	4606      	mov	r6, r0
 8002780:	db01      	blt.n	8002786 <_malloc_r+0x1a>
 8002782:	42a9      	cmp	r1, r5
 8002784:	d903      	bls.n	800278e <_malloc_r+0x22>
 8002786:	230c      	movs	r3, #12
 8002788:	6033      	str	r3, [r6, #0]
 800278a:	2000      	movs	r0, #0
 800278c:	bd70      	pop	{r4, r5, r6, pc}
 800278e:	f000 f87d 	bl	800288c <__malloc_lock>
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <_malloc_r+0xac>)
 8002794:	6814      	ldr	r4, [r2, #0]
 8002796:	4621      	mov	r1, r4
 8002798:	b991      	cbnz	r1, 80027c0 <_malloc_r+0x54>
 800279a:	4c20      	ldr	r4, [pc, #128]	; (800281c <_malloc_r+0xb0>)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	b91b      	cbnz	r3, 80027a8 <_malloc_r+0x3c>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f000 f863 	bl	800286c <_sbrk_r>
 80027a6:	6020      	str	r0, [r4, #0]
 80027a8:	4629      	mov	r1, r5
 80027aa:	4630      	mov	r0, r6
 80027ac:	f000 f85e 	bl	800286c <_sbrk_r>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d124      	bne.n	80027fe <_malloc_r+0x92>
 80027b4:	230c      	movs	r3, #12
 80027b6:	4630      	mov	r0, r6
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	f000 f868 	bl	800288e <__malloc_unlock>
 80027be:	e7e4      	b.n	800278a <_malloc_r+0x1e>
 80027c0:	680b      	ldr	r3, [r1, #0]
 80027c2:	1b5b      	subs	r3, r3, r5
 80027c4:	d418      	bmi.n	80027f8 <_malloc_r+0x8c>
 80027c6:	2b0b      	cmp	r3, #11
 80027c8:	d90f      	bls.n	80027ea <_malloc_r+0x7e>
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	18cc      	adds	r4, r1, r3
 80027ce:	50cd      	str	r5, [r1, r3]
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 f85c 	bl	800288e <__malloc_unlock>
 80027d6:	f104 000b 	add.w	r0, r4, #11
 80027da:	1d23      	adds	r3, r4, #4
 80027dc:	f020 0007 	bic.w	r0, r0, #7
 80027e0:	1ac3      	subs	r3, r0, r3
 80027e2:	d0d3      	beq.n	800278c <_malloc_r+0x20>
 80027e4:	425a      	negs	r2, r3
 80027e6:	50e2      	str	r2, [r4, r3]
 80027e8:	e7d0      	b.n	800278c <_malloc_r+0x20>
 80027ea:	684b      	ldr	r3, [r1, #4]
 80027ec:	428c      	cmp	r4, r1
 80027ee:	bf16      	itet	ne
 80027f0:	6063      	strne	r3, [r4, #4]
 80027f2:	6013      	streq	r3, [r2, #0]
 80027f4:	460c      	movne	r4, r1
 80027f6:	e7eb      	b.n	80027d0 <_malloc_r+0x64>
 80027f8:	460c      	mov	r4, r1
 80027fa:	6849      	ldr	r1, [r1, #4]
 80027fc:	e7cc      	b.n	8002798 <_malloc_r+0x2c>
 80027fe:	1cc4      	adds	r4, r0, #3
 8002800:	f024 0403 	bic.w	r4, r4, #3
 8002804:	42a0      	cmp	r0, r4
 8002806:	d005      	beq.n	8002814 <_malloc_r+0xa8>
 8002808:	1a21      	subs	r1, r4, r0
 800280a:	4630      	mov	r0, r6
 800280c:	f000 f82e 	bl	800286c <_sbrk_r>
 8002810:	3001      	adds	r0, #1
 8002812:	d0cf      	beq.n	80027b4 <_malloc_r+0x48>
 8002814:	6025      	str	r5, [r4, #0]
 8002816:	e7db      	b.n	80027d0 <_malloc_r+0x64>
 8002818:	20000098 	.word	0x20000098
 800281c:	2000009c 	.word	0x2000009c

08002820 <_realloc_r>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	4607      	mov	r7, r0
 8002824:	4614      	mov	r4, r2
 8002826:	460e      	mov	r6, r1
 8002828:	b921      	cbnz	r1, 8002834 <_realloc_r+0x14>
 800282a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800282e:	4611      	mov	r1, r2
 8002830:	f7ff bf9c 	b.w	800276c <_malloc_r>
 8002834:	b922      	cbnz	r2, 8002840 <_realloc_r+0x20>
 8002836:	f7ff ff4d 	bl	80026d4 <_free_r>
 800283a:	4625      	mov	r5, r4
 800283c:	4628      	mov	r0, r5
 800283e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002840:	f000 f826 	bl	8002890 <_malloc_usable_size_r>
 8002844:	42a0      	cmp	r0, r4
 8002846:	d20f      	bcs.n	8002868 <_realloc_r+0x48>
 8002848:	4621      	mov	r1, r4
 800284a:	4638      	mov	r0, r7
 800284c:	f7ff ff8e 	bl	800276c <_malloc_r>
 8002850:	4605      	mov	r5, r0
 8002852:	2800      	cmp	r0, #0
 8002854:	d0f2      	beq.n	800283c <_realloc_r+0x1c>
 8002856:	4631      	mov	r1, r6
 8002858:	4622      	mov	r2, r4
 800285a:	f7ff ff17 	bl	800268c <memcpy>
 800285e:	4631      	mov	r1, r6
 8002860:	4638      	mov	r0, r7
 8002862:	f7ff ff37 	bl	80026d4 <_free_r>
 8002866:	e7e9      	b.n	800283c <_realloc_r+0x1c>
 8002868:	4635      	mov	r5, r6
 800286a:	e7e7      	b.n	800283c <_realloc_r+0x1c>

0800286c <_sbrk_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	2300      	movs	r3, #0
 8002870:	4c05      	ldr	r4, [pc, #20]	; (8002888 <_sbrk_r+0x1c>)
 8002872:	4605      	mov	r5, r0
 8002874:	4608      	mov	r0, r1
 8002876:	6023      	str	r3, [r4, #0]
 8002878:	f7fd ff36 	bl	80006e8 <_sbrk>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d102      	bne.n	8002886 <_sbrk_r+0x1a>
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	b103      	cbz	r3, 8002886 <_sbrk_r+0x1a>
 8002884:	602b      	str	r3, [r5, #0]
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	200000f8 	.word	0x200000f8

0800288c <__malloc_lock>:
 800288c:	4770      	bx	lr

0800288e <__malloc_unlock>:
 800288e:	4770      	bx	lr

08002890 <_malloc_usable_size_r>:
 8002890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002894:	1f18      	subs	r0, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	bfbc      	itt	lt
 800289a:	580b      	ldrlt	r3, [r1, r0]
 800289c:	18c0      	addlt	r0, r0, r3
 800289e:	4770      	bx	lr

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr
