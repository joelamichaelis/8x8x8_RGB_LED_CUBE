
RGB_Cube_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e4  080096e4  00020660  2**0
                  CONTENTS
  4 .ARM          00000000  080096e4  080096e4  00020660  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096e4  080096e4  00020660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000660  20000000  080096ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  20000660  08009d4c  00020660  2**3
                  ALLOC
 10 ._user_heap_stack 00002400  20001bb8  08009d4c  00021bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020660  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165b5  00000000  00000000  00020689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f7  00000000  00000000  00036c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  0003b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173ab  00000000  00000000  0003c738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a78  00000000  00000000  00053ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a1bf  00000000  00000000  0006455b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de71a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  000de798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000660 	.word	0x20000660
 8000128:	00000000 	.word	0x00000000
 800012c:	08009460 	.word	0x08009460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000664 	.word	0x20000664
 8000148:	08009460 	.word	0x08009460

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <merry_christmas>:
//------------------------------------Color Definition End-------------------------------------//

//-------------------------------------------HIGH LEVEL "PUBLIC" ANIMATIONS BEGIN----------------------------------------------------//

void merry_christmas(Frame_TypeDef frame)
{
 800015c:	b084      	sub	sp, #16
 800015e:	b580      	push	{r7, lr}
 8000160:	b0e2      	sub	sp, #392	; 0x188
 8000162:	af60      	add	r7, sp, #384	; 0x180
 8000164:	f107 0c10 	add.w	ip, r7, #16
 8000168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t maxBrightness = 4000;
 800016c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000170:	80fb      	strh	r3, [r7, #6]
	uint16_t minBrightness = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	80bb      	strh	r3, [r7, #4]
	uint16_t deltaBrightness = 10;
 8000176:	230a      	movs	r3, #10
 8000178:	807b      	strh	r3, [r7, #2]
	uint16_t delay = 100;
 800017a:	2364      	movs	r3, #100	; 0x64
 800017c:	803b      	strh	r3, [r7, #0]
	
	HALT_ANIMATION = false;
 800017e:	4b29      	ldr	r3, [pc, #164]	; (8000224 <merry_christmas+0xc8>)
 8000180:	2200      	movs	r2, #0
 8000182:	701a      	strb	r2, [r3, #0]
	
	lyr_frame_clear_all(frame.lyr0);
 8000184:	4668      	mov	r0, sp
 8000186:	f107 0320 	add.w	r3, r7, #32
 800018a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800018e:	4619      	mov	r1, r3
 8000190:	f008 fd4a 	bl	8008c28 <memcpy>
 8000194:	f107 0310 	add.w	r3, r7, #16
 8000198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019a:	f002 fdb9 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 800019e:	4b22      	ldr	r3, [pc, #136]	; (8000228 <merry_christmas+0xcc>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	935f      	str	r3, [sp, #380]	; 0x17c
 80001a4:	4668      	mov	r0, sp
 80001a6:	f107 0320 	add.w	r3, r7, #32
 80001aa:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80001ae:	4619      	mov	r1, r3
 80001b0:	f008 fd3a 	bl	8008c28 <memcpy>
 80001b4:	f107 0310 	add.w	r3, r7, #16
 80001b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001ba:	f002 fd5f 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 80001be:	4b1b      	ldr	r3, [pc, #108]	; (800022c <merry_christmas+0xd0>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	701a      	strb	r2, [r3, #0]
	
	while(HALT_ANIMATION == false)
 80001c4:	bf00      	nop
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <merry_christmas+0xc8>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	f083 0301 	eor.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d1f8      	bne.n	80001c6 <merry_christmas+0x6a>
	{
		//dissolve_in_color(frame.lyr0, mask0, green, maxBrightness, deltaBrightness, delay);
		//dissolve_out_color(frame.lyr0, mask0, green, minBrightness, deltaBrightness, delay);
	}
	lyr_frame_clear_all(frame.lyr0);
 80001d4:	4668      	mov	r0, sp
 80001d6:	f107 0320 	add.w	r3, r7, #32
 80001da:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80001de:	4619      	mov	r1, r3
 80001e0:	f008 fd22 	bl	8008c28 <memcpy>
 80001e4:	f107 0310 	add.w	r3, r7, #16
 80001e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001ea:	f002 fd91 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <merry_christmas+0xcc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	935f      	str	r3, [sp, #380]	; 0x17c
 80001f4:	4668      	mov	r0, sp
 80001f6:	f107 0320 	add.w	r3, r7, #32
 80001fa:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80001fe:	4619      	mov	r1, r3
 8000200:	f008 fd12 	bl	8008c28 <memcpy>
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800020a:	f002 fd37 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <merry_christmas+0xd0>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800021e:	b004      	add	sp, #16
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	2000067c 	.word	0x2000067c
 8000228:	200002e0 	.word	0x200002e0
 800022c:	200006cd 	.word	0x200006cd

08000230 <original_fade>:

void original_fade(Frame_TypeDef frame)
{
 8000230:	b084      	sub	sp, #16
 8000232:	b590      	push	{r4, r7, lr}
 8000234:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000238:	af64      	add	r7, sp, #400	; 0x190
 800023a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800023e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t maxBrightness = 4000;
 8000242:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000246:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t minBrightness = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	uint16_t deltaBrightness = 10;
 8000250:	230a      	movs	r3, #10
 8000252:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t delay = 40;
 8000256:	2328      	movs	r3, #40	; 0x28
 8000258:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t transitionDelay = 4;
 800025c:	2304      	movs	r3, #4
 800025e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	uint64_t colorWheel[12] = {red,orange,yellow,yelgrn,green,seafoam,cyan,lightblu,blue,indigo,purple,pink};	
 8000262:	4b2e      	ldr	r3, [pc, #184]	; (800031c <original_fade+0xec>)
 8000264:	cb18      	ldmia	r3, {r3, r4}
 8000266:	e9c7 3400 	strd	r3, r4, [r7]
 800026a:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <original_fade+0xf0>)
 800026c:	cb18      	ldmia	r3, {r3, r4}
 800026e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <original_fade+0xf4>)
 8000274:	cb18      	ldmia	r3, {r3, r4}
 8000276:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800027a:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <original_fade+0xf8>)
 800027c:	cb18      	ldmia	r3, {r3, r4}
 800027e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000282:	4b2a      	ldr	r3, [pc, #168]	; (800032c <original_fade+0xfc>)
 8000284:	cb18      	ldmia	r3, {r3, r4}
 8000286:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800028a:	4b29      	ldr	r3, [pc, #164]	; (8000330 <original_fade+0x100>)
 800028c:	cb18      	ldmia	r3, {r3, r4}
 800028e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <original_fade+0x104>)
 8000294:	cb18      	ldmia	r3, {r3, r4}
 8000296:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800029a:	4b27      	ldr	r3, [pc, #156]	; (8000338 <original_fade+0x108>)
 800029c:	cb18      	ldmia	r3, {r3, r4}
 800029e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80002a2:	4b26      	ldr	r3, [pc, #152]	; (800033c <original_fade+0x10c>)
 80002a4:	cb18      	ldmia	r3, {r3, r4}
 80002a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <original_fade+0x110>)
 80002ac:	cb18      	ldmia	r3, {r3, r4}
 80002ae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80002b2:	4b24      	ldr	r3, [pc, #144]	; (8000344 <original_fade+0x114>)
 80002b4:	cb18      	ldmia	r3, {r3, r4}
 80002b6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80002ba:	4b23      	ldr	r3, [pc, #140]	; (8000348 <original_fade+0x118>)
 80002bc:	cb18      	ldmia	r3, {r3, r4}
 80002be:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	uint8_t directionA = DIRECTION_FORWARD;
 80002c2:	2305      	movs	r3, #5
 80002c4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	uint8_t directionB = DIRECTION_BACK;
 80002c8:	2306      	movs	r3, #6
 80002ca:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	
	HALT_ANIMATION = false;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <original_fade+0x11c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
	
	lyr_frame_clear_all(frame.lyr0);
 80002d4:	4668      	mov	r0, sp
 80002d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002da:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80002de:	4619      	mov	r1, r3
 80002e0:	f008 fca2 	bl	8008c28 <memcpy>
 80002e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80002e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ea:	f002 fd11 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <original_fade+0x120>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	935f      	str	r3, [sp, #380]	; 0x17c
 80002f4:	4668      	mov	r0, sp
 80002f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002fa:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80002fe:	4619      	mov	r1, r3
 8000300:	f008 fc92 	bl	8008c28 <memcpy>
 8000304:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800030a:	f002 fcb7 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <original_fade+0x124>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
	
	while(HALT_ANIMATION == false)
 8000314:	e1b5      	b.n	8000682 <original_fade+0x452>
	{
		int caseNum = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (caseNum<12)
 800031a:	e1ae      	b.n	800067a <original_fade+0x44a>
 800031c:	20000000 	.word	0x20000000
 8000320:	20000030 	.word	0x20000030
 8000324:	20000008 	.word	0x20000008
 8000328:	20000038 	.word	0x20000038
 800032c:	20000010 	.word	0x20000010
 8000330:	20000040 	.word	0x20000040
 8000334:	20000018 	.word	0x20000018
 8000338:	20000048 	.word	0x20000048
 800033c:	20000020 	.word	0x20000020
 8000340:	20000050 	.word	0x20000050
 8000344:	20000028 	.word	0x20000028
 8000348:	20000058 	.word	0x20000058
 800034c:	2000067c 	.word	0x2000067c
 8000350:	200002e0 	.word	0x200002e0
 8000354:	200006cd 	.word	0x200006cd
		{
			transition_punch(frame.lyr0,&mask0[0],colorWheel[caseNum],delay,directionA);	
 8000358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000360:	4413      	add	r3, r2
 8000362:	3b70      	subs	r3, #112	; 0x70
 8000364:	cb18      	ldmia	r3, {r3, r4}
 8000366:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800036a:	9263      	str	r2, [sp, #396]	; 0x18c
 800036c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000370:	9262      	str	r2, [sp, #392]	; 0x188
 8000372:	aa60      	add	r2, sp, #384	; 0x180
 8000374:	e9c2 3400 	strd	r3, r4, [r2]
 8000378:	4bb5      	ldr	r3, [pc, #724]	; (8000650 <original_fade+0x420>)
 800037a:	935f      	str	r3, [sp, #380]	; 0x17c
 800037c:	4668      	mov	r0, sp
 800037e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000382:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000386:	4619      	mov	r1, r3
 8000388:	f008 fc4e 	bl	8008c28 <memcpy>
 800038c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000392:	f001 fb5f 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask0[0],null,delay,directionB);
 8000396:	4baf      	ldr	r3, [pc, #700]	; (8000654 <original_fade+0x424>)
 8000398:	cb18      	ldmia	r3, {r3, r4}
 800039a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800039e:	9263      	str	r2, [sp, #396]	; 0x18c
 80003a0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80003a4:	9262      	str	r2, [sp, #392]	; 0x188
 80003a6:	aa60      	add	r2, sp, #384	; 0x180
 80003a8:	e9c2 3400 	strd	r3, r4, [r2]
 80003ac:	4ba8      	ldr	r3, [pc, #672]	; (8000650 <original_fade+0x420>)
 80003ae:	935f      	str	r3, [sp, #380]	; 0x17c
 80003b0:	4668      	mov	r0, sp
 80003b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003b6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80003ba:	4619      	mov	r1, r3
 80003bc:	f008 fc34 	bl	8008c28 <memcpy>
 80003c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80003c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003c6:	f001 fb45 	bl	8001a54 <transition_punch>
			animation_delay(transitionDelay);
 80003ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 ff16 	bl	8002200 <animation_delay>
			caseNum++;
 80003d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003d6:	3301      	adds	r3, #1
 80003d8:	66fb      	str	r3, [r7, #108]	; 0x6c
		
			transition_punch(frame.lyr0,&mask1[0],colorWheel[caseNum],delay,directionA);	
 80003da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003e2:	4413      	add	r3, r2
 80003e4:	3b70      	subs	r3, #112	; 0x70
 80003e6:	cb18      	ldmia	r3, {r3, r4}
 80003e8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80003ec:	9263      	str	r2, [sp, #396]	; 0x18c
 80003ee:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80003f2:	9262      	str	r2, [sp, #392]	; 0x188
 80003f4:	aa60      	add	r2, sp, #384	; 0x180
 80003f6:	e9c2 3400 	strd	r3, r4, [r2]
 80003fa:	4b97      	ldr	r3, [pc, #604]	; (8000658 <original_fade+0x428>)
 80003fc:	935f      	str	r3, [sp, #380]	; 0x17c
 80003fe:	4668      	mov	r0, sp
 8000400:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000404:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000408:	4619      	mov	r1, r3
 800040a:	f008 fc0d 	bl	8008c28 <memcpy>
 800040e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000414:	f001 fb1e 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask1[0],null,delay,directionB);
 8000418:	4b8e      	ldr	r3, [pc, #568]	; (8000654 <original_fade+0x424>)
 800041a:	cb18      	ldmia	r3, {r3, r4}
 800041c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000420:	9263      	str	r2, [sp, #396]	; 0x18c
 8000422:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000426:	9262      	str	r2, [sp, #392]	; 0x188
 8000428:	aa60      	add	r2, sp, #384	; 0x180
 800042a:	e9c2 3400 	strd	r3, r4, [r2]
 800042e:	4b8a      	ldr	r3, [pc, #552]	; (8000658 <original_fade+0x428>)
 8000430:	935f      	str	r3, [sp, #380]	; 0x17c
 8000432:	4668      	mov	r0, sp
 8000434:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000438:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800043c:	4619      	mov	r1, r3
 800043e:	f008 fbf3 	bl	8008c28 <memcpy>
 8000442:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000448:	f001 fb04 	bl	8001a54 <transition_punch>
			//dissolve_in_color(frame.lyr0,mask1,colorWheel[caseNum],maxBrightness,deltaBrightness,delay);					
			//dissolve_out_color(frame.lyr0,mask1,colorWheel[caseNum],minBrightness,deltaBrightness,delay);
			animation_delay(transitionDelay);
 800044c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fed5 	bl	8002200 <animation_delay>
			caseNum++;
 8000456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000458:	3301      	adds	r3, #1
 800045a:	66fb      	str	r3, [r7, #108]	; 0x6c
			
			transition_punch(frame.lyr0,&mask2[0],colorWheel[caseNum],delay,directionA);	
 800045c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000464:	4413      	add	r3, r2
 8000466:	3b70      	subs	r3, #112	; 0x70
 8000468:	cb18      	ldmia	r3, {r3, r4}
 800046a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800046e:	9263      	str	r2, [sp, #396]	; 0x18c
 8000470:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000474:	9262      	str	r2, [sp, #392]	; 0x188
 8000476:	aa60      	add	r2, sp, #384	; 0x180
 8000478:	e9c2 3400 	strd	r3, r4, [r2]
 800047c:	4b77      	ldr	r3, [pc, #476]	; (800065c <original_fade+0x42c>)
 800047e:	935f      	str	r3, [sp, #380]	; 0x17c
 8000480:	4668      	mov	r0, sp
 8000482:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000486:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800048a:	4619      	mov	r1, r3
 800048c:	f008 fbcc 	bl	8008c28 <memcpy>
 8000490:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000496:	f001 fadd 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask2[0],null,delay,directionB);
 800049a:	4b6e      	ldr	r3, [pc, #440]	; (8000654 <original_fade+0x424>)
 800049c:	cb18      	ldmia	r3, {r3, r4}
 800049e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80004a2:	9263      	str	r2, [sp, #396]	; 0x18c
 80004a4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80004a8:	9262      	str	r2, [sp, #392]	; 0x188
 80004aa:	aa60      	add	r2, sp, #384	; 0x180
 80004ac:	e9c2 3400 	strd	r3, r4, [r2]
 80004b0:	4b6a      	ldr	r3, [pc, #424]	; (800065c <original_fade+0x42c>)
 80004b2:	935f      	str	r3, [sp, #380]	; 0x17c
 80004b4:	4668      	mov	r0, sp
 80004b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80004ba:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80004be:	4619      	mov	r1, r3
 80004c0:	f008 fbb2 	bl	8008c28 <memcpy>
 80004c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80004c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ca:	f001 fac3 	bl	8001a54 <transition_punch>
			//dissolve_in_color(frame.lyr0,mask2,colorWheel[caseNum],maxBrightness,deltaBrightness,delay);					
			//dissolve_out_color(frame.lyr0,mask2,colorWheel[caseNum],minBrightness,deltaBrightness,delay);
			animation_delay(transitionDelay);
 80004ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fe94 	bl	8002200 <animation_delay>
			caseNum++;
 80004d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004da:	3301      	adds	r3, #1
 80004dc:	66fb      	str	r3, [r7, #108]	; 0x6c
			
			transition_punch(frame.lyr0,&mask3[0],colorWheel[caseNum],delay,directionA);	
 80004de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80004e6:	4413      	add	r3, r2
 80004e8:	3b70      	subs	r3, #112	; 0x70
 80004ea:	cb18      	ldmia	r3, {r3, r4}
 80004ec:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80004f0:	9263      	str	r2, [sp, #396]	; 0x18c
 80004f2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80004f6:	9262      	str	r2, [sp, #392]	; 0x188
 80004f8:	aa60      	add	r2, sp, #384	; 0x180
 80004fa:	e9c2 3400 	strd	r3, r4, [r2]
 80004fe:	4b58      	ldr	r3, [pc, #352]	; (8000660 <original_fade+0x430>)
 8000500:	935f      	str	r3, [sp, #380]	; 0x17c
 8000502:	4668      	mov	r0, sp
 8000504:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000508:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800050c:	4619      	mov	r1, r3
 800050e:	f008 fb8b 	bl	8008c28 <memcpy>
 8000512:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000518:	f001 fa9c 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask3[0],null,delay,directionB);
 800051c:	4b4d      	ldr	r3, [pc, #308]	; (8000654 <original_fade+0x424>)
 800051e:	cb18      	ldmia	r3, {r3, r4}
 8000520:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000524:	9263      	str	r2, [sp, #396]	; 0x18c
 8000526:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800052a:	9262      	str	r2, [sp, #392]	; 0x188
 800052c:	aa60      	add	r2, sp, #384	; 0x180
 800052e:	e9c2 3400 	strd	r3, r4, [r2]
 8000532:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <original_fade+0x430>)
 8000534:	935f      	str	r3, [sp, #380]	; 0x17c
 8000536:	4668      	mov	r0, sp
 8000538:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800053c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000540:	4619      	mov	r1, r3
 8000542:	f008 fb71 	bl	8008c28 <memcpy>
 8000546:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	f001 fa82 	bl	8001a54 <transition_punch>
			//dissolve_in_color(frame.lyr0,mask3,colorWheel[caseNum],maxBrightness,deltaBrightness,delay);					
			//dissolve_out_color(frame.lyr0,mask3,colorWheel[caseNum],minBrightness,deltaBrightness,delay);
			animation_delay(transitionDelay);
 8000550:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fe53 	bl	8002200 <animation_delay>
			caseNum++;
 800055a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800055c:	3301      	adds	r3, #1
 800055e:	66fb      	str	r3, [r7, #108]	; 0x6c
			
			transition_punch(frame.lyr0,&mask2[0],colorWheel[caseNum],delay,directionA);	
 8000560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000568:	4413      	add	r3, r2
 800056a:	3b70      	subs	r3, #112	; 0x70
 800056c:	cb18      	ldmia	r3, {r3, r4}
 800056e:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8000572:	9263      	str	r2, [sp, #396]	; 0x18c
 8000574:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000578:	9262      	str	r2, [sp, #392]	; 0x188
 800057a:	aa60      	add	r2, sp, #384	; 0x180
 800057c:	e9c2 3400 	strd	r3, r4, [r2]
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <original_fade+0x42c>)
 8000582:	935f      	str	r3, [sp, #380]	; 0x17c
 8000584:	4668      	mov	r0, sp
 8000586:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800058a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800058e:	4619      	mov	r1, r3
 8000590:	f008 fb4a 	bl	8008c28 <memcpy>
 8000594:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059a:	f001 fa5b 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask2[0],null,delay,directionB);
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <original_fade+0x424>)
 80005a0:	cb18      	ldmia	r3, {r3, r4}
 80005a2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80005a6:	9263      	str	r2, [sp, #396]	; 0x18c
 80005a8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80005ac:	9262      	str	r2, [sp, #392]	; 0x188
 80005ae:	aa60      	add	r2, sp, #384	; 0x180
 80005b0:	e9c2 3400 	strd	r3, r4, [r2]
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <original_fade+0x42c>)
 80005b6:	935f      	str	r3, [sp, #380]	; 0x17c
 80005b8:	4668      	mov	r0, sp
 80005ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005be:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80005c2:	4619      	mov	r1, r3
 80005c4:	f008 fb30 	bl	8008c28 <memcpy>
 80005c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ce:	f001 fa41 	bl	8001a54 <transition_punch>
			//dissolve_in_color(frame.lyr0,mask2,colorWheel[caseNum],maxBrightness,deltaBrightness,delay);					
			//dissolve_out_color(frame.lyr0,mask2,colorWheel[caseNum],minBrightness,deltaBrightness,delay);
			animation_delay(transitionDelay);
 80005d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fe12 	bl	8002200 <animation_delay>
			caseNum++;
 80005dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005de:	3301      	adds	r3, #1
 80005e0:	66fb      	str	r3, [r7, #108]	; 0x6c
			
			transition_punch(frame.lyr0,&mask1[0],colorWheel[caseNum],delay,directionA);	
 80005e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80005ea:	4413      	add	r3, r2
 80005ec:	3b70      	subs	r3, #112	; 0x70
 80005ee:	cb18      	ldmia	r3, {r3, r4}
 80005f0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80005f4:	9263      	str	r2, [sp, #396]	; 0x18c
 80005f6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80005fa:	9262      	str	r2, [sp, #392]	; 0x188
 80005fc:	aa60      	add	r2, sp, #384	; 0x180
 80005fe:	e9c2 3400 	strd	r3, r4, [r2]
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <original_fade+0x428>)
 8000604:	935f      	str	r3, [sp, #380]	; 0x17c
 8000606:	4668      	mov	r0, sp
 8000608:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800060c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000610:	4619      	mov	r1, r3
 8000612:	f008 fb09 	bl	8008c28 <memcpy>
 8000616:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800061a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061c:	f001 fa1a 	bl	8001a54 <transition_punch>
			transition_punch(frame.lyr0,&mask1[0],null,delay,directionB);
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <original_fade+0x424>)
 8000622:	cb18      	ldmia	r3, {r3, r4}
 8000624:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000628:	9263      	str	r2, [sp, #396]	; 0x18c
 800062a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800062e:	9262      	str	r2, [sp, #392]	; 0x188
 8000630:	aa60      	add	r2, sp, #384	; 0x180
 8000632:	e9c2 3400 	strd	r3, r4, [r2]
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <original_fade+0x428>)
 8000638:	935f      	str	r3, [sp, #380]	; 0x17c
 800063a:	4668      	mov	r0, sp
 800063c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000640:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000644:	4619      	mov	r1, r3
 8000646:	f008 faef 	bl	8008c28 <memcpy>
 800064a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800064e:	e009      	b.n	8000664 <original_fade+0x434>
 8000650:	20000060 	.word	0x20000060
 8000654:	20000680 	.word	0x20000680
 8000658:	200000a0 	.word	0x200000a0
 800065c:	200000e0 	.word	0x200000e0
 8000660:	20000120 	.word	0x20000120
 8000664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000666:	f001 f9f5 	bl	8001a54 <transition_punch>
			//dissolve_in_color(frame.lyr0,mask1,colorWheel[caseNum],maxBrightness,deltaBrightness,delay);					
			//dissolve_out_color(frame.lyr0,mask1,colorWheel[caseNum],minBrightness,deltaBrightness,delay);
			animation_delay(transitionDelay);
 800066a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fdc6 	bl	8002200 <animation_delay>
			caseNum++;
 8000674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000676:	3301      	adds	r3, #1
 8000678:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (caseNum<12)
 800067a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800067c:	2b0b      	cmp	r3, #11
 800067e:	f77f ae6b 	ble.w	8000358 <original_fade+0x128>
	while(HALT_ANIMATION == false)
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <original_fade+0x4b0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f083 0301 	eor.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	f47f ae42 	bne.w	8000316 <original_fade+0xe6>
		}
	}
	
	lyr_frame_clear_all(frame.lyr0);
 8000692:	4668      	mov	r0, sp
 8000694:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000698:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800069c:	4619      	mov	r1, r3
 800069e:	f008 fac3 	bl	8008c28 <memcpy>
 80006a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a8:	f002 fb32 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <original_fade+0x4b4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	935f      	str	r3, [sp, #380]	; 0x17c
 80006b2:	4668      	mov	r0, sp
 80006b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006b8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80006bc:	4619      	mov	r1, r3
 80006be:	f008 fab3 	bl	8008c28 <memcpy>
 80006c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c8:	f002 fad8 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <original_fade+0x4b8>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	3774      	adds	r7, #116	; 0x74
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	2000067c 	.word	0x2000067c
 80006e4:	200002e0 	.word	0x200002e0
 80006e8:	200006cd 	.word	0x200006cd

080006ec <halloween>:

void halloween(Frame_TypeDef frame)
{
 80006ec:	b084      	sub	sp, #16
 80006ee:	b590      	push	{r4, r7, lr}
 80006f0:	b0eb      	sub	sp, #428	; 0x1ac
 80006f2:	af66      	add	r7, sp, #408	; 0x198
 80006f4:	f107 0420 	add.w	r4, r7, #32
 80006f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t maxBrightness = 2000;
 80006fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000700:	81fb      	strh	r3, [r7, #14]
	uint16_t minBrightness = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	81bb      	strh	r3, [r7, #12]
	uint16_t deltaBrightness = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	817b      	strh	r3, [r7, #10]
	uint16_t delay = 10;
 800070a:	230a      	movs	r3, #10
 800070c:	813b      	strh	r3, [r7, #8]
	uint16_t transitionDelay = 500;
 800070e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000712:	80fb      	strh	r3, [r7, #6]
	
	lyr_frame_clear_all(frame.lyr0);
 8000714:	4668      	mov	r0, sp
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800071e:	4619      	mov	r1, r3
 8000720:	f008 fa82 	bl	8008c28 <memcpy>
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072a:	f002 faf1 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <halloween+0x1a8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	935f      	str	r3, [sp, #380]	; 0x17c
 8000734:	4668      	mov	r0, sp
 8000736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800073a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800073e:	4619      	mov	r1, r3
 8000740:	f008 fa72 	bl	8008c28 <memcpy>
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074a:	f002 fa97 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 800074e:	4b52      	ldr	r3, [pc, #328]	; (8000898 <halloween+0x1ac>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
	
	while(HALT_ANIMATION == false)
 8000754:	e06f      	b.n	8000836 <halloween+0x14a>
	{
		fade_in_color(frame.lyr0,maskChessBoardW,purple,maxBrightness,deltaBrightness,delay);
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <halloween+0x1b0>)
 8000758:	cb18      	ldmia	r3, {r3, r4}
 800075a:	893a      	ldrh	r2, [r7, #8]
 800075c:	9264      	str	r2, [sp, #400]	; 0x190
 800075e:	897a      	ldrh	r2, [r7, #10]
 8000760:	9263      	str	r2, [sp, #396]	; 0x18c
 8000762:	89fa      	ldrh	r2, [r7, #14]
 8000764:	9262      	str	r2, [sp, #392]	; 0x188
 8000766:	aa60      	add	r2, sp, #384	; 0x180
 8000768:	e9c2 3400 	strd	r3, r4, [r2]
 800076c:	4b4c      	ldr	r3, [pc, #304]	; (80008a0 <halloween+0x1b4>)
 800076e:	935f      	str	r3, [sp, #380]	; 0x17c
 8000770:	4668      	mov	r0, sp
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800077a:	4619      	mov	r1, r3
 800077c:	f008 fa54 	bl	8008c28 <memcpy>
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000786:	f001 fa0d 	bl	8001ba4 <fade_in_color>
		fade_in_color(frame.lyr0,maskChessBoardB,orange,maxBrightness,deltaBrightness,delay);
 800078a:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <halloween+0x1b8>)
 800078c:	cb18      	ldmia	r3, {r3, r4}
 800078e:	893a      	ldrh	r2, [r7, #8]
 8000790:	9264      	str	r2, [sp, #400]	; 0x190
 8000792:	897a      	ldrh	r2, [r7, #10]
 8000794:	9263      	str	r2, [sp, #396]	; 0x18c
 8000796:	89fa      	ldrh	r2, [r7, #14]
 8000798:	9262      	str	r2, [sp, #392]	; 0x188
 800079a:	aa60      	add	r2, sp, #384	; 0x180
 800079c:	e9c2 3400 	strd	r3, r4, [r2]
 80007a0:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <halloween+0x1bc>)
 80007a2:	935f      	str	r3, [sp, #380]	; 0x17c
 80007a4:	4668      	mov	r0, sp
 80007a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007aa:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80007ae:	4619      	mov	r1, r3
 80007b0:	f008 fa3a 	bl	8008c28 <memcpy>
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ba:	f001 f9f3 	bl	8001ba4 <fade_in_color>
		animation_delay(transitionDelay);
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fd1d 	bl	8002200 <animation_delay>
		fade_out_color(frame.lyr0,maskChessBoardW,purple,minBrightness,deltaBrightness,delay);			
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <halloween+0x1b0>)
 80007c8:	cb18      	ldmia	r3, {r3, r4}
 80007ca:	893a      	ldrh	r2, [r7, #8]
 80007cc:	9264      	str	r2, [sp, #400]	; 0x190
 80007ce:	897a      	ldrh	r2, [r7, #10]
 80007d0:	9263      	str	r2, [sp, #396]	; 0x18c
 80007d2:	89ba      	ldrh	r2, [r7, #12]
 80007d4:	9262      	str	r2, [sp, #392]	; 0x188
 80007d6:	aa60      	add	r2, sp, #384	; 0x180
 80007d8:	e9c2 3400 	strd	r3, r4, [r2]
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <halloween+0x1b4>)
 80007de:	935f      	str	r3, [sp, #380]	; 0x17c
 80007e0:	4668      	mov	r0, sp
 80007e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80007ea:	4619      	mov	r1, r3
 80007ec:	f008 fa1c 	bl	8008c28 <memcpy>
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f6:	f001 fad1 	bl	8001d9c <fade_out_color>
		fade_out_color(frame.lyr0,maskChessBoardB,orange,minBrightness,deltaBrightness,delay);
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <halloween+0x1b8>)
 80007fc:	cb18      	ldmia	r3, {r3, r4}
 80007fe:	893a      	ldrh	r2, [r7, #8]
 8000800:	9264      	str	r2, [sp, #400]	; 0x190
 8000802:	897a      	ldrh	r2, [r7, #10]
 8000804:	9263      	str	r2, [sp, #396]	; 0x18c
 8000806:	89ba      	ldrh	r2, [r7, #12]
 8000808:	9262      	str	r2, [sp, #392]	; 0x188
 800080a:	aa60      	add	r2, sp, #384	; 0x180
 800080c:	e9c2 3400 	strd	r3, r4, [r2]
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <halloween+0x1bc>)
 8000812:	935f      	str	r3, [sp, #380]	; 0x17c
 8000814:	4668      	mov	r0, sp
 8000816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800081a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800081e:	4619      	mov	r1, r3
 8000820:	f008 fa02 	bl	8008c28 <memcpy>
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082a:	f001 fab7 	bl	8001d9c <fade_out_color>
		animation_delay(transitionDelay);
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fce5 	bl	8002200 <animation_delay>
	while(HALT_ANIMATION == false)
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <halloween+0x1c0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f083 0301 	eor.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d188      	bne.n	8000756 <halloween+0x6a>
	}
	
	lyr_frame_clear_all(frame.lyr0);
 8000844:	4668      	mov	r0, sp
 8000846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800084e:	4619      	mov	r1, r3
 8000850:	f008 f9ea 	bl	8008c28 <memcpy>
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085a:	f002 fa59 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <halloween+0x1a8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	935f      	str	r3, [sp, #380]	; 0x17c
 8000864:	4668      	mov	r0, sp
 8000866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800086e:	4619      	mov	r1, r3
 8000870:	f008 f9da 	bl	8008c28 <memcpy>
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087a:	f002 f9ff 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <halloween+0x1ac>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800088e:	b004      	add	sp, #16
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200002e0 	.word	0x200002e0
 8000898:	200006cd 	.word	0x200006cd
 800089c:	20000028 	.word	0x20000028
 80008a0:	20000160 	.word	0x20000160
 80008a4:	20000030 	.word	0x20000030
 80008a8:	200001a0 	.word	0x200001a0
 80008ac:	2000067c 	.word	0x2000067c

080008b0 <joel_mode>:

void joel_mode(Frame_TypeDef frame)
{
 80008b0:	b084      	sub	sp, #16
 80008b2:	b590      	push	{r4, r7, lr}
 80008b4:	b0eb      	sub	sp, #428	; 0x1ac
 80008b6:	af66      	add	r7, sp, #408	; 0x198
 80008b8:	f107 0420 	add.w	r4, r7, #32
 80008bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	
	uint16_t maxBrightness = 2000;
 80008c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008c4:	81fb      	strh	r3, [r7, #14]
	uint16_t minBrightness = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	81bb      	strh	r3, [r7, #12]
	uint16_t deltaBrightness = 10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	817b      	strh	r3, [r7, #10]
	uint16_t delay = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	813b      	strh	r3, [r7, #8]
	uint16_t transitionDelay = 500;
 80008d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008d6:	80fb      	strh	r3, [r7, #6]
	
	HALT_ANIMATION = false;
 80008d8:	4b93      	ldr	r3, [pc, #588]	; (8000b28 <joel_mode+0x278>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	
	lyr_frame_clear_all(frame.lyr0);
 80008de:	4668      	mov	r0, sp
 80008e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80008e8:	4619      	mov	r1, r3
 80008ea:	f008 f99d 	bl	8008c28 <memcpy>
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f4:	f002 fa0c 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 80008f8:	4b8c      	ldr	r3, [pc, #560]	; (8000b2c <joel_mode+0x27c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	935f      	str	r3, [sp, #380]	; 0x17c
 80008fe:	4668      	mov	r0, sp
 8000900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000904:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000908:	4619      	mov	r1, r3
 800090a:	f008 f98d 	bl	8008c28 <memcpy>
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000914:	f002 f9b2 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 8000918:	4b85      	ldr	r3, [pc, #532]	; (8000b30 <joel_mode+0x280>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
	
	while(HALT_ANIMATION == false)
 800091e:	e0d3      	b.n	8000ac8 <joel_mode+0x218>
	{
		fade_in_color(frame.lyr0,letterJ,blue,maxBrightness,deltaBrightness,delay);
 8000920:	4b84      	ldr	r3, [pc, #528]	; (8000b34 <joel_mode+0x284>)
 8000922:	cb18      	ldmia	r3, {r3, r4}
 8000924:	893a      	ldrh	r2, [r7, #8]
 8000926:	9264      	str	r2, [sp, #400]	; 0x190
 8000928:	897a      	ldrh	r2, [r7, #10]
 800092a:	9263      	str	r2, [sp, #396]	; 0x18c
 800092c:	89fa      	ldrh	r2, [r7, #14]
 800092e:	9262      	str	r2, [sp, #392]	; 0x188
 8000930:	aa60      	add	r2, sp, #384	; 0x180
 8000932:	e9c2 3400 	strd	r3, r4, [r2]
 8000936:	4b80      	ldr	r3, [pc, #512]	; (8000b38 <joel_mode+0x288>)
 8000938:	935f      	str	r3, [sp, #380]	; 0x17c
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000940:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000944:	4619      	mov	r1, r3
 8000946:	f008 f96f 	bl	8008c28 <memcpy>
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000950:	f001 f928 	bl	8001ba4 <fade_in_color>
		fade_out_color(frame.lyr0,letterJ,blue,minBrightness,deltaBrightness,delay);
 8000954:	4b77      	ldr	r3, [pc, #476]	; (8000b34 <joel_mode+0x284>)
 8000956:	cb18      	ldmia	r3, {r3, r4}
 8000958:	893a      	ldrh	r2, [r7, #8]
 800095a:	9264      	str	r2, [sp, #400]	; 0x190
 800095c:	897a      	ldrh	r2, [r7, #10]
 800095e:	9263      	str	r2, [sp, #396]	; 0x18c
 8000960:	89ba      	ldrh	r2, [r7, #12]
 8000962:	9262      	str	r2, [sp, #392]	; 0x188
 8000964:	aa60      	add	r2, sp, #384	; 0x180
 8000966:	e9c2 3400 	strd	r3, r4, [r2]
 800096a:	4b73      	ldr	r3, [pc, #460]	; (8000b38 <joel_mode+0x288>)
 800096c:	935f      	str	r3, [sp, #380]	; 0x17c
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000974:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000978:	4619      	mov	r1, r3
 800097a:	f008 f955 	bl	8008c28 <memcpy>
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000984:	f001 fa0a 	bl	8001d9c <fade_out_color>
		fade_in_color(frame.lyr0,letterO,blue,maxBrightness,deltaBrightness,delay);
 8000988:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <joel_mode+0x284>)
 800098a:	cb18      	ldmia	r3, {r3, r4}
 800098c:	893a      	ldrh	r2, [r7, #8]
 800098e:	9264      	str	r2, [sp, #400]	; 0x190
 8000990:	897a      	ldrh	r2, [r7, #10]
 8000992:	9263      	str	r2, [sp, #396]	; 0x18c
 8000994:	89fa      	ldrh	r2, [r7, #14]
 8000996:	9262      	str	r2, [sp, #392]	; 0x188
 8000998:	aa60      	add	r2, sp, #384	; 0x180
 800099a:	e9c2 3400 	strd	r3, r4, [r2]
 800099e:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <joel_mode+0x28c>)
 80009a0:	935f      	str	r3, [sp, #380]	; 0x17c
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80009ac:	4619      	mov	r1, r3
 80009ae:	f008 f93b 	bl	8008c28 <memcpy>
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b8:	f001 f8f4 	bl	8001ba4 <fade_in_color>
		fade_out_color(frame.lyr0,letterO,blue,minBrightness,deltaBrightness,delay);
 80009bc:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <joel_mode+0x284>)
 80009be:	cb18      	ldmia	r3, {r3, r4}
 80009c0:	893a      	ldrh	r2, [r7, #8]
 80009c2:	9264      	str	r2, [sp, #400]	; 0x190
 80009c4:	897a      	ldrh	r2, [r7, #10]
 80009c6:	9263      	str	r2, [sp, #396]	; 0x18c
 80009c8:	89ba      	ldrh	r2, [r7, #12]
 80009ca:	9262      	str	r2, [sp, #392]	; 0x188
 80009cc:	aa60      	add	r2, sp, #384	; 0x180
 80009ce:	e9c2 3400 	strd	r3, r4, [r2]
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <joel_mode+0x28c>)
 80009d4:	935f      	str	r3, [sp, #380]	; 0x17c
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009dc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80009e0:	4619      	mov	r1, r3
 80009e2:	f008 f921 	bl	8008c28 <memcpy>
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ec:	f001 f9d6 	bl	8001d9c <fade_out_color>
		fade_in_color(frame.lyr0,letterE,blue,maxBrightness,deltaBrightness,delay);
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <joel_mode+0x284>)
 80009f2:	cb18      	ldmia	r3, {r3, r4}
 80009f4:	893a      	ldrh	r2, [r7, #8]
 80009f6:	9264      	str	r2, [sp, #400]	; 0x190
 80009f8:	897a      	ldrh	r2, [r7, #10]
 80009fa:	9263      	str	r2, [sp, #396]	; 0x18c
 80009fc:	89fa      	ldrh	r2, [r7, #14]
 80009fe:	9262      	str	r2, [sp, #392]	; 0x188
 8000a00:	aa60      	add	r2, sp, #384	; 0x180
 8000a02:	e9c2 3400 	strd	r3, r4, [r2]
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <joel_mode+0x290>)
 8000a08:	935f      	str	r3, [sp, #380]	; 0x17c
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a10:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000a14:	4619      	mov	r1, r3
 8000a16:	f008 f907 	bl	8008c28 <memcpy>
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a20:	f001 f8c0 	bl	8001ba4 <fade_in_color>
		fade_out_color(frame.lyr0,letterE,blue,minBrightness,deltaBrightness,delay);
 8000a24:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <joel_mode+0x284>)
 8000a26:	cb18      	ldmia	r3, {r3, r4}
 8000a28:	893a      	ldrh	r2, [r7, #8]
 8000a2a:	9264      	str	r2, [sp, #400]	; 0x190
 8000a2c:	897a      	ldrh	r2, [r7, #10]
 8000a2e:	9263      	str	r2, [sp, #396]	; 0x18c
 8000a30:	89ba      	ldrh	r2, [r7, #12]
 8000a32:	9262      	str	r2, [sp, #392]	; 0x188
 8000a34:	aa60      	add	r2, sp, #384	; 0x180
 8000a36:	e9c2 3400 	strd	r3, r4, [r2]
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <joel_mode+0x290>)
 8000a3c:	935f      	str	r3, [sp, #380]	; 0x17c
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a44:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f008 f8ed 	bl	8008c28 <memcpy>
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a54:	f001 f9a2 	bl	8001d9c <fade_out_color>
		fade_in_color(frame.lyr0,letterL,blue,maxBrightness,deltaBrightness,delay);
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <joel_mode+0x284>)
 8000a5a:	cb18      	ldmia	r3, {r3, r4}
 8000a5c:	893a      	ldrh	r2, [r7, #8]
 8000a5e:	9264      	str	r2, [sp, #400]	; 0x190
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	9263      	str	r2, [sp, #396]	; 0x18c
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	9262      	str	r2, [sp, #392]	; 0x188
 8000a68:	aa60      	add	r2, sp, #384	; 0x180
 8000a6a:	e9c2 3400 	strd	r3, r4, [r2]
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <joel_mode+0x294>)
 8000a70:	935f      	str	r3, [sp, #380]	; 0x17c
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a78:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f008 f8d3 	bl	8008c28 <memcpy>
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a88:	f001 f88c 	bl	8001ba4 <fade_in_color>
		fade_out_color(frame.lyr0,letterL,blue,minBrightness,deltaBrightness,delay);
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <joel_mode+0x284>)
 8000a8e:	cb18      	ldmia	r3, {r3, r4}
 8000a90:	893a      	ldrh	r2, [r7, #8]
 8000a92:	9264      	str	r2, [sp, #400]	; 0x190
 8000a94:	897a      	ldrh	r2, [r7, #10]
 8000a96:	9263      	str	r2, [sp, #396]	; 0x18c
 8000a98:	89ba      	ldrh	r2, [r7, #12]
 8000a9a:	9262      	str	r2, [sp, #392]	; 0x188
 8000a9c:	aa60      	add	r2, sp, #384	; 0x180
 8000a9e:	e9c2 3400 	strd	r3, r4, [r2]
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <joel_mode+0x294>)
 8000aa4:	935f      	str	r3, [sp, #380]	; 0x17c
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aac:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f008 f8b9 	bl	8008c28 <memcpy>
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abc:	f001 f96e 	bl	8001d9c <fade_out_color>
		HAL_Delay(transitionDelay);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fd64 	bl	8005590 <HAL_Delay>
	while(HALT_ANIMATION == false)
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <joel_mode+0x278>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f083 0301 	eor.w	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f47f af24 	bne.w	8000920 <joel_mode+0x70>
	}
	lyr_frame_clear_all(frame.lyr0);
 8000ad8:	4668      	mov	r0, sp
 8000ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ade:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f008 f8a0 	bl	8008c28 <memcpy>
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aee:	f002 f90f 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <joel_mode+0x27c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	935f      	str	r3, [sp, #380]	; 0x17c
 8000af8:	4668      	mov	r0, sp
 8000afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afe:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000b02:	4619      	mov	r1, r3
 8000b04:	f008 f890 	bl	8008c28 <memcpy>
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0e:	f002 f8b5 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <joel_mode+0x280>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b22:	b004      	add	sp, #16
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000067c 	.word	0x2000067c
 8000b2c:	200002e0 	.word	0x200002e0
 8000b30:	200006cd 	.word	0x200006cd
 8000b34:	20000020 	.word	0x20000020
 8000b38:	200001e0 	.word	0x200001e0
 8000b3c:	20000220 	.word	0x20000220
 8000b40:	20000260 	.word	0x20000260
 8000b44:	200002a0 	.word	0x200002a0

08000b48 <sliding_cubes>:


void sliding_cubes(Frame_TypeDef frame)
{
 8000b48:	b084      	sub	sp, #16
 8000b4a:	b590      	push	{r4, r7, lr}
 8000b4c:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000b50:	af64      	add	r7, sp, #400	; 0x190
 8000b52:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint64_t colorWheel[12] = {red,orange,yellow,yelgrn,green,seafoam,cyan,lightblu,blue,indigo,purple,pink};	
 8000b5a:	4bae      	ldr	r3, [pc, #696]	; (8000e14 <sliding_cubes+0x2cc>)
 8000b5c:	cb18      	ldmia	r3, {r3, r4}
 8000b5e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8000b62:	4bad      	ldr	r3, [pc, #692]	; (8000e18 <sliding_cubes+0x2d0>)
 8000b64:	cb18      	ldmia	r3, {r3, r4}
 8000b66:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8000b6a:	4bac      	ldr	r3, [pc, #688]	; (8000e1c <sliding_cubes+0x2d4>)
 8000b6c:	cb18      	ldmia	r3, {r3, r4}
 8000b6e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8000b72:	4bab      	ldr	r3, [pc, #684]	; (8000e20 <sliding_cubes+0x2d8>)
 8000b74:	cb18      	ldmia	r3, {r3, r4}
 8000b76:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8000b7a:	4baa      	ldr	r3, [pc, #680]	; (8000e24 <sliding_cubes+0x2dc>)
 8000b7c:	cb18      	ldmia	r3, {r3, r4}
 8000b7e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 8000b82:	4ba9      	ldr	r3, [pc, #676]	; (8000e28 <sliding_cubes+0x2e0>)
 8000b84:	cb18      	ldmia	r3, {r3, r4}
 8000b86:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8000b8a:	4ba8      	ldr	r3, [pc, #672]	; (8000e2c <sliding_cubes+0x2e4>)
 8000b8c:	cb18      	ldmia	r3, {r3, r4}
 8000b8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000b92:	4ba7      	ldr	r3, [pc, #668]	; (8000e30 <sliding_cubes+0x2e8>)
 8000b94:	cb18      	ldmia	r3, {r3, r4}
 8000b96:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8000b9a:	4ba6      	ldr	r3, [pc, #664]	; (8000e34 <sliding_cubes+0x2ec>)
 8000b9c:	cb18      	ldmia	r3, {r3, r4}
 8000b9e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8000ba2:	4ba5      	ldr	r3, [pc, #660]	; (8000e38 <sliding_cubes+0x2f0>)
 8000ba4:	cb18      	ldmia	r3, {r3, r4}
 8000ba6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8000baa:	4ba4      	ldr	r3, [pc, #656]	; (8000e3c <sliding_cubes+0x2f4>)
 8000bac:	cb18      	ldmia	r3, {r3, r4}
 8000bae:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8000bb2:	4ba3      	ldr	r3, [pc, #652]	; (8000e40 <sliding_cubes+0x2f8>)
 8000bb4:	cb18      	ldmia	r3, {r3, r4}
 8000bb6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	int colorIndex = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint16_t transitionDelay = 400;
 8000bc0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bc4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	bool maskCube0189[64];
	bool_mask_copy(&maskCube0189[0],&maskEmpty[0]);
 8000bc8:	463b      	mov	r3, r7
 8000bca:	499e      	ldr	r1, [pc, #632]	; (8000e44 <sliding_cubes+0x2fc>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 feba 	bl	8002946 <bool_mask_copy>
	maskCube0189[0] = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	703b      	strb	r3, [r7, #0]
	maskCube0189[1] = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	707b      	strb	r3, [r7, #1]
	maskCube0189[8] = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	723b      	strb	r3, [r7, #8]
	maskCube0189[9] = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	727b      	strb	r3, [r7, #9]
	//maskCube0189[58] = 0;
	HALT_ANIMATION = false;
 8000be2:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <sliding_cubes+0x300>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	PAUSE_ANIMATION = false;
 8000be8:	4b98      	ldr	r3, [pc, #608]	; (8000e4c <sliding_cubes+0x304>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	lyr_frame_clear_all(frame.lyr0);
 8000bee:	4668      	mov	r0, sp
 8000bf0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000bf4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f008 f815 	bl	8008c28 <memcpy>
 8000bfe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c04:	f002 f884 	bl	8002d10 <lyr_frame_clear_all>
	
	while(HALT_ANIMATION == false)
 8000c08:	f000 be1a 	b.w	8001840 <sliding_cubes+0xcf8>
	{
		if(HALT_ANIMATION == true) break;
 8000c0c:	4b8e      	ldr	r3, [pc, #568]	; (8000e48 <sliding_cubes+0x300>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 861e 	bne.w	8001852 <sliding_cubes+0xd0a>
		
		lyr_frame_set_color(frame.lyr0,colorWheel[colorIndex],maskCube0189);
 8000c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000c20:	4413      	add	r3, r2
 8000c22:	3b78      	subs	r3, #120	; 0x78
 8000c24:	cb18      	ldmia	r3, {r3, r4}
 8000c26:	463a      	mov	r2, r7
 8000c28:	9262      	str	r2, [sp, #392]	; 0x188
 8000c2a:	aa60      	add	r2, sp, #384	; 0x180
 8000c2c:	e9c2 3400 	strd	r3, r4, [r2]
 8000c30:	4668      	mov	r0, sp
 8000c32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000c36:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f007 fff4 	bl	8008c28 <memcpy>
 8000c40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c46:	f002 f8f2 	bl	8002e2e <lyr_frame_set_color>
		colorIndex++;
 8000c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if(colorIndex==12) colorIndex=0;
 8000c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d102      	bne.n	8000c62 <sliding_cubes+0x11a>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8000c62:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <sliding_cubes+0x308>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4c7b      	ldr	r4, [pc, #492]	; (8000e54 <sliding_cubes+0x30c>)
 8000c68:	935f      	str	r3, [sp, #380]	; 0x17c
 8000c6a:	4668      	mov	r0, sp
 8000c6c:	f104 0310 	add.w	r3, r4, #16
 8000c70:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000c74:	4619      	mov	r1, r3
 8000c76:	f007 ffd7 	bl	8008c28 <memcpy>
 8000c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c7e:	f001 fffd 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8000c82:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <sliding_cubes+0x310>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
		animation_delay(transitionDelay);
 8000c88:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fab7 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <sliding_cubes+0x300>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 85dd 	bne.w	8001856 <sliding_cubes+0xd0e>
		for(int repIndex=0;repIndex<3;repIndex++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ca2:	e064      	b.n	8000d6e <sliding_cubes+0x226>
		{
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8000ca4:	4c6b      	ldr	r4, [pc, #428]	; (8000e54 <sliding_cubes+0x30c>)
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	9360      	str	r3, [sp, #384]	; 0x180
 8000caa:	2300      	movs	r3, #0
 8000cac:	935f      	str	r3, [sp, #380]	; 0x17c
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f104 0310 	add.w	r3, r4, #16
 8000cb4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f007 ffb5 	bl	8008c28 <memcpy>
 8000cbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc2:	f002 f949 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8000cc6:	4c63      	ldr	r4, [pc, #396]	; (8000e54 <sliding_cubes+0x30c>)
 8000cc8:	2305      	movs	r3, #5
 8000cca:	9360      	str	r3, [sp, #384]	; 0x180
 8000ccc:	2300      	movs	r3, #0
 8000cce:	935f      	str	r3, [sp, #380]	; 0x17c
 8000cd0:	4668      	mov	r0, sp
 8000cd2:	f104 0310 	add.w	r3, r4, #16
 8000cd6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f007 ffa4 	bl	8008c28 <memcpy>
 8000ce0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ce4:	f002 f938 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 8000ce8:	4c5a      	ldr	r4, [pc, #360]	; (8000e54 <sliding_cubes+0x30c>)
 8000cea:	2305      	movs	r3, #5
 8000cec:	9360      	str	r3, [sp, #384]	; 0x180
 8000cee:	2301      	movs	r3, #1
 8000cf0:	935f      	str	r3, [sp, #380]	; 0x17c
 8000cf2:	4668      	mov	r0, sp
 8000cf4:	f104 0310 	add.w	r3, r4, #16
 8000cf8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f007 ff93 	bl	8008c28 <memcpy>
 8000d02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d06:	f002 f927 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 8000d0a:	4c52      	ldr	r4, [pc, #328]	; (8000e54 <sliding_cubes+0x30c>)
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	9360      	str	r3, [sp, #384]	; 0x180
 8000d10:	2301      	movs	r3, #1
 8000d12:	935f      	str	r3, [sp, #380]	; 0x17c
 8000d14:	4668      	mov	r0, sp
 8000d16:	f104 0310 	add.w	r3, r4, #16
 8000d1a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f007 ff82 	bl	8008c28 <memcpy>
 8000d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d28:	f002 f916 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <sliding_cubes+0x308>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4c48      	ldr	r4, [pc, #288]	; (8000e54 <sliding_cubes+0x30c>)
 8000d32:	935f      	str	r3, [sp, #380]	; 0x17c
 8000d34:	4668      	mov	r0, sp
 8000d36:	f104 0310 	add.w	r3, r4, #16
 8000d3a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f007 ff72 	bl	8008c28 <memcpy>
 8000d44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d48:	f001 ff98 	bl	8002c7c <lyr_frame_convert>
			UPDATE_FRAME=1;
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <sliding_cubes+0x310>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
			animation_delay(transitionDelay);
 8000d52:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fa52 	bl	8002200 <animation_delay>
			if(HALT_ANIMATION == true) break;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <sliding_cubes+0x300>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d109      	bne.n	8000d78 <sliding_cubes+0x230>
		for(int repIndex=0;repIndex<3;repIndex++)
 8000d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	dd96      	ble.n	8000ca4 <sliding_cubes+0x15c>
 8000d76:	e000      	b.n	8000d7a <sliding_cubes+0x232>
			if(HALT_ANIMATION == true) break;
 8000d78:	bf00      	nop
		}
		
		if(HALT_ANIMATION == true) break;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <sliding_cubes+0x300>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 856b 	bne.w	800185a <sliding_cubes+0xd12>
		lyr_frame_set_color(frame.lyr0,colorWheel[colorIndex],maskCube0189);
 8000d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b78      	subs	r3, #120	; 0x78
 8000d92:	cb18      	ldmia	r3, {r3, r4}
 8000d94:	463a      	mov	r2, r7
 8000d96:	9262      	str	r2, [sp, #392]	; 0x188
 8000d98:	aa60      	add	r2, sp, #384	; 0x180
 8000d9a:	e9c2 3400 	strd	r3, r4, [r2]
 8000d9e:	4668      	mov	r0, sp
 8000da0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000da4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000da8:	4619      	mov	r1, r3
 8000daa:	f007 ff3d 	bl	8008c28 <memcpy>
 8000dae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db4:	f002 f83b 	bl	8002e2e <lyr_frame_set_color>
		colorIndex++;
 8000db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if(colorIndex==12) colorIndex=0;
 8000dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dc6:	2b0c      	cmp	r3, #12
 8000dc8:	d102      	bne.n	8000dd0 <sliding_cubes+0x288>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <sliding_cubes+0x308>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4c1f      	ldr	r4, [pc, #124]	; (8000e54 <sliding_cubes+0x30c>)
 8000dd6:	935f      	str	r3, [sp, #380]	; 0x17c
 8000dd8:	4668      	mov	r0, sp
 8000dda:	f104 0310 	add.w	r3, r4, #16
 8000dde:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000de2:	4619      	mov	r1, r3
 8000de4:	f007 ff20 	bl	8008c28 <memcpy>
 8000de8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dec:	f001 ff46 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <sliding_cubes+0x310>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
		animation_delay(transitionDelay);		
 8000df6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fa00 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <sliding_cubes+0x300>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f040 852a 	bne.w	800185e <sliding_cubes+0xd16>
		for(int repIndex=0;repIndex<3;repIndex++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000e10:	e0cd      	b.n	8000fae <sliding_cubes+0x466>
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000030 	.word	0x20000030
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000038 	.word	0x20000038
 8000e24:	20000010 	.word	0x20000010
 8000e28:	20000040 	.word	0x20000040
 8000e2c:	20000018 	.word	0x20000018
 8000e30:	20000048 	.word	0x20000048
 8000e34:	20000020 	.word	0x20000020
 8000e38:	20000050 	.word	0x20000050
 8000e3c:	20000028 	.word	0x20000028
 8000e40:	20000058 	.word	0x20000058
 8000e44:	20000688 	.word	0x20000688
 8000e48:	2000067c 	.word	0x2000067c
 8000e4c:	2000067d 	.word	0x2000067d
 8000e50:	200002e0 	.word	0x200002e0
 8000e54:	200008ec 	.word	0x200008ec
 8000e58:	200006cd 	.word	0x200006cd
		{
			lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_RIGHT);
 8000e5c:	4c7b      	ldr	r4, [pc, #492]	; (800104c <sliding_cubes+0x504>)
 8000e5e:	2303      	movs	r3, #3
 8000e60:	9360      	str	r3, [sp, #384]	; 0x180
 8000e62:	2306      	movs	r3, #6
 8000e64:	935f      	str	r3, [sp, #380]	; 0x17c
 8000e66:	4668      	mov	r0, sp
 8000e68:	f104 0310 	add.w	r3, r4, #16
 8000e6c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000e70:	4619      	mov	r1, r3
 8000e72:	f007 fed9 	bl	8008c28 <memcpy>
 8000e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e7a:	f002 f895 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_RIGHT);
 8000e7e:	4c73      	ldr	r4, [pc, #460]	; (800104c <sliding_cubes+0x504>)
 8000e80:	2303      	movs	r3, #3
 8000e82:	9360      	str	r3, [sp, #384]	; 0x180
 8000e84:	2306      	movs	r3, #6
 8000e86:	935f      	str	r3, [sp, #380]	; 0x17c
 8000e88:	4668      	mov	r0, sp
 8000e8a:	f104 0310 	add.w	r3, r4, #16
 8000e8e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000e92:	4619      	mov	r1, r3
 8000e94:	f007 fec8 	bl	8008c28 <memcpy>
 8000e98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e9c:	f002 f884 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_RIGHT);
 8000ea0:	4c6a      	ldr	r4, [pc, #424]	; (800104c <sliding_cubes+0x504>)
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	9360      	str	r3, [sp, #384]	; 0x180
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	935f      	str	r3, [sp, #380]	; 0x17c
 8000eaa:	4668      	mov	r0, sp
 8000eac:	f104 0310 	add.w	r3, r4, #16
 8000eb0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f007 feb7 	bl	8008c28 <memcpy>
 8000eba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ebe:	f002 f873 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_RIGHT);
 8000ec2:	4c62      	ldr	r4, [pc, #392]	; (800104c <sliding_cubes+0x504>)
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	9360      	str	r3, [sp, #384]	; 0x180
 8000ec8:	2307      	movs	r3, #7
 8000eca:	935f      	str	r3, [sp, #380]	; 0x17c
 8000ecc:	4668      	mov	r0, sp
 8000ece:	f104 0310 	add.w	r3, r4, #16
 8000ed2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f007 fea6 	bl	8008c28 <memcpy>
 8000edc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee0:	f002 f862 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8000ee4:	4c59      	ldr	r4, [pc, #356]	; (800104c <sliding_cubes+0x504>)
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	9360      	str	r3, [sp, #384]	; 0x180
 8000eea:	2300      	movs	r3, #0
 8000eec:	935f      	str	r3, [sp, #380]	; 0x17c
 8000eee:	4668      	mov	r0, sp
 8000ef0:	f104 0310 	add.w	r3, r4, #16
 8000ef4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f007 fe95 	bl	8008c28 <memcpy>
 8000efe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f02:	f002 f829 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8000f06:	4c51      	ldr	r4, [pc, #324]	; (800104c <sliding_cubes+0x504>)
 8000f08:	2305      	movs	r3, #5
 8000f0a:	9360      	str	r3, [sp, #384]	; 0x180
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	935f      	str	r3, [sp, #380]	; 0x17c
 8000f10:	4668      	mov	r0, sp
 8000f12:	f104 0310 	add.w	r3, r4, #16
 8000f16:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f007 fe84 	bl	8008c28 <memcpy>
 8000f20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f24:	f002 f818 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 8000f28:	4c48      	ldr	r4, [pc, #288]	; (800104c <sliding_cubes+0x504>)
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	9360      	str	r3, [sp, #384]	; 0x180
 8000f2e:	2301      	movs	r3, #1
 8000f30:	935f      	str	r3, [sp, #380]	; 0x17c
 8000f32:	4668      	mov	r0, sp
 8000f34:	f104 0310 	add.w	r3, r4, #16
 8000f38:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f007 fe73 	bl	8008c28 <memcpy>
 8000f42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f46:	f002 f807 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 8000f4a:	4c40      	ldr	r4, [pc, #256]	; (800104c <sliding_cubes+0x504>)
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	9360      	str	r3, [sp, #384]	; 0x180
 8000f50:	2301      	movs	r3, #1
 8000f52:	935f      	str	r3, [sp, #380]	; 0x17c
 8000f54:	4668      	mov	r0, sp
 8000f56:	f104 0310 	add.w	r3, r4, #16
 8000f5a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f007 fe62 	bl	8008c28 <memcpy>
 8000f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f68:	f001 fff6 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <sliding_cubes+0x508>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4c36      	ldr	r4, [pc, #216]	; (800104c <sliding_cubes+0x504>)
 8000f72:	935f      	str	r3, [sp, #380]	; 0x17c
 8000f74:	4668      	mov	r0, sp
 8000f76:	f104 0310 	add.w	r3, r4, #16
 8000f7a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f007 fe52 	bl	8008c28 <memcpy>
 8000f84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f88:	f001 fe78 	bl	8002c7c <lyr_frame_convert>
			UPDATE_FRAME=1;
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <sliding_cubes+0x50c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
			animation_delay(transitionDelay);
 8000f92:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f932 	bl	8002200 <animation_delay>
			if(HALT_ANIMATION == true) break;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <sliding_cubes+0x510>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10a      	bne.n	8000fba <sliding_cubes+0x472>
		for(int repIndex=0;repIndex<3;repIndex++)
 8000fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	f77f af52 	ble.w	8000e5c <sliding_cubes+0x314>
 8000fb8:	e000      	b.n	8000fbc <sliding_cubes+0x474>
			if(HALT_ANIMATION == true) break;
 8000fba:	bf00      	nop
		}
		
		if(HALT_ANIMATION == true) break;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <sliding_cubes+0x510>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f040 844e 	bne.w	8001862 <sliding_cubes+0xd1a>
		lyr_frame_set_color(frame.lyr0,colorWheel[colorIndex],maskCube0189);
 8000fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b78      	subs	r3, #120	; 0x78
 8000fd4:	cb18      	ldmia	r3, {r3, r4}
 8000fd6:	463a      	mov	r2, r7
 8000fd8:	9262      	str	r2, [sp, #392]	; 0x188
 8000fda:	aa60      	add	r2, sp, #384	; 0x180
 8000fdc:	e9c2 3400 	strd	r3, r4, [r2]
 8000fe0:	4668      	mov	r0, sp
 8000fe2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fe6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000fea:	4619      	mov	r1, r3
 8000fec:	f007 fe1c 	bl	8008c28 <memcpy>
 8000ff0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff6:	f001 ff1a 	bl	8002e2e <lyr_frame_set_color>
		colorIndex++;
 8000ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if(colorIndex==12) colorIndex=0;
 8001004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d102      	bne.n	8001012 <sliding_cubes+0x4ca>
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <sliding_cubes+0x508>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4c0d      	ldr	r4, [pc, #52]	; (800104c <sliding_cubes+0x504>)
 8001018:	935f      	str	r3, [sp, #380]	; 0x17c
 800101a:	4668      	mov	r0, sp
 800101c:	f104 0310 	add.w	r3, r4, #16
 8001020:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001024:	4619      	mov	r1, r3
 8001026:	f007 fdff 	bl	8008c28 <memcpy>
 800102a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800102e:	f001 fe25 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <sliding_cubes+0x50c>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		animation_delay(transitionDelay);	
 8001038:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800103c:	4618      	mov	r0, r3
 800103e:	f001 f8df 	bl	8002200 <animation_delay>

		
		for(int repIndex=0;repIndex<3;repIndex++)
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001048:	e106      	b.n	8001258 <sliding_cubes+0x710>
 800104a:	bf00      	nop
 800104c:	200008ec 	.word	0x200008ec
 8001050:	200002e0 	.word	0x200002e0
 8001054:	200006cd 	.word	0x200006cd
 8001058:	2000067c 	.word	0x2000067c
		{
			if(HALT_ANIMATION == true) break;
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <sliding_cubes+0x71c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f040 8107 	bne.w	8001274 <sliding_cubes+0x72c>
			lyr_frame_shift_column(frame0.lyr0, 6, DIRECTION_BACK);
 8001066:	4c80      	ldr	r4, [pc, #512]	; (8001268 <sliding_cubes+0x720>)
 8001068:	2306      	movs	r3, #6
 800106a:	9360      	str	r3, [sp, #384]	; 0x180
 800106c:	2306      	movs	r3, #6
 800106e:	935f      	str	r3, [sp, #380]	; 0x17c
 8001070:	4668      	mov	r0, sp
 8001072:	f104 0310 	add.w	r3, r4, #16
 8001076:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800107a:	4619      	mov	r1, r3
 800107c:	f007 fdd4 	bl	8008c28 <memcpy>
 8001080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001084:	f001 ff68 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 6, DIRECTION_BACK);
 8001088:	4c77      	ldr	r4, [pc, #476]	; (8001268 <sliding_cubes+0x720>)
 800108a:	2306      	movs	r3, #6
 800108c:	9360      	str	r3, [sp, #384]	; 0x180
 800108e:	2306      	movs	r3, #6
 8001090:	935f      	str	r3, [sp, #380]	; 0x17c
 8001092:	4668      	mov	r0, sp
 8001094:	f104 0310 	add.w	r3, r4, #16
 8001098:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800109c:	4619      	mov	r1, r3
 800109e:	f007 fdc3 	bl	8008c28 <memcpy>
 80010a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a6:	f001 ff57 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 7, DIRECTION_BACK);
 80010aa:	4c6f      	ldr	r4, [pc, #444]	; (8001268 <sliding_cubes+0x720>)
 80010ac:	2306      	movs	r3, #6
 80010ae:	9360      	str	r3, [sp, #384]	; 0x180
 80010b0:	2307      	movs	r3, #7
 80010b2:	935f      	str	r3, [sp, #380]	; 0x17c
 80010b4:	4668      	mov	r0, sp
 80010b6:	f104 0310 	add.w	r3, r4, #16
 80010ba:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80010be:	4619      	mov	r1, r3
 80010c0:	f007 fdb2 	bl	8008c28 <memcpy>
 80010c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010c8:	f001 ff46 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 7, DIRECTION_BACK);
 80010cc:	4c66      	ldr	r4, [pc, #408]	; (8001268 <sliding_cubes+0x720>)
 80010ce:	2306      	movs	r3, #6
 80010d0:	9360      	str	r3, [sp, #384]	; 0x180
 80010d2:	2307      	movs	r3, #7
 80010d4:	935f      	str	r3, [sp, #380]	; 0x17c
 80010d6:	4668      	mov	r0, sp
 80010d8:	f104 0310 	add.w	r3, r4, #16
 80010dc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80010e0:	4619      	mov	r1, r3
 80010e2:	f007 fda1 	bl	8008c28 <memcpy>
 80010e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ea:	f001 ff35 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_RIGHT);
 80010ee:	4c5e      	ldr	r4, [pc, #376]	; (8001268 <sliding_cubes+0x720>)
 80010f0:	2303      	movs	r3, #3
 80010f2:	9360      	str	r3, [sp, #384]	; 0x180
 80010f4:	2306      	movs	r3, #6
 80010f6:	935f      	str	r3, [sp, #380]	; 0x17c
 80010f8:	4668      	mov	r0, sp
 80010fa:	f104 0310 	add.w	r3, r4, #16
 80010fe:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001102:	4619      	mov	r1, r3
 8001104:	f007 fd90 	bl	8008c28 <memcpy>
 8001108:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800110c:	f001 ff4c 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_RIGHT);
 8001110:	4c55      	ldr	r4, [pc, #340]	; (8001268 <sliding_cubes+0x720>)
 8001112:	2303      	movs	r3, #3
 8001114:	9360      	str	r3, [sp, #384]	; 0x180
 8001116:	2306      	movs	r3, #6
 8001118:	935f      	str	r3, [sp, #380]	; 0x17c
 800111a:	4668      	mov	r0, sp
 800111c:	f104 0310 	add.w	r3, r4, #16
 8001120:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001124:	4619      	mov	r1, r3
 8001126:	f007 fd7f 	bl	8008c28 <memcpy>
 800112a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800112e:	f001 ff3b 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_RIGHT);
 8001132:	4c4d      	ldr	r4, [pc, #308]	; (8001268 <sliding_cubes+0x720>)
 8001134:	2303      	movs	r3, #3
 8001136:	9360      	str	r3, [sp, #384]	; 0x180
 8001138:	2307      	movs	r3, #7
 800113a:	935f      	str	r3, [sp, #380]	; 0x17c
 800113c:	4668      	mov	r0, sp
 800113e:	f104 0310 	add.w	r3, r4, #16
 8001142:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001146:	4619      	mov	r1, r3
 8001148:	f007 fd6e 	bl	8008c28 <memcpy>
 800114c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001150:	f001 ff2a 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_RIGHT);
 8001154:	4c44      	ldr	r4, [pc, #272]	; (8001268 <sliding_cubes+0x720>)
 8001156:	2303      	movs	r3, #3
 8001158:	9360      	str	r3, [sp, #384]	; 0x180
 800115a:	2307      	movs	r3, #7
 800115c:	935f      	str	r3, [sp, #380]	; 0x17c
 800115e:	4668      	mov	r0, sp
 8001160:	f104 0310 	add.w	r3, r4, #16
 8001164:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001168:	4619      	mov	r1, r3
 800116a:	f007 fd5d 	bl	8008c28 <memcpy>
 800116e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001172:	f001 ff19 	bl	8002fa8 <lyr_frame_shift_row>
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8001176:	4c3c      	ldr	r4, [pc, #240]	; (8001268 <sliding_cubes+0x720>)
 8001178:	2305      	movs	r3, #5
 800117a:	9360      	str	r3, [sp, #384]	; 0x180
 800117c:	2300      	movs	r3, #0
 800117e:	935f      	str	r3, [sp, #380]	; 0x17c
 8001180:	4668      	mov	r0, sp
 8001182:	f104 0310 	add.w	r3, r4, #16
 8001186:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800118a:	4619      	mov	r1, r3
 800118c:	f007 fd4c 	bl	8008c28 <memcpy>
 8001190:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001194:	f001 fee0 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_FORWARD);
 8001198:	4c33      	ldr	r4, [pc, #204]	; (8001268 <sliding_cubes+0x720>)
 800119a:	2305      	movs	r3, #5
 800119c:	9360      	str	r3, [sp, #384]	; 0x180
 800119e:	2300      	movs	r3, #0
 80011a0:	935f      	str	r3, [sp, #380]	; 0x17c
 80011a2:	4668      	mov	r0, sp
 80011a4:	f104 0310 	add.w	r3, r4, #16
 80011a8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80011ac:	4619      	mov	r1, r3
 80011ae:	f007 fd3b 	bl	8008c28 <memcpy>
 80011b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011b6:	f001 fecf 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 80011ba:	4c2b      	ldr	r4, [pc, #172]	; (8001268 <sliding_cubes+0x720>)
 80011bc:	2305      	movs	r3, #5
 80011be:	9360      	str	r3, [sp, #384]	; 0x180
 80011c0:	2301      	movs	r3, #1
 80011c2:	935f      	str	r3, [sp, #380]	; 0x17c
 80011c4:	4668      	mov	r0, sp
 80011c6:	f104 0310 	add.w	r3, r4, #16
 80011ca:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f007 fd2a 	bl	8008c28 <memcpy>
 80011d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d8:	f001 febe 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_FORWARD);
 80011dc:	4c22      	ldr	r4, [pc, #136]	; (8001268 <sliding_cubes+0x720>)
 80011de:	2305      	movs	r3, #5
 80011e0:	9360      	str	r3, [sp, #384]	; 0x180
 80011e2:	2301      	movs	r3, #1
 80011e4:	935f      	str	r3, [sp, #380]	; 0x17c
 80011e6:	4668      	mov	r0, sp
 80011e8:	f104 0310 	add.w	r3, r4, #16
 80011ec:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80011f0:	4619      	mov	r1, r3
 80011f2:	f007 fd19 	bl	8008c28 <memcpy>
 80011f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011fa:	f001 fead 	bl	8002f58 <lyr_frame_shift_column>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <sliding_cubes+0x724>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4c19      	ldr	r4, [pc, #100]	; (8001268 <sliding_cubes+0x720>)
 8001204:	935f      	str	r3, [sp, #380]	; 0x17c
 8001206:	4668      	mov	r0, sp
 8001208:	f104 0310 	add.w	r3, r4, #16
 800120c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001210:	4619      	mov	r1, r3
 8001212:	f007 fd09 	bl	8008c28 <memcpy>
 8001216:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800121a:	f001 fd2f 	bl	8002c7c <lyr_frame_convert>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <sliding_cubes+0x724>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4c11      	ldr	r4, [pc, #68]	; (8001268 <sliding_cubes+0x720>)
 8001224:	935f      	str	r3, [sp, #380]	; 0x17c
 8001226:	4668      	mov	r0, sp
 8001228:	f104 0310 	add.w	r3, r4, #16
 800122c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001230:	4619      	mov	r1, r3
 8001232:	f007 fcf9 	bl	8008c28 <memcpy>
 8001236:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800123a:	f001 fd1f 	bl	8002c7c <lyr_frame_convert>
			UPDATE_FRAME=1;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <sliding_cubes+0x728>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
			animation_delay(transitionDelay);
 8001244:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001248:	4618      	mov	r0, r3
 800124a:	f000 ffd9 	bl	8002200 <animation_delay>
		for(int repIndex=0;repIndex<3;repIndex++)
 800124e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001252:	3301      	adds	r3, #1
 8001254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800125c:	2b02      	cmp	r3, #2
 800125e:	f77f aefd 	ble.w	800105c <sliding_cubes+0x514>
 8001262:	e008      	b.n	8001276 <sliding_cubes+0x72e>
 8001264:	2000067c 	.word	0x2000067c
 8001268:	200008ec 	.word	0x200008ec
 800126c:	200002e0 	.word	0x200002e0
 8001270:	200006cd 	.word	0x200006cd
			if(HALT_ANIMATION == true) break;
 8001274:	bf00      	nop
		}	
		
		if(HALT_ANIMATION == true) break;
 8001276:	4bd4      	ldr	r3, [pc, #848]	; (80015c8 <sliding_cubes+0xa80>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 82f3 	bne.w	8001866 <sliding_cubes+0xd1e>
		lyr_frame_set_color(frame.lyr0,colorWheel[colorIndex],maskCube0189);
 8001280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800128a:	4413      	add	r3, r2
 800128c:	3b78      	subs	r3, #120	; 0x78
 800128e:	cb18      	ldmia	r3, {r3, r4}
 8001290:	463a      	mov	r2, r7
 8001292:	9262      	str	r2, [sp, #392]	; 0x188
 8001294:	aa60      	add	r2, sp, #384	; 0x180
 8001296:	e9c2 3400 	strd	r3, r4, [r2]
 800129a:	4668      	mov	r0, sp
 800129c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012a0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80012a4:	4619      	mov	r1, r3
 80012a6:	f007 fcbf 	bl	8008c28 <memcpy>
 80012aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	f001 fdbd 	bl	8002e2e <lyr_frame_set_color>
		colorIndex++;
 80012b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if(colorIndex==12) colorIndex=0;
 80012be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d102      	bne.n	80012cc <sliding_cubes+0x784>
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 80012cc:	4bbf      	ldr	r3, [pc, #764]	; (80015cc <sliding_cubes+0xa84>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4cbf      	ldr	r4, [pc, #764]	; (80015d0 <sliding_cubes+0xa88>)
 80012d2:	935f      	str	r3, [sp, #380]	; 0x17c
 80012d4:	4668      	mov	r0, sp
 80012d6:	f104 0310 	add.w	r3, r4, #16
 80012da:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80012de:	4619      	mov	r1, r3
 80012e0:	f007 fca2 	bl	8008c28 <memcpy>
 80012e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e8:	f001 fcc8 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 80012ec:	4bb9      	ldr	r3, [pc, #740]	; (80015d4 <sliding_cubes+0xa8c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		animation_delay(transitionDelay);	
 80012f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ff82 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 80012fc:	4bb2      	ldr	r3, [pc, #712]	; (80015c8 <sliding_cubes+0xa80>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 82b2 	bne.w	800186a <sliding_cubes+0xd22>
		lyr_frame_shift_row(frame0.lyr0, 0, DIRECTION_INWARD);
 8001306:	4cb2      	ldr	r4, [pc, #712]	; (80015d0 <sliding_cubes+0xa88>)
 8001308:	2307      	movs	r3, #7
 800130a:	9360      	str	r3, [sp, #384]	; 0x180
 800130c:	2300      	movs	r3, #0
 800130e:	935f      	str	r3, [sp, #380]	; 0x17c
 8001310:	4668      	mov	r0, sp
 8001312:	f104 0310 	add.w	r3, r4, #16
 8001316:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800131a:	4619      	mov	r1, r3
 800131c:	f007 fc84 	bl	8008c28 <memcpy>
 8001320:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001324:	f001 fe40 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 1, DIRECTION_INWARD);
 8001328:	4ca9      	ldr	r4, [pc, #676]	; (80015d0 <sliding_cubes+0xa88>)
 800132a:	2307      	movs	r3, #7
 800132c:	9360      	str	r3, [sp, #384]	; 0x180
 800132e:	2301      	movs	r3, #1
 8001330:	935f      	str	r3, [sp, #380]	; 0x17c
 8001332:	4668      	mov	r0, sp
 8001334:	f104 0310 	add.w	r3, r4, #16
 8001338:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800133c:	4619      	mov	r1, r3
 800133e:	f007 fc73 	bl	8008c28 <memcpy>
 8001342:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001346:	f001 fe2f 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 2, DIRECTION_INWARD);
 800134a:	4ca1      	ldr	r4, [pc, #644]	; (80015d0 <sliding_cubes+0xa88>)
 800134c:	2307      	movs	r3, #7
 800134e:	9360      	str	r3, [sp, #384]	; 0x180
 8001350:	2302      	movs	r3, #2
 8001352:	935f      	str	r3, [sp, #380]	; 0x17c
 8001354:	4668      	mov	r0, sp
 8001356:	f104 0310 	add.w	r3, r4, #16
 800135a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800135e:	4619      	mov	r1, r3
 8001360:	f007 fc62 	bl	8008c28 <memcpy>
 8001364:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001368:	f001 fe1e 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 3, DIRECTION_INWARD);
 800136c:	4c98      	ldr	r4, [pc, #608]	; (80015d0 <sliding_cubes+0xa88>)
 800136e:	2307      	movs	r3, #7
 8001370:	9360      	str	r3, [sp, #384]	; 0x180
 8001372:	2303      	movs	r3, #3
 8001374:	935f      	str	r3, [sp, #380]	; 0x17c
 8001376:	4668      	mov	r0, sp
 8001378:	f104 0310 	add.w	r3, r4, #16
 800137c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001380:	4619      	mov	r1, r3
 8001382:	f007 fc51 	bl	8008c28 <memcpy>
 8001386:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800138a:	f001 fe0d 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 4, DIRECTION_INWARD);
 800138e:	4c90      	ldr	r4, [pc, #576]	; (80015d0 <sliding_cubes+0xa88>)
 8001390:	2307      	movs	r3, #7
 8001392:	9360      	str	r3, [sp, #384]	; 0x180
 8001394:	2304      	movs	r3, #4
 8001396:	935f      	str	r3, [sp, #380]	; 0x17c
 8001398:	4668      	mov	r0, sp
 800139a:	f104 0310 	add.w	r3, r4, #16
 800139e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80013a2:	4619      	mov	r1, r3
 80013a4:	f007 fc40 	bl	8008c28 <memcpy>
 80013a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ac:	f001 fdfc 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 5, DIRECTION_INWARD);
 80013b0:	4c87      	ldr	r4, [pc, #540]	; (80015d0 <sliding_cubes+0xa88>)
 80013b2:	2307      	movs	r3, #7
 80013b4:	9360      	str	r3, [sp, #384]	; 0x180
 80013b6:	2305      	movs	r3, #5
 80013b8:	935f      	str	r3, [sp, #380]	; 0x17c
 80013ba:	4668      	mov	r0, sp
 80013bc:	f104 0310 	add.w	r3, r4, #16
 80013c0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80013c4:	4619      	mov	r1, r3
 80013c6:	f007 fc2f 	bl	8008c28 <memcpy>
 80013ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ce:	f001 fdeb 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_INWARD);
 80013d2:	4c7f      	ldr	r4, [pc, #508]	; (80015d0 <sliding_cubes+0xa88>)
 80013d4:	2307      	movs	r3, #7
 80013d6:	9360      	str	r3, [sp, #384]	; 0x180
 80013d8:	2306      	movs	r3, #6
 80013da:	935f      	str	r3, [sp, #380]	; 0x17c
 80013dc:	4668      	mov	r0, sp
 80013de:	f104 0310 	add.w	r3, r4, #16
 80013e2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80013e6:	4619      	mov	r1, r3
 80013e8:	f007 fc1e 	bl	8008c28 <memcpy>
 80013ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013f0:	f001 fdda 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_INWARD);
 80013f4:	4c76      	ldr	r4, [pc, #472]	; (80015d0 <sliding_cubes+0xa88>)
 80013f6:	2307      	movs	r3, #7
 80013f8:	9360      	str	r3, [sp, #384]	; 0x180
 80013fa:	2307      	movs	r3, #7
 80013fc:	935f      	str	r3, [sp, #380]	; 0x17c
 80013fe:	4668      	mov	r0, sp
 8001400:	f104 0310 	add.w	r3, r4, #16
 8001404:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001408:	4619      	mov	r1, r3
 800140a:	f007 fc0d 	bl	8008c28 <memcpy>
 800140e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001412:	f001 fdc9 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001416:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <sliding_cubes+0xa84>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4c6d      	ldr	r4, [pc, #436]	; (80015d0 <sliding_cubes+0xa88>)
 800141c:	935f      	str	r3, [sp, #380]	; 0x17c
 800141e:	4668      	mov	r0, sp
 8001420:	f104 0310 	add.w	r3, r4, #16
 8001424:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001428:	4619      	mov	r1, r3
 800142a:	f007 fbfd 	bl	8008c28 <memcpy>
 800142e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001432:	f001 fc23 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <sliding_cubes+0xa8c>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		animation_delay(2*transitionDelay);	
 800143c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fedc 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 8001448:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <sliding_cubes+0xa80>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 820e 	bne.w	800186e <sliding_cubes+0xd26>
		lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_INWARD);
 8001452:	4c5f      	ldr	r4, [pc, #380]	; (80015d0 <sliding_cubes+0xa88>)
 8001454:	2307      	movs	r3, #7
 8001456:	9360      	str	r3, [sp, #384]	; 0x180
 8001458:	2300      	movs	r3, #0
 800145a:	935f      	str	r3, [sp, #380]	; 0x17c
 800145c:	4668      	mov	r0, sp
 800145e:	f104 0310 	add.w	r3, r4, #16
 8001462:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001466:	4619      	mov	r1, r3
 8001468:	f007 fbde 	bl	8008c28 <memcpy>
 800146c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001470:	f001 fd72 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_INWARD);
 8001474:	4c56      	ldr	r4, [pc, #344]	; (80015d0 <sliding_cubes+0xa88>)
 8001476:	2307      	movs	r3, #7
 8001478:	9360      	str	r3, [sp, #384]	; 0x180
 800147a:	2301      	movs	r3, #1
 800147c:	935f      	str	r3, [sp, #380]	; 0x17c
 800147e:	4668      	mov	r0, sp
 8001480:	f104 0310 	add.w	r3, r4, #16
 8001484:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001488:	4619      	mov	r1, r3
 800148a:	f007 fbcd 	bl	8008c28 <memcpy>
 800148e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001492:	f001 fd61 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 2, DIRECTION_INWARD);
 8001496:	4c4e      	ldr	r4, [pc, #312]	; (80015d0 <sliding_cubes+0xa88>)
 8001498:	2307      	movs	r3, #7
 800149a:	9360      	str	r3, [sp, #384]	; 0x180
 800149c:	2302      	movs	r3, #2
 800149e:	935f      	str	r3, [sp, #380]	; 0x17c
 80014a0:	4668      	mov	r0, sp
 80014a2:	f104 0310 	add.w	r3, r4, #16
 80014a6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80014aa:	4619      	mov	r1, r3
 80014ac:	f007 fbbc 	bl	8008c28 <memcpy>
 80014b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b4:	f001 fd50 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 3, DIRECTION_INWARD);
 80014b8:	4c45      	ldr	r4, [pc, #276]	; (80015d0 <sliding_cubes+0xa88>)
 80014ba:	2307      	movs	r3, #7
 80014bc:	9360      	str	r3, [sp, #384]	; 0x180
 80014be:	2303      	movs	r3, #3
 80014c0:	935f      	str	r3, [sp, #380]	; 0x17c
 80014c2:	4668      	mov	r0, sp
 80014c4:	f104 0310 	add.w	r3, r4, #16
 80014c8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80014cc:	4619      	mov	r1, r3
 80014ce:	f007 fbab 	bl	8008c28 <memcpy>
 80014d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014d6:	f001 fd3f 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 4, DIRECTION_INWARD);
 80014da:	4c3d      	ldr	r4, [pc, #244]	; (80015d0 <sliding_cubes+0xa88>)
 80014dc:	2307      	movs	r3, #7
 80014de:	9360      	str	r3, [sp, #384]	; 0x180
 80014e0:	2304      	movs	r3, #4
 80014e2:	935f      	str	r3, [sp, #380]	; 0x17c
 80014e4:	4668      	mov	r0, sp
 80014e6:	f104 0310 	add.w	r3, r4, #16
 80014ea:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80014ee:	4619      	mov	r1, r3
 80014f0:	f007 fb9a 	bl	8008c28 <memcpy>
 80014f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014f8:	f001 fd2e 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 5, DIRECTION_INWARD);
 80014fc:	4c34      	ldr	r4, [pc, #208]	; (80015d0 <sliding_cubes+0xa88>)
 80014fe:	2307      	movs	r3, #7
 8001500:	9360      	str	r3, [sp, #384]	; 0x180
 8001502:	2305      	movs	r3, #5
 8001504:	935f      	str	r3, [sp, #380]	; 0x17c
 8001506:	4668      	mov	r0, sp
 8001508:	f104 0310 	add.w	r3, r4, #16
 800150c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001510:	4619      	mov	r1, r3
 8001512:	f007 fb89 	bl	8008c28 <memcpy>
 8001516:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800151a:	f001 fd1d 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 6, DIRECTION_INWARD);
 800151e:	4c2c      	ldr	r4, [pc, #176]	; (80015d0 <sliding_cubes+0xa88>)
 8001520:	2307      	movs	r3, #7
 8001522:	9360      	str	r3, [sp, #384]	; 0x180
 8001524:	2306      	movs	r3, #6
 8001526:	935f      	str	r3, [sp, #380]	; 0x17c
 8001528:	4668      	mov	r0, sp
 800152a:	f104 0310 	add.w	r3, r4, #16
 800152e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001532:	4619      	mov	r1, r3
 8001534:	f007 fb78 	bl	8008c28 <memcpy>
 8001538:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800153c:	f001 fd0c 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 7, DIRECTION_INWARD);
 8001540:	4c23      	ldr	r4, [pc, #140]	; (80015d0 <sliding_cubes+0xa88>)
 8001542:	2307      	movs	r3, #7
 8001544:	9360      	str	r3, [sp, #384]	; 0x180
 8001546:	2307      	movs	r3, #7
 8001548:	935f      	str	r3, [sp, #380]	; 0x17c
 800154a:	4668      	mov	r0, sp
 800154c:	f104 0310 	add.w	r3, r4, #16
 8001550:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001554:	4619      	mov	r1, r3
 8001556:	f007 fb67 	bl	8008c28 <memcpy>
 800155a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800155e:	f001 fcfb 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <sliding_cubes+0xa84>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4c1a      	ldr	r4, [pc, #104]	; (80015d0 <sliding_cubes+0xa88>)
 8001568:	935f      	str	r3, [sp, #380]	; 0x17c
 800156a:	4668      	mov	r0, sp
 800156c:	f104 0310 	add.w	r3, r4, #16
 8001570:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001574:	4619      	mov	r1, r3
 8001576:	f007 fb57 	bl	8008c28 <memcpy>
 800157a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800157e:	f001 fb7d 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <sliding_cubes+0xa8c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
		animation_delay(2*transitionDelay);	
 8001588:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fe36 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <sliding_cubes+0xa80>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 816a 	bne.w	8001872 <sliding_cubes+0xd2a>
		lyr_frame_shift_row(frame0.lyr0, 0, DIRECTION_INWARD);
 800159e:	4c0c      	ldr	r4, [pc, #48]	; (80015d0 <sliding_cubes+0xa88>)
 80015a0:	2307      	movs	r3, #7
 80015a2:	9360      	str	r3, [sp, #384]	; 0x180
 80015a4:	2300      	movs	r3, #0
 80015a6:	935f      	str	r3, [sp, #380]	; 0x17c
 80015a8:	4668      	mov	r0, sp
 80015aa:	f104 0310 	add.w	r3, r4, #16
 80015ae:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80015b2:	4619      	mov	r1, r3
 80015b4:	f007 fb38 	bl	8008c28 <memcpy>
 80015b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015bc:	f001 fcf4 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 1, DIRECTION_INWARD);
 80015c0:	4c03      	ldr	r4, [pc, #12]	; (80015d0 <sliding_cubes+0xa88>)
 80015c2:	2307      	movs	r3, #7
 80015c4:	e008      	b.n	80015d8 <sliding_cubes+0xa90>
 80015c6:	bf00      	nop
 80015c8:	2000067c 	.word	0x2000067c
 80015cc:	200002e0 	.word	0x200002e0
 80015d0:	200008ec 	.word	0x200008ec
 80015d4:	200006cd 	.word	0x200006cd
 80015d8:	9360      	str	r3, [sp, #384]	; 0x180
 80015da:	2301      	movs	r3, #1
 80015dc:	935f      	str	r3, [sp, #380]	; 0x17c
 80015de:	4668      	mov	r0, sp
 80015e0:	f104 0310 	add.w	r3, r4, #16
 80015e4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80015e8:	4619      	mov	r1, r3
 80015ea:	f007 fb1d 	bl	8008c28 <memcpy>
 80015ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015f2:	f001 fcd9 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 2, DIRECTION_INWARD);
 80015f6:	4cb4      	ldr	r4, [pc, #720]	; (80018c8 <sliding_cubes+0xd80>)
 80015f8:	2307      	movs	r3, #7
 80015fa:	9360      	str	r3, [sp, #384]	; 0x180
 80015fc:	2302      	movs	r3, #2
 80015fe:	935f      	str	r3, [sp, #380]	; 0x17c
 8001600:	4668      	mov	r0, sp
 8001602:	f104 0310 	add.w	r3, r4, #16
 8001606:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800160a:	4619      	mov	r1, r3
 800160c:	f007 fb0c 	bl	8008c28 <memcpy>
 8001610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001614:	f001 fcc8 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 3, DIRECTION_INWARD);
 8001618:	4cab      	ldr	r4, [pc, #684]	; (80018c8 <sliding_cubes+0xd80>)
 800161a:	2307      	movs	r3, #7
 800161c:	9360      	str	r3, [sp, #384]	; 0x180
 800161e:	2303      	movs	r3, #3
 8001620:	935f      	str	r3, [sp, #380]	; 0x17c
 8001622:	4668      	mov	r0, sp
 8001624:	f104 0310 	add.w	r3, r4, #16
 8001628:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800162c:	4619      	mov	r1, r3
 800162e:	f007 fafb 	bl	8008c28 <memcpy>
 8001632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001636:	f001 fcb7 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 4, DIRECTION_INWARD);
 800163a:	4ca3      	ldr	r4, [pc, #652]	; (80018c8 <sliding_cubes+0xd80>)
 800163c:	2307      	movs	r3, #7
 800163e:	9360      	str	r3, [sp, #384]	; 0x180
 8001640:	2304      	movs	r3, #4
 8001642:	935f      	str	r3, [sp, #380]	; 0x17c
 8001644:	4668      	mov	r0, sp
 8001646:	f104 0310 	add.w	r3, r4, #16
 800164a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800164e:	4619      	mov	r1, r3
 8001650:	f007 faea 	bl	8008c28 <memcpy>
 8001654:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001658:	f001 fca6 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 5, DIRECTION_INWARD);
 800165c:	4c9a      	ldr	r4, [pc, #616]	; (80018c8 <sliding_cubes+0xd80>)
 800165e:	2307      	movs	r3, #7
 8001660:	9360      	str	r3, [sp, #384]	; 0x180
 8001662:	2305      	movs	r3, #5
 8001664:	935f      	str	r3, [sp, #380]	; 0x17c
 8001666:	4668      	mov	r0, sp
 8001668:	f104 0310 	add.w	r3, r4, #16
 800166c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001670:	4619      	mov	r1, r3
 8001672:	f007 fad9 	bl	8008c28 <memcpy>
 8001676:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167a:	f001 fc95 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 6, DIRECTION_INWARD);
 800167e:	4c92      	ldr	r4, [pc, #584]	; (80018c8 <sliding_cubes+0xd80>)
 8001680:	2307      	movs	r3, #7
 8001682:	9360      	str	r3, [sp, #384]	; 0x180
 8001684:	2306      	movs	r3, #6
 8001686:	935f      	str	r3, [sp, #380]	; 0x17c
 8001688:	4668      	mov	r0, sp
 800168a:	f104 0310 	add.w	r3, r4, #16
 800168e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001692:	4619      	mov	r1, r3
 8001694:	f007 fac8 	bl	8008c28 <memcpy>
 8001698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169c:	f001 fc84 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_shift_row(frame0.lyr0, 7, DIRECTION_INWARD);
 80016a0:	4c89      	ldr	r4, [pc, #548]	; (80018c8 <sliding_cubes+0xd80>)
 80016a2:	2307      	movs	r3, #7
 80016a4:	9360      	str	r3, [sp, #384]	; 0x180
 80016a6:	2307      	movs	r3, #7
 80016a8:	935f      	str	r3, [sp, #380]	; 0x17c
 80016aa:	4668      	mov	r0, sp
 80016ac:	f104 0310 	add.w	r3, r4, #16
 80016b0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80016b4:	4619      	mov	r1, r3
 80016b6:	f007 fab7 	bl	8008c28 <memcpy>
 80016ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016be:	f001 fc73 	bl	8002fa8 <lyr_frame_shift_row>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 80016c2:	4b82      	ldr	r3, [pc, #520]	; (80018cc <sliding_cubes+0xd84>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4c80      	ldr	r4, [pc, #512]	; (80018c8 <sliding_cubes+0xd80>)
 80016c8:	935f      	str	r3, [sp, #380]	; 0x17c
 80016ca:	4668      	mov	r0, sp
 80016cc:	f104 0310 	add.w	r3, r4, #16
 80016d0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80016d4:	4619      	mov	r1, r3
 80016d6:	f007 faa7 	bl	8008c28 <memcpy>
 80016da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016de:	f001 facd 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 80016e2:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <sliding_cubes+0xd88>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
		animation_delay(2*transitionDelay);	
 80016e8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd86 	bl	8002200 <animation_delay>
		
		if(HALT_ANIMATION == true) break;
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <sliding_cubes+0xd8c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 80bc 	bne.w	8001876 <sliding_cubes+0xd2e>
		lyr_frame_shift_column(frame0.lyr0, 0, DIRECTION_INWARD);
 80016fe:	4c72      	ldr	r4, [pc, #456]	; (80018c8 <sliding_cubes+0xd80>)
 8001700:	2307      	movs	r3, #7
 8001702:	9360      	str	r3, [sp, #384]	; 0x180
 8001704:	2300      	movs	r3, #0
 8001706:	935f      	str	r3, [sp, #380]	; 0x17c
 8001708:	4668      	mov	r0, sp
 800170a:	f104 0310 	add.w	r3, r4, #16
 800170e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001712:	4619      	mov	r1, r3
 8001714:	f007 fa88 	bl	8008c28 <memcpy>
 8001718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171c:	f001 fc1c 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 1, DIRECTION_INWARD);
 8001720:	4c69      	ldr	r4, [pc, #420]	; (80018c8 <sliding_cubes+0xd80>)
 8001722:	2307      	movs	r3, #7
 8001724:	9360      	str	r3, [sp, #384]	; 0x180
 8001726:	2301      	movs	r3, #1
 8001728:	935f      	str	r3, [sp, #380]	; 0x17c
 800172a:	4668      	mov	r0, sp
 800172c:	f104 0310 	add.w	r3, r4, #16
 8001730:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001734:	4619      	mov	r1, r3
 8001736:	f007 fa77 	bl	8008c28 <memcpy>
 800173a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800173e:	f001 fc0b 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 2, DIRECTION_INWARD);
 8001742:	4c61      	ldr	r4, [pc, #388]	; (80018c8 <sliding_cubes+0xd80>)
 8001744:	2307      	movs	r3, #7
 8001746:	9360      	str	r3, [sp, #384]	; 0x180
 8001748:	2302      	movs	r3, #2
 800174a:	935f      	str	r3, [sp, #380]	; 0x17c
 800174c:	4668      	mov	r0, sp
 800174e:	f104 0310 	add.w	r3, r4, #16
 8001752:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001756:	4619      	mov	r1, r3
 8001758:	f007 fa66 	bl	8008c28 <memcpy>
 800175c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001760:	f001 fbfa 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 3, DIRECTION_INWARD);
 8001764:	4c58      	ldr	r4, [pc, #352]	; (80018c8 <sliding_cubes+0xd80>)
 8001766:	2307      	movs	r3, #7
 8001768:	9360      	str	r3, [sp, #384]	; 0x180
 800176a:	2303      	movs	r3, #3
 800176c:	935f      	str	r3, [sp, #380]	; 0x17c
 800176e:	4668      	mov	r0, sp
 8001770:	f104 0310 	add.w	r3, r4, #16
 8001774:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001778:	4619      	mov	r1, r3
 800177a:	f007 fa55 	bl	8008c28 <memcpy>
 800177e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001782:	f001 fbe9 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 4, DIRECTION_INWARD);
 8001786:	4c50      	ldr	r4, [pc, #320]	; (80018c8 <sliding_cubes+0xd80>)
 8001788:	2307      	movs	r3, #7
 800178a:	9360      	str	r3, [sp, #384]	; 0x180
 800178c:	2304      	movs	r3, #4
 800178e:	935f      	str	r3, [sp, #380]	; 0x17c
 8001790:	4668      	mov	r0, sp
 8001792:	f104 0310 	add.w	r3, r4, #16
 8001796:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800179a:	4619      	mov	r1, r3
 800179c:	f007 fa44 	bl	8008c28 <memcpy>
 80017a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a4:	f001 fbd8 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 5, DIRECTION_INWARD);
 80017a8:	4c47      	ldr	r4, [pc, #284]	; (80018c8 <sliding_cubes+0xd80>)
 80017aa:	2307      	movs	r3, #7
 80017ac:	9360      	str	r3, [sp, #384]	; 0x180
 80017ae:	2305      	movs	r3, #5
 80017b0:	935f      	str	r3, [sp, #380]	; 0x17c
 80017b2:	4668      	mov	r0, sp
 80017b4:	f104 0310 	add.w	r3, r4, #16
 80017b8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80017bc:	4619      	mov	r1, r3
 80017be:	f007 fa33 	bl	8008c28 <memcpy>
 80017c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017c6:	f001 fbc7 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 6, DIRECTION_INWARD);
 80017ca:	4c3f      	ldr	r4, [pc, #252]	; (80018c8 <sliding_cubes+0xd80>)
 80017cc:	2307      	movs	r3, #7
 80017ce:	9360      	str	r3, [sp, #384]	; 0x180
 80017d0:	2306      	movs	r3, #6
 80017d2:	935f      	str	r3, [sp, #380]	; 0x17c
 80017d4:	4668      	mov	r0, sp
 80017d6:	f104 0310 	add.w	r3, r4, #16
 80017da:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80017de:	4619      	mov	r1, r3
 80017e0:	f007 fa22 	bl	8008c28 <memcpy>
 80017e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e8:	f001 fbb6 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_shift_column(frame0.lyr0, 7, DIRECTION_INWARD);
 80017ec:	4c36      	ldr	r4, [pc, #216]	; (80018c8 <sliding_cubes+0xd80>)
 80017ee:	2307      	movs	r3, #7
 80017f0:	9360      	str	r3, [sp, #384]	; 0x180
 80017f2:	2307      	movs	r3, #7
 80017f4:	935f      	str	r3, [sp, #380]	; 0x17c
 80017f6:	4668      	mov	r0, sp
 80017f8:	f104 0310 	add.w	r3, r4, #16
 80017fc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001800:	4619      	mov	r1, r3
 8001802:	f007 fa11 	bl	8008c28 <memcpy>
 8001806:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800180a:	f001 fba5 	bl	8002f58 <lyr_frame_shift_column>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <sliding_cubes+0xd84>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4c2d      	ldr	r4, [pc, #180]	; (80018c8 <sliding_cubes+0xd80>)
 8001814:	935f      	str	r3, [sp, #380]	; 0x17c
 8001816:	4668      	mov	r0, sp
 8001818:	f104 0310 	add.w	r3, r4, #16
 800181c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001820:	4619      	mov	r1, r3
 8001822:	f007 fa01 	bl	8008c28 <memcpy>
 8001826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800182a:	f001 fa27 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <sliding_cubes+0xd88>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
		animation_delay(2*transitionDelay);	
 8001834:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fce0 	bl	8002200 <animation_delay>
	while(HALT_ANIMATION == false)
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <sliding_cubes+0xd8c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f083 0301 	eor.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f a9de 	bne.w	8000c0c <sliding_cubes+0xc4>
 8001850:	e012      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001852:	bf00      	nop
 8001854:	e010      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001856:	bf00      	nop
 8001858:	e00e      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 800185a:	bf00      	nop
 800185c:	e00c      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 800185e:	bf00      	nop
 8001860:	e00a      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001862:	bf00      	nop
 8001864:	e008      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001866:	bf00      	nop
 8001868:	e006      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 800186a:	bf00      	nop
 800186c:	e004      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 800186e:	bf00      	nop
 8001870:	e002      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001872:	bf00      	nop
 8001874:	e000      	b.n	8001878 <sliding_cubes+0xd30>
		if(HALT_ANIMATION == true) break;
 8001876:	bf00      	nop
		
	}
	lyr_frame_clear_all(frame.lyr0);
 8001878:	4668      	mov	r0, sp
 800187a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800187e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001882:	4619      	mov	r1, r3
 8001884:	f007 f9d0 	bl	8008c28 <memcpy>
 8001888:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800188c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188e:	f001 fa3f 	bl	8002d10 <lyr_frame_clear_all>
	lyr_frame_convert(frame.lyr0,data16Ptr);
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <sliding_cubes+0xd84>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	935f      	str	r3, [sp, #380]	; 0x17c
 8001898:	4668      	mov	r0, sp
 800189a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800189e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80018a2:	4619      	mov	r1, r3
 80018a4:	f007 f9c0 	bl	8008c28 <memcpy>
 80018a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ae:	f001 f9e5 	bl	8002c7c <lyr_frame_convert>
	UPDATE_FRAME=1;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <sliding_cubes+0xd88>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	37bc      	adds	r7, #188	; 0xbc
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80018c2:	b004      	add	sp, #16
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200008ec 	.word	0x200008ec
 80018cc:	200002e0 	.word	0x200002e0
 80018d0:	200006cd 	.word	0x200006cd
 80018d4:	2000067c 	.word	0x2000067c

080018d8 <stretchy_cube>:

void stretchy_cube(Frame_TypeDef frame)
{
 80018d8:	b084      	sub	sp, #16
 80018da:	b590      	push	{r4, r7, lr}
 80018dc:	b0e9      	sub	sp, #420	; 0x1a4
 80018de:	af64      	add	r7, sp, #400	; 0x190
 80018e0:	f107 0420 	add.w	r4, r7, #32
 80018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lyr_frame_clear_all(frame.lyr0);
 80018e8:	4668      	mov	r0, sp
 80018ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ee:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80018f2:	4619      	mov	r1, r3
 80018f4:	f007 f998 	bl	8008c28 <memcpy>
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fe:	f001 fa07 	bl	8002d10 <lyr_frame_clear_all>
	
	uint16_t delay = 250;
 8001902:	23fa      	movs	r3, #250	; 0xfa
 8001904:	80bb      	strh	r3, [r7, #4]
	uint64_t randColor = 0;
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint16_t randBrightnessValue = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	807b      	strh	r3, [r7, #2]
	uint8_t randRgbChoice = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	707b      	strb	r3, [r7, #1]
	uint8_t startPt = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
	
	startPt = rand_32bit_modulus(rngCount, 3);
 800191e:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <stretchy_cube+0x174>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2103      	movs	r1, #3
 8001924:	4618      	mov	r0, r3
 8001926:	f003 faae 	bl	8004e86 <rand_32bit_modulus>
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	randRgbChoice = rand_32bit_modulus(rngCount, 2);
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <stretchy_cube+0x174>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f003 faa6 	bl	8004e86 <rand_32bit_modulus>
 800193a:	4603      	mov	r3, r0
 800193c:	707b      	strb	r3, [r7, #1]
	randBrightnessValue = rand_32bit_modulus(rngCount, 4095);
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <stretchy_cube+0x174>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fa9d 	bl	8004e86 <rand_32bit_modulus>
 800194c:	4603      	mov	r3, r0
 800194e:	807b      	strh	r3, [r7, #2]
	randColor = modify_color_single_rgb_value(randColor, randBrightnessValue, randRgbChoice);
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001958:	f000 fc68 	bl	800222c <modify_color_single_rgb_value>
 800195c:	e9c7 0102 	strd	r0, r1, [r7, #8]
	
	
	//if (startPt == 0) startPt = 0;
	if (startPt == 1) startPt = 7;
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <stretchy_cube+0x92>
 8001966:	2307      	movs	r3, #7
 8001968:	71fb      	strb	r3, [r7, #7]
	if (startPt == 2) startPt = 56;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d101      	bne.n	8001974 <stretchy_cube+0x9c>
 8001970:	2338      	movs	r3, #56	; 0x38
 8001972:	71fb      	strb	r3, [r7, #7]
	if (startPt == 3) startPt = 63;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d159      	bne.n	8001a2e <stretchy_cube+0x156>
 800197a:	233f      	movs	r3, #63	; 0x3f
 800197c:	71fb      	strb	r3, [r7, #7]
	
	while(HALT_ANIMATION == false)
 800197e:	e056      	b.n	8001a2e <stretchy_cube+0x156>
	{				
		animation_stretch_out(frame.lyr0, randColor, startPt, delay);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	9263      	str	r2, [sp, #396]	; 0x18c
 8001986:	9362      	str	r3, [sp, #392]	; 0x188
 8001988:	aa60      	add	r2, sp, #384	; 0x180
 800198a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800198e:	e9c2 3400 	strd	r3, r4, [r2]
 8001992:	4668      	mov	r0, sp
 8001994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001998:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800199c:	4619      	mov	r1, r3
 800199e:	f007 f943 	bl	8008c28 <memcpy>
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a8:	f000 fb08 	bl	8001fbc <animation_stretch_out>
		
		startPt = rand_32bit_modulus(rngCount, 3);
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <stretchy_cube+0x174>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fa67 	bl	8004e86 <rand_32bit_modulus>
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
		randRgbChoice = rand_32bit_modulus(rngCount, 2);
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <stretchy_cube+0x174>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2102      	movs	r1, #2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fa5f 	bl	8004e86 <rand_32bit_modulus>
 80019c8:	4603      	mov	r3, r0
 80019ca:	707b      	strb	r3, [r7, #1]
		randBrightnessValue = rand_32bit_modulus(rngCount, 4095);
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <stretchy_cube+0x174>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fa56 	bl	8004e86 <rand_32bit_modulus>
 80019da:	4603      	mov	r3, r0
 80019dc:	807b      	strh	r3, [r7, #2]
		randColor = modify_color_single_rgb_value(randColor, randBrightnessValue, randRgbChoice);
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e6:	f000 fc21 	bl	800222c <modify_color_single_rgb_value>
 80019ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
		
		//if (startPt = 0) startPt = 0;
		if (startPt == 1) startPt = 7;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <stretchy_cube+0x120>
 80019f4:	2307      	movs	r3, #7
 80019f6:	71fb      	strb	r3, [r7, #7]
		if (startPt == 2) startPt = 56;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d101      	bne.n	8001a02 <stretchy_cube+0x12a>
 80019fe:	2338      	movs	r3, #56	; 0x38
 8001a00:	71fb      	strb	r3, [r7, #7]
		if (startPt == 3) startPt = 63;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d101      	bne.n	8001a0c <stretchy_cube+0x134>
 8001a08:	233f      	movs	r3, #63	; 0x3f
 8001a0a:	71fb      	strb	r3, [r7, #7]
				
		animation_stretch_in(frame.lyr0, startPt, delay); // still need to implement this
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	88ba      	ldrh	r2, [r7, #4]
 8001a10:	9260      	str	r2, [sp, #384]	; 0x180
 8001a12:	935f      	str	r3, [sp, #380]	; 0x17c
 8001a14:	4668      	mov	r0, sp
 8001a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f007 f902 	bl	8008c28 <memcpy>
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2a:	f000 fabb 	bl	8001fa4 <animation_stretch_in>
	while(HALT_ANIMATION == false)
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <stretchy_cube+0x178>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	f083 0301 	eor.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1a1      	bne.n	8001980 <stretchy_cube+0xa8>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a46:	b004      	add	sp, #16
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200006d4 	.word	0x200006d4
 8001a50:	2000067c 	.word	0x2000067c

08001a54 <transition_punch>:
 * @param[in] delay - length of time in ms to wait inbetween punches
 * @param[in] direction - currently supports forward and back only. this a quick & easy way to support different punching directions
 * example usage: transition_punch(frame1.lyr0, &mask3[0], white, 27, DIRECTION_FORWARD);
 */
void transition_punch(LyrFrame_TypeDef lyrFrame, bool *maskPtr, uint64_t color, uint16_t delay, uint8_t direction)
{
 8001a54:	b084      	sub	sp, #16
 8001a56:	b590      	push	{r4, r7, lr}
 8001a58:	b0e7      	sub	sp, #412	; 0x19c
 8001a5a:	af64      	add	r7, sp, #400	; 0x190
 8001a5c:	f107 0418 	add.w	r4, r7, #24
 8001a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		
	if(direction == DIRECTION_FORWARD)
 8001a64:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d142      	bne.n	8001af2 <transition_punch+0x9e>
	{
		for(uint8_t tempIndex=0;tempIndex<BOOL_MASK_LENGTH;tempIndex++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	e03a      	b.n	8001ae8 <transition_punch+0x94>
		{
			if(*(maskPtr + tempIndex) == 1)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d030      	beq.n	8001ae2 <transition_punch+0x8e>
			{
				lyr_frame_set_single_color(lyrFrame,color,tempIndex);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	9362      	str	r3, [sp, #392]	; 0x188
 8001a84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001a88:	aa60      	add	r2, sp, #384	; 0x180
 8001a8a:	cb18      	ldmia	r3, {r3, r4}
 8001a8c:	e9c2 3400 	strd	r3, r4, [r2]
 8001a90:	4668      	mov	r0, sp
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f007 f8c4 	bl	8008c28 <memcpy>
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa6:	f001 f95f 	bl	8002d68 <lyr_frame_set_single_color>
				lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <transition_punch+0x140>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4c3a      	ldr	r4, [pc, #232]	; (8001b98 <transition_punch+0x144>)
 8001ab0:	935f      	str	r3, [sp, #380]	; 0x17c
 8001ab2:	4668      	mov	r0, sp
 8001ab4:	f104 0310 	add.w	r3, r4, #16
 8001ab8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001abc:	4619      	mov	r1, r3
 8001abe:	f007 f8b3 	bl	8008c28 <memcpy>
 8001ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac6:	f001 f8d9 	bl	8002c7c <lyr_frame_convert>
				UPDATE_FRAME=1;
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <transition_punch+0x148>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
				animation_delay(delay);
 8001ad0:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fb93 	bl	8002200 <animation_delay>
				if(HALT_ANIMATION == true) break;
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <transition_punch+0x14c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <transition_punch+0x9c>
		for(uint8_t tempIndex=0;tempIndex<BOOL_MASK_LENGTH;tempIndex++)
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b3f      	cmp	r3, #63	; 0x3f
 8001aec:	d9c1      	bls.n	8001a72 <transition_punch+0x1e>
 8001aee:	e000      	b.n	8001af2 <transition_punch+0x9e>
				if(HALT_ANIMATION == true) break;
 8001af0:	bf00      	nop
			}
		}
	}
	
	if(direction == DIRECTION_BACK)
 8001af2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d145      	bne.n	8001b86 <transition_punch+0x132>
	{
		for(uint8_t tempIndex=BOOL_MASK_LENGTH;tempIndex>0;tempIndex--)
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	71bb      	strb	r3, [r7, #6]
 8001afe:	e03d      	b.n	8001b7c <transition_punch+0x128>
		{
			if(*(maskPtr + tempIndex-1) == 1)
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d032      	beq.n	8001b76 <transition_punch+0x122>
			{
				lyr_frame_set_single_color(lyrFrame,color,tempIndex-1);
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	9362      	str	r3, [sp, #392]	; 0x188
 8001b18:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001b1c:	aa60      	add	r2, sp, #384	; 0x180
 8001b1e:	cb18      	ldmia	r3, {r3, r4}
 8001b20:	e9c2 3400 	strd	r3, r4, [r2]
 8001b24:	4668      	mov	r0, sp
 8001b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f007 f87a 	bl	8008c28 <memcpy>
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3a:	f001 f915 	bl	8002d68 <lyr_frame_set_single_color>
				lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <transition_punch+0x140>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4c15      	ldr	r4, [pc, #84]	; (8001b98 <transition_punch+0x144>)
 8001b44:	935f      	str	r3, [sp, #380]	; 0x17c
 8001b46:	4668      	mov	r0, sp
 8001b48:	f104 0310 	add.w	r3, r4, #16
 8001b4c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001b50:	4619      	mov	r1, r3
 8001b52:	f007 f869 	bl	8008c28 <memcpy>
 8001b56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b5a:	f001 f88f 	bl	8002c7c <lyr_frame_convert>
				UPDATE_FRAME=1;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <transition_punch+0x148>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
				animation_delay(delay);
 8001b64:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fb49 	bl	8002200 <animation_delay>
				if(HALT_ANIMATION == true) break;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <transition_punch+0x14c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <transition_punch+0x130>
		for(uint8_t tempIndex=BOOL_MASK_LENGTH;tempIndex>0;tempIndex--)
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	71bb      	strb	r3, [r7, #6]
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1be      	bne.n	8001b00 <transition_punch+0xac>
			}
		}
	}
	
}
 8001b82:	e000      	b.n	8001b86 <transition_punch+0x132>
				if(HALT_ANIMATION == true) break;
 8001b84:	bf00      	nop
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b90:	b004      	add	sp, #16
 8001b92:	4770      	bx	lr
 8001b94:	200002e0 	.word	0x200002e0
 8001b98:	200008ec 	.word	0x200008ec
 8001b9c:	200006cd 	.word	0x200006cd
 8001ba0:	2000067c 	.word	0x2000067c

08001ba4 <fade_in_color>:
		}
	}
}

void fade_in_color(LyrFrame_TypeDef lyrFrame, bool mask[64], uint64_t color, uint16_t maxBrightness, uint16_t deltaBrightness, uint16_t delay)
{	
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	b590      	push	{r4, r7, lr}
 8001ba8:	b0e5      	sub	sp, #404	; 0x194
 8001baa:	af60      	add	r7, sp, #384	; 0x180
 8001bac:	f107 0420 	add.w	r4, r7, #32
 8001bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t redBrightness = (color>>32);
 8001bb4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bb8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	f04f 0400 	mov.w	r4, #0
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	81fb      	strh	r3, [r7, #14]
	int16_t grnBrightness = (color>>16);
 8001bca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bce:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f04f 0400 	mov.w	r4, #0
 8001bda:	0c0b      	lsrs	r3, r1, #16
 8001bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001be0:	0c14      	lsrs	r4, r2, #16
 8001be2:	81bb      	strh	r3, [r7, #12]
	int16_t bluBrightness = (color>>0);
 8001be4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	817b      	strh	r3, [r7, #10]
	int16_t redDeltaBrightness = 0x0000;
 8001bec:	2300      	movs	r3, #0
 8001bee:	813b      	strh	r3, [r7, #8]
	int16_t grnDeltaBrightness = 0x0000;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	80fb      	strh	r3, [r7, #6]
	int16_t bluDeltaBrightness = 0x0000;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	80bb      	strh	r3, [r7, #4]
	int16_t currentBrightness = 0; //hopefully since its signed there's no negative number hard fault.
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	807b      	strh	r3, [r7, #2]
	
	if (redBrightness >= 4000)
 8001bfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c00:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c04:	db04      	blt.n	8001c10 <fade_in_color+0x6c>
	{
		redBrightness = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	81fb      	strh	r3, [r7, #14]
		redDeltaBrightness = deltaBrightness;
 8001c0a:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001c0e:	813b      	strh	r3, [r7, #8]
	}
	
	if ((redBrightness < 4000) & (redBrightness > 0)) 
 8001c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c14:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bfd4      	ite	le
 8001c1c:	2301      	movle	r3, #1
 8001c1e:	2300      	movgt	r3, #0
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bfcc      	ite	gt
 8001c2a:	2301      	movgt	r3, #1
 8001c2c:	2300      	movle	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <fade_in_color+0xa2>
	{
		redBrightness = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	81fb      	strh	r3, [r7, #14]
		redDeltaBrightness = (deltaBrightness/2);
 8001c3c:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	813b      	strh	r3, [r7, #8]
	}
	
	
	if (grnBrightness >= 4000)
 8001c46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c4a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c4e:	db04      	blt.n	8001c5a <fade_in_color+0xb6>
	{
		grnBrightness = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	81bb      	strh	r3, [r7, #12]
		grnDeltaBrightness = deltaBrightness;
 8001c54:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001c58:	80fb      	strh	r3, [r7, #6]
	}
	
	if ((grnBrightness < 4000) & (grnBrightness > 0)) 
 8001c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c5e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c62:	4293      	cmp	r3, r2
 8001c64:	bfd4      	ite	le
 8001c66:	2301      	movle	r3, #1
 8001c68:	2300      	movgt	r3, #0
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfcc      	ite	gt
 8001c74:	2301      	movgt	r3, #1
 8001c76:	2300      	movle	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <fade_in_color+0xec>
	{
		grnBrightness = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	81bb      	strh	r3, [r7, #12]
		grnDeltaBrightness = (deltaBrightness/2);
 8001c86:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	80fb      	strh	r3, [r7, #6]
	}	
	
	if (bluBrightness >= 4000)
 8001c90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c94:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c98:	db04      	blt.n	8001ca4 <fade_in_color+0x100>
	{
		bluBrightness = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	817b      	strh	r3, [r7, #10]
		bluDeltaBrightness = deltaBrightness;
 8001c9e:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001ca2:	80bb      	strh	r3, [r7, #4]
	}
	
	if ((bluBrightness < 4000) & (bluBrightness > 0)) 
 8001ca4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ca8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bfd4      	ite	le
 8001cb0:	2301      	movle	r3, #1
 8001cb2:	2300      	movgt	r3, #0
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bfcc      	ite	gt
 8001cbe:	2301      	movgt	r3, #1
 8001cc0:	2300      	movle	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d050      	beq.n	8001d6e <fade_in_color+0x1ca>
	{
		bluBrightness = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	817b      	strh	r3, [r7, #10]
		bluDeltaBrightness = (deltaBrightness/2);
 8001cd0:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	80bb      	strh	r3, [r7, #4]
	}
		
	while (currentBrightness <= maxBrightness)
 8001cda:	e048      	b.n	8001d6e <fade_in_color+0x1ca>
	{
		if(HALT_ANIMATION == true) break;
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <fade_in_color+0x1e8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d14b      	bne.n	8001d7c <fade_in_color+0x1d8>
		lyr_frame_set_single_rgb(lyrFrame.redArrPtr, redBrightness, mask);
 8001ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ce8:	89f9      	ldrh	r1, [r7, #14]
 8001cea:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 f87c 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_set_single_rgb(lyrFrame.grnArrPtr, grnBrightness, mask);
 8001cf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cf8:	89b9      	ldrh	r1, [r7, #12]
 8001cfa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 f874 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_set_single_rgb(lyrFrame.bluArrPtr, bluBrightness, mask);
 8001d04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f86c 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <fade_in_color+0x1ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4c1e      	ldr	r4, [pc, #120]	; (8001d94 <fade_in_color+0x1f0>)
 8001d1a:	935f      	str	r3, [sp, #380]	; 0x17c
 8001d1c:	4668      	mov	r0, sp
 8001d1e:	f104 0310 	add.w	r3, r4, #16
 8001d22:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001d26:	4619      	mov	r1, r3
 8001d28:	f006 ff7e 	bl	8008c28 <memcpy>
 8001d2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d30:	f000 ffa4 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <fade_in_color+0x1f4>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
		animation_delay(delay);
 8001d3a:	f8b7 31c0 	ldrh.w	r3, [r7, #448]	; 0x1c0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fa5e 	bl	8002200 <animation_delay>
		currentBrightness = currentBrightness + deltaBrightness;
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	807b      	strh	r3, [r7, #2]
		redBrightness = redBrightness + redDeltaBrightness;
 8001d50:	89fa      	ldrh	r2, [r7, #14]
 8001d52:	893b      	ldrh	r3, [r7, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	81fb      	strh	r3, [r7, #14]
		grnBrightness = grnBrightness + grnDeltaBrightness;
 8001d5a:	89ba      	ldrh	r2, [r7, #12]
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	81bb      	strh	r3, [r7, #12]
		bluBrightness = bluBrightness + bluDeltaBrightness;
 8001d64:	897a      	ldrh	r2, [r7, #10]
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	817b      	strh	r3, [r7, #10]
	while (currentBrightness <= maxBrightness)
 8001d6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d72:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
 8001d76:	429a      	cmp	r2, r3
 8001d78:	ddb0      	ble.n	8001cdc <fade_in_color+0x138>
	}
}
 8001d7a:	e000      	b.n	8001d7e <fade_in_color+0x1da>
		if(HALT_ANIMATION == true) break;
 8001d7c:	bf00      	nop
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d88:	b004      	add	sp, #16
 8001d8a:	4770      	bx	lr
 8001d8c:	2000067c 	.word	0x2000067c
 8001d90:	200002e0 	.word	0x200002e0
 8001d94:	200008ec 	.word	0x200008ec
 8001d98:	200006cd 	.word	0x200006cd

08001d9c <fade_out_color>:

void fade_out_color(LyrFrame_TypeDef lyrFrame, bool mask[64], uint64_t color, uint16_t minBrightness, uint16_t deltaBrightness, uint16_t delay)
{
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	b590      	push	{r4, r7, lr}
 8001da0:	b0e5      	sub	sp, #404	; 0x194
 8001da2:	af60      	add	r7, sp, #384	; 0x180
 8001da4:	f107 0420 	add.w	r4, r7, #32
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t redBrightness = (color>>32);
 8001dac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001db0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	f04f 0400 	mov.w	r4, #0
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	81fb      	strh	r3, [r7, #14]
	int16_t grnBrightness = (color>>16);
 8001dc2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001dc6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	f04f 0400 	mov.w	r4, #0
 8001dd2:	0c0b      	lsrs	r3, r1, #16
 8001dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001dd8:	0c14      	lsrs	r4, r2, #16
 8001dda:	81bb      	strh	r3, [r7, #12]
	int16_t bluBrightness = (color>>0);
 8001ddc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	817b      	strh	r3, [r7, #10]
	int16_t redDeltaBrightness = 0x0000;
 8001de4:	2300      	movs	r3, #0
 8001de6:	813b      	strh	r3, [r7, #8]
	int16_t grnDeltaBrightness = 0x0000;
 8001de8:	2300      	movs	r3, #0
 8001dea:	80fb      	strh	r3, [r7, #6]
	int16_t bluDeltaBrightness = 0x0000;
 8001dec:	2300      	movs	r3, #0
 8001dee:	80bb      	strh	r3, [r7, #4]
	int16_t currentBrightness = 4000; //hopefully since its signed there's no negative number hard fault.
 8001df0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001df4:	807b      	strh	r3, [r7, #2]
	
	if (redBrightness >= 4000)
 8001df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dfa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001dfe:	db05      	blt.n	8001e0c <fade_out_color+0x70>
	{
		redBrightness = 4000;
 8001e00:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e04:	81fb      	strh	r3, [r7, #14]
		redDeltaBrightness = deltaBrightness;
 8001e06:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001e0a:	813b      	strh	r3, [r7, #8]
	}
	
	if ((redBrightness < 4000) & (redBrightness > 0)) 
 8001e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e10:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bfd4      	ite	le
 8001e18:	2301      	movle	r3, #1
 8001e1a:	2300      	movgt	r3, #0
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bfcc      	ite	gt
 8001e26:	2301      	movgt	r3, #1
 8001e28:	2300      	movle	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <fade_out_color+0xa8>
	{
		redBrightness = 2000;
 8001e34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e38:	81fb      	strh	r3, [r7, #14]
		redDeltaBrightness = (deltaBrightness/2);
 8001e3a:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	813b      	strh	r3, [r7, #8]
	}
	
	
	if (grnBrightness >= 4000)
 8001e44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e48:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e4c:	db05      	blt.n	8001e5a <fade_out_color+0xbe>
	{
		grnBrightness = 4000;
 8001e4e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001e52:	81bb      	strh	r3, [r7, #12]
		grnDeltaBrightness = deltaBrightness;
 8001e54:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001e58:	80fb      	strh	r3, [r7, #6]
	}
	
	if ((grnBrightness < 4000) & (grnBrightness > 0)) 
 8001e5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e5e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001e62:	4293      	cmp	r3, r2
 8001e64:	bfd4      	ite	le
 8001e66:	2301      	movle	r3, #1
 8001e68:	2300      	movgt	r3, #0
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bfcc      	ite	gt
 8001e74:	2301      	movgt	r3, #1
 8001e76:	2300      	movle	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <fade_out_color+0xf6>
	{
		grnBrightness = 2000;
 8001e82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e86:	81bb      	strh	r3, [r7, #12]
		grnDeltaBrightness = (deltaBrightness/2);
 8001e88:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	80fb      	strh	r3, [r7, #6]
	}	
	
	if (bluBrightness >= 4000)
 8001e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e96:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e9a:	db05      	blt.n	8001ea8 <fade_out_color+0x10c>
	{
		bluBrightness = 4000;
 8001e9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001ea0:	817b      	strh	r3, [r7, #10]
		bluDeltaBrightness = deltaBrightness;
 8001ea2:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001ea6:	80bb      	strh	r3, [r7, #4]
	}
	
	if ((bluBrightness < 4000) & (bluBrightness > 0)) 
 8001ea8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eac:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bfd4      	ite	le
 8001eb4:	2301      	movle	r3, #1
 8001eb6:	2300      	movgt	r3, #0
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bfcc      	ite	gt
 8001ec2:	2301      	movgt	r3, #1
 8001ec4:	2300      	movle	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d051      	beq.n	8001f74 <fade_out_color+0x1d8>
	{
		bluBrightness = 2000;
 8001ed0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ed4:	817b      	strh	r3, [r7, #10]
		bluDeltaBrightness = (deltaBrightness/2);
 8001ed6:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	80bb      	strh	r3, [r7, #4]
	}
	
	while (currentBrightness >= minBrightness)
 8001ee0:	e048      	b.n	8001f74 <fade_out_color+0x1d8>
	{
		if(HALT_ANIMATION == true) break;
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <fade_out_color+0x1f8>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d14b      	bne.n	8001f82 <fade_out_color+0x1e6>
		lyr_frame_set_single_rgb(lyrFrame.redArrPtr, redBrightness, mask);
 8001eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eee:	89f9      	ldrh	r1, [r7, #14]
 8001ef0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 ff79 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_set_single_rgb(lyrFrame.grnArrPtr, grnBrightness, mask);
 8001efa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001efe:	89b9      	ldrh	r1, [r7, #12]
 8001f00:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 ff71 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_set_single_rgb(lyrFrame.bluArrPtr, bluBrightness, mask);
 8001f0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f0e:	8979      	ldrh	r1, [r7, #10]
 8001f10:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ff69 	bl	8002dec <lyr_frame_set_single_rgb>
		lyr_frame_convert(frame0.lyr0,data16Ptr);
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <fade_out_color+0x1fc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4c1f      	ldr	r4, [pc, #124]	; (8001f9c <fade_out_color+0x200>)
 8001f20:	935f      	str	r3, [sp, #380]	; 0x17c
 8001f22:	4668      	mov	r0, sp
 8001f24:	f104 0310 	add.w	r3, r4, #16
 8001f28:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f006 fe7b 	bl	8008c28 <memcpy>
 8001f32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f36:	f000 fea1 	bl	8002c7c <lyr_frame_convert>
		UPDATE_FRAME=1;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <fade_out_color+0x204>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
		animation_delay(delay);
 8001f40:	f8b7 31c0 	ldrh.w	r3, [r7, #448]	; 0x1c0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f95b 	bl	8002200 <animation_delay>
		currentBrightness = currentBrightness - deltaBrightness;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	807b      	strh	r3, [r7, #2]
		redBrightness = redBrightness - redDeltaBrightness;
 8001f56:	89fa      	ldrh	r2, [r7, #14]
 8001f58:	893b      	ldrh	r3, [r7, #8]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	81fb      	strh	r3, [r7, #14]
		grnBrightness = grnBrightness - grnDeltaBrightness;
 8001f60:	89ba      	ldrh	r2, [r7, #12]
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	81bb      	strh	r3, [r7, #12]
		bluBrightness = bluBrightness - bluDeltaBrightness;
 8001f6a:	897a      	ldrh	r2, [r7, #10]
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	817b      	strh	r3, [r7, #10]
	while (currentBrightness >= minBrightness)
 8001f74:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f78:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dab0      	bge.n	8001ee2 <fade_out_color+0x146>
	}
}
 8001f80:	e000      	b.n	8001f84 <fade_out_color+0x1e8>
		if(HALT_ANIMATION == true) break;
 8001f82:	bf00      	nop
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f8e:	b004      	add	sp, #16
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000067c 	.word	0x2000067c
 8001f98:	200002e0 	.word	0x200002e0
 8001f9c:	200008ec 	.word	0x200008ec
 8001fa0:	200006cd 	.word	0x200006cd

08001fa4 <animation_stretch_in>:
 * @param[in] lyrFrame - a struct of the RGB values for a horizontal slice of the 3D frame
 * @param[in] stopPt - the corner which the 8x8 square outline collapses into
 * @param[in] delay - length of time in ms to wait inbetween punches
 */
void animation_stretch_in(LyrFrame_TypeDef lyrFrame, int stopPt, uint16_t delay)
{
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	b490      	push	{r4, r7}
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	f107 0408 	add.w	r4, r7, #8
 8001fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc90      	pop	{r4, r7}
 8001fb8:	b004      	add	sp, #16
 8001fba:	4770      	bx	lr

08001fbc <animation_stretch_out>:
 * @param[in] color - an RGB color in the format 0x00000RRR0GGG0BBB
 * @param[in] startPt - the initial corner
 * @param[in] delay - length of time in ms to wait inbetween punches
 */
void animation_stretch_out(LyrFrame_TypeDef lyrFrame, uint64_t color, int startPt, uint16_t delay)
{
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	b590      	push	{r4, r7, lr}
 8001fc0:	b0e9      	sub	sp, #420	; 0x1a4
 8001fc2:	af64      	add	r7, sp, #400	; 0x190
 8001fc4:	f107 0420 	add.w	r4, r7, #32
 8001fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ((startPt != 0)&(startPt != 7)&(startPt != 56)&(startPt != 63)) return;
 8001fcc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fde:	2b07      	cmp	r3, #7
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001ff2:	2b38      	cmp	r3, #56	; 0x38
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002002:	2a3f      	cmp	r2, #63	; 0x3f
 8002004:	bf14      	ite	ne
 8002006:	2201      	movne	r2, #1
 8002008:	2200      	moveq	r2, #0
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 80e9 	bne.w	80021e6 <animation_stretch_out+0x22a>
	
	lyr_frame_clear_all(lyrFrame);
 8002014:	4668      	mov	r0, sp
 8002016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800201e:	4619      	mov	r1, r3
 8002020:	f006 fe02 	bl	8008c28 <memcpy>
 8002024:	f107 0320 	add.w	r3, r7, #32
 8002028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202a:	f000 fe71 	bl	8002d10 <lyr_frame_clear_all>
	
	int stopPt = startPt;
 800202e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002032:	60fb      	str	r3, [r7, #12]
	int limitPt = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
	int ptStepSize = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
	
	if ((startPt == 0)|(startPt == 7))
 800203c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2da      	uxtb	r2, r3
 800204a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800204e:	2b07      	cmp	r3, #7
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d057      	beq.n	8002110 <animation_stretch_out+0x154>
	{
		if (startPt == 0) // rear left of array
 8002060:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <animation_stretch_out+0xb4>
		{
			limitPt = 63; //front right of array
 8002068:	233f      	movs	r3, #63	; 0x3f
 800206a:	60bb      	str	r3, [r7, #8]
			ptStepSize = 9;
 800206c:	2309      	movs	r3, #9
 800206e:	607b      	str	r3, [r7, #4]
		}
	
		if (startPt == 7) //rear right of array
 8002070:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002074:	2b07      	cmp	r3, #7
 8002076:	d147      	bne.n	8002108 <animation_stretch_out+0x14c>
		{
			limitPt = 56; //front left of array
 8002078:	2338      	movs	r3, #56	; 0x38
 800207a:	60bb      	str	r3, [r7, #8]
			ptStepSize = 7;
 800207c:	2307      	movs	r3, #7
 800207e:	607b      	str	r3, [r7, #4]
		}
	
		while(stopPt<=limitPt)
 8002080:	e042      	b.n	8002108 <animation_stretch_out+0x14c>
		{
			stopPt+=ptStepSize;
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
			lyr_frame_clear_all(lyrFrame);
 800208a:	4668      	mov	r0, sp
 800208c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002090:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002094:	4619      	mov	r1, r3
 8002096:	f006 fdc7 	bl	8008c28 <memcpy>
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a0:	f000 fe36 	bl	8002d10 <lyr_frame_clear_all>
			lyrframe_set_square(lyrFrame, color, startPt, stopPt);
 80020a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	9263      	str	r2, [sp, #396]	; 0x18c
 80020b0:	9362      	str	r3, [sp, #392]	; 0x188
 80020b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80020b6:	aa60      	add	r2, sp, #384	; 0x180
 80020b8:	cb18      	ldmia	r3, {r3, r4}
 80020ba:	e9c2 3400 	strd	r3, r4, [r2]
 80020be:	4668      	mov	r0, sp
 80020c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80020c8:	4619      	mov	r1, r3
 80020ca:	f006 fdad 	bl	8008c28 <memcpy>
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d4:	f000 fefa 	bl	8002ecc <lyrframe_set_square>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <animation_stretch_out+0x238>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4c46      	ldr	r4, [pc, #280]	; (80021f8 <animation_stretch_out+0x23c>)
 80020de:	935f      	str	r3, [sp, #380]	; 0x17c
 80020e0:	4668      	mov	r0, sp
 80020e2:	f104 0310 	add.w	r3, r4, #16
 80020e6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80020ea:	4619      	mov	r1, r3
 80020ec:	f006 fd9c 	bl	8008c28 <memcpy>
 80020f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020f4:	f000 fdc2 	bl	8002c7c <lyr_frame_convert>
			UPDATE_FRAME = 1;
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <animation_stretch_out+0x240>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
			animation_delay(delay);
 80020fe:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f87c 	bl	8002200 <animation_delay>
		while(stopPt<=limitPt)
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	ddb8      	ble.n	8002082 <animation_stretch_out+0xc6>
		}
	}
	
	if ((startPt == 56) | (startPt == 63))
 8002110:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002114:	2b38      	cmp	r3, #56	; 0x38
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2da      	uxtb	r2, r3
 800211e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002122:	2b3f      	cmp	r3, #63	; 0x3f
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d059      	beq.n	80021e8 <animation_stretch_out+0x22c>
	{
		if (startPt == 56) // front left of array
 8002134:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002138:	2b38      	cmp	r3, #56	; 0x38
 800213a:	d103      	bne.n	8002144 <animation_stretch_out+0x188>
		{
			limitPt = 7; //front left of array
 800213c:	2307      	movs	r3, #7
 800213e:	60bb      	str	r3, [r7, #8]
			ptStepSize = 7;
 8002140:	2307      	movs	r3, #7
 8002142:	607b      	str	r3, [r7, #4]
		}
	
		if (startPt == 63)
 8002144:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002148:	2b3f      	cmp	r3, #63	; 0x3f
 800214a:	d147      	bne.n	80021dc <animation_stretch_out+0x220>
		{
			limitPt = 0; //front left of array
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
			ptStepSize = 9;
 8002150:	2309      	movs	r3, #9
 8002152:	607b      	str	r3, [r7, #4]
		}
		
		while(stopPt>=limitPt)
 8002154:	e042      	b.n	80021dc <animation_stretch_out+0x220>
		{
			stopPt-=ptStepSize;
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	60fb      	str	r3, [r7, #12]
			lyr_frame_clear_all(lyrFrame);
 800215e:	4668      	mov	r0, sp
 8002160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002164:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002168:	4619      	mov	r1, r3
 800216a:	f006 fd5d 	bl	8008c28 <memcpy>
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002174:	f000 fdcc 	bl	8002d10 <lyr_frame_clear_all>
			lyrframe_set_square(lyrFrame, color, startPt, stopPt);
 8002178:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800217c:	b2db      	uxtb	r3, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	9263      	str	r2, [sp, #396]	; 0x18c
 8002184:	9362      	str	r3, [sp, #392]	; 0x188
 8002186:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800218a:	aa60      	add	r2, sp, #384	; 0x180
 800218c:	cb18      	ldmia	r3, {r3, r4}
 800218e:	e9c2 3400 	strd	r3, r4, [r2]
 8002192:	4668      	mov	r0, sp
 8002194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002198:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800219c:	4619      	mov	r1, r3
 800219e:	f006 fd43 	bl	8008c28 <memcpy>
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a8:	f000 fe90 	bl	8002ecc <lyrframe_set_square>
			lyr_frame_convert(frame0.lyr0,data16Ptr);
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <animation_stretch_out+0x238>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4c11      	ldr	r4, [pc, #68]	; (80021f8 <animation_stretch_out+0x23c>)
 80021b2:	935f      	str	r3, [sp, #380]	; 0x17c
 80021b4:	4668      	mov	r0, sp
 80021b6:	f104 0310 	add.w	r3, r4, #16
 80021ba:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80021be:	4619      	mov	r1, r3
 80021c0:	f006 fd32 	bl	8008c28 <memcpy>
 80021c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021c8:	f000 fd58 	bl	8002c7c <lyr_frame_convert>
			UPDATE_FRAME = 1;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <animation_stretch_out+0x240>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
			animation_delay(delay);	
 80021d2:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f812 	bl	8002200 <animation_delay>
		while(stopPt>=limitPt)
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dab8      	bge.n	8002156 <animation_stretch_out+0x19a>
 80021e4:	e000      	b.n	80021e8 <animation_stretch_out+0x22c>
	if ((startPt != 0)&(startPt != 7)&(startPt != 56)&(startPt != 63)) return;
 80021e6:	bf00      	nop
		}
	}
}
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr
 80021f4:	200002e0 	.word	0x200002e0
 80021f8:	200008ec 	.word	0x200008ec
 80021fc:	200006cd 	.word	0x200006cd

08002200 <animation_delay>:
/**
 * @brief a wrapper for HAL_Delay(delay) but also enables play/pause functionality
 * @param[in] delay - length of time in ms to wait
 */
void animation_delay(uint32_t delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f003 f9c1 	bl	8005590 <HAL_Delay>
	while(PAUSE_ANIMATION == true)
 800220e:	e002      	b.n	8002216 <animation_delay+0x16>
	{
		 HAL_Delay(delay);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f003 f9bd 	bl	8005590 <HAL_Delay>
	while(PAUSE_ANIMATION == true)
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <animation_delay+0x28>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f8      	bne.n	8002210 <animation_delay+0x10>
	}
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000067d 	.word	0x2000067d

0800222c <modify_color_single_rgb_value>:
 * @param[in] rgbValue - the value that will be overwrite either the red, grn, or blue brightness. should be pseudo 12-bit (bounded between 0 & 4095)
 * @param[in] rgbChoice - should be bounded between 0 & 2 where: 0 -> red, 1 -> grn, 2 -> blu
 * @return[out] the resulting color with one of its R/G/B values changed 
 */
uint64_t modify_color_single_rgb_value(uint64_t initialColor, uint16_t rgbValue, uint8_t rgbCoice)
{
 800222c:	b4f0      	push	{r4, r5, r6, r7}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	460b      	mov	r3, r1
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	4613      	mov	r3, r2
 8002240:	717b      	strb	r3, [r7, #5]
	//need to look at this in debug mode to ensure the logic makes sense for recombining the individual brightnesses
	uint64_t redBrightness = 0;
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	uint64_t grnBrightness = 0;
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	e9c7 3406 	strd	r3, r4, [r7, #24]
	uint64_t bluBrightness = 0;
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f04f 0400 	mov.w	r4, #0
 8002262:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	redBrightness = (0x0000000000001111 && (initialColor>>32));
 8002266:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0013      	movs	r3, r2
 8002274:	2400      	movs	r4, #0
 8002276:	4323      	orrs	r3, r4
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f04f 0400 	mov.w	r4, #0
 8002288:	e9c7 3408 	strd	r3, r4, [r7, #32]
	grnBrightness = (0x0000000000001111 && (initialColor>>16));
 800228c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	0c0b      	lsrs	r3, r1, #16
 800229a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800229e:	0c14      	lsrs	r4, r2, #16
 80022a0:	4323      	orrs	r3, r4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bf14      	ite	ne
 80022a6:	2301      	movne	r3, #1
 80022a8:	2300      	moveq	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	bluBrightness = (0x0000000000001111 && (initialColor>>0));
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	if(rgbCoice == 0) redBrightness = rgbValue;
 80022d0:	797b      	ldrb	r3, [r7, #5]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <modify_color_single_rgb_value+0xb4>
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if(rgbCoice == 1) grnBrightness = rgbValue;
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d104      	bne.n	80022f0 <modify_color_single_rgb_value+0xc4>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	f04f 0400 	mov.w	r4, #0
 80022ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	if(rgbCoice == 2) bluBrightness = rgbValue;
 80022f0:	797b      	ldrb	r3, [r7, #5]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d104      	bne.n	8002300 <modify_color_single_rgb_value+0xd4>
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	initialColor = (0x0000000000001111 && redBrightness);
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	4313      	orrs	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	e9c7 3402 	strd	r3, r4, [r7, #8]
	initialColor = ((initialColor<<16) && grnBrightness);
 800231a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	0414      	lsls	r4, r2, #16
 8002328:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800232c:	040b      	lsls	r3, r1, #16
 800232e:	4323      	orrs	r3, r4
 8002330:	d005      	beq.n	800233e <modify_color_single_rgb_value+0x112>
 8002332:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002336:	4323      	orrs	r3, r4
 8002338:	d001      	beq.n	800233e <modify_color_single_rgb_value+0x112>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <modify_color_single_rgb_value+0x114>
 800233e:	2300      	movs	r3, #0
 8002340:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002344:	e9c7 3402 	strd	r3, r4, [r7, #8]
	initialColor = ((initialColor<<16) && bluBrightness);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	141e      	asrs	r6, r3, #16
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	041d      	lsls	r5, r3, #16
 8002350:	ea55 0306 	orrs.w	r3, r5, r6
 8002354:	d005      	beq.n	8002362 <modify_color_single_rgb_value+0x136>
 8002356:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800235a:	4323      	orrs	r3, r4
 800235c:	d001      	beq.n	8002362 <modify_color_single_rgb_value+0x136>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <modify_color_single_rgb_value+0x138>
 8002362:	2300      	movs	r3, #0
 8002364:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002368:	e9c7 3402 	strd	r3, r4, [r7, #8]
		
	return initialColor;	
 800236c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bcf0      	pop	{r4, r5, r6, r7}
 800237a:	4770      	bx	lr

0800237c <array_8x8_set_single>:
 * @param[in] arrayPtr - points to the first element within the given array
 * @param[in] arrayIndex - specifies which element within the given array to be set
 * @param[in] value - the value which the given array element will be set to
 **/
void array_8x8_set_single(uint16_t *arrayPtr, int arrayIndex, uint16_t value)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
	*(arrayPtr + arrayIndex) = value;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4413      	add	r3, r2
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	801a      	strh	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <array_8x8_set_col_segment>:
 * @param[in] startRowNum: a projection, bounded between 0 & 7
 * @param[in] stopRowNum: a projection, bounded between 0 & 7
 * @param[in] value - the value that all elements in the given row segment will be set to
 **/
void array_8x8_set_col_segment(uint16_t *arrayPtr, uint8_t colNum, uint8_t startRowNum, uint8_t stopRowNum, uint16_t value)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	70fb      	strb	r3, [r7, #3]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70bb      	strb	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
	for(uint8_t index=startRowNum;index<=stopRowNum;index++)
 80023ba:	78bb      	ldrb	r3, [r7, #2]
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e00b      	b.n	80023d8 <array_8x8_set_col_segment+0x38>
	{
		*(arrayPtr + colNum + 8*index) = value;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	8b3a      	ldrh	r2, [r7, #24]
 80023d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t index=startRowNum;index<=stopRowNum;index++)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	787b      	ldrb	r3, [r7, #1]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d9ef      	bls.n	80023c0 <array_8x8_set_col_segment+0x20>
	}
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <array_8x8_set_row_segment>:
 * @param[in] startColNum - a projection, bounded between 0 & 7
 * @param[in] stopColNum - a projection, bounded between 0 & 7
 * @param[in] value - the value that all elements in the given row segment will be set to
 **/
void array_8x8_set_row_segment(uint16_t *arrayPtr, uint8_t rowNum, uint8_t startColNum, uint8_t stopColNum, uint16_t value)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	4608      	mov	r0, r1
 80023f4:	4611      	mov	r1, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	70fb      	strb	r3, [r7, #3]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70bb      	strb	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
	for(uint8_t index=startColNum;index<=stopColNum;index++)
 8002404:	78bb      	ldrb	r3, [r7, #2]
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e00c      	b.n	8002424 <array_8x8_set_row_segment+0x3a>
	{
		*(arrayPtr + 8*rowNum + index) = value;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	461a      	mov	r2, r3
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	8b3a      	ldrh	r2, [r7, #24]
 800241c:	801a      	strh	r2, [r3, #0]
	for(uint8_t index=startColNum;index<=stopColNum;index++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	787b      	ldrb	r3, [r7, #1]
 8002428:	429a      	cmp	r2, r3
 800242a:	d9ee      	bls.n	800240a <array_8x8_set_row_segment+0x20>
	}
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <array_8x8_set_square>:
 * @param[in] value - the value that all elements in the given row segment will be set to
 * @param[in] startPt - one corner of the square
 * @param[in] stopPt - the opposing corner of the square
 **/
void array_8x8_set_square(uint16_t *arrayPtr, uint16_t value, uint8_t startPt, uint8_t stopPt)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b088      	sub	sp, #32
 800243a:	af02      	add	r7, sp, #8
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	4608      	mov	r0, r1
 8002440:	4611      	mov	r1, r2
 8002442:	461a      	mov	r2, r3
 8002444:	4603      	mov	r3, r0
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	460b      	mov	r3, r1
 800244a:	707b      	strb	r3, [r7, #1]
 800244c:	4613      	mov	r3, r2
 800244e:	703b      	strb	r3, [r7, #0]
	if(stopPt<startPt)
 8002450:	783a      	ldrb	r2, [r7, #0]
 8002452:	787b      	ldrb	r3, [r7, #1]
 8002454:	429a      	cmp	r2, r3
 8002456:	d205      	bcs.n	8002464 <array_8x8_set_square+0x2e>
	{
		//value swap
		uint8_t tempPt = stopPt;
 8002458:	783b      	ldrb	r3, [r7, #0]
 800245a:	747b      	strb	r3, [r7, #17]
		stopPt = startPt;
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	703b      	strb	r3, [r7, #0]
		startPt = tempPt;
 8002460:	7c7b      	ldrb	r3, [r7, #17]
 8002462:	707b      	strb	r3, [r7, #1]
	}
	
	uint8_t colLength = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
	uint8_t rowLength = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	75bb      	strb	r3, [r7, #22]
	
	uint8_t startPtRowNum = startPt/8;
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	757b      	strb	r3, [r7, #21]
	uint8_t startPtColNum = startPt%8;
 8002472:	787b      	ldrb	r3, [r7, #1]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	753b      	strb	r3, [r7, #20]
	uint8_t stopPtRowNum = stopPt/8;
 800247a:	783b      	ldrb	r3, [r7, #0]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	74fb      	strb	r3, [r7, #19]
	uint8_t stopPtColNum = stopPt%8;
 8002480:	783b      	ldrb	r3, [r7, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	74bb      	strb	r3, [r7, #18]
	
	//if the length % width aren't equal do nothing because its not a square
	
	if(stopPtColNum > startPtColNum) colLength = (stopPtColNum - startPtColNum);
 8002488:	7cba      	ldrb	r2, [r7, #18]
 800248a:	7d3b      	ldrb	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d903      	bls.n	8002498 <array_8x8_set_square+0x62>
 8002490:	7cba      	ldrb	r2, [r7, #18]
 8002492:	7d3b      	ldrb	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	75fb      	strb	r3, [r7, #23]
	if(startPtColNum > stopPtColNum) colLength = (startPtColNum - stopPtColNum);
 8002498:	7d3a      	ldrb	r2, [r7, #20]
 800249a:	7cbb      	ldrb	r3, [r7, #18]
 800249c:	429a      	cmp	r2, r3
 800249e:	d903      	bls.n	80024a8 <array_8x8_set_square+0x72>
 80024a0:	7d3a      	ldrb	r2, [r7, #20]
 80024a2:	7cbb      	ldrb	r3, [r7, #18]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	75fb      	strb	r3, [r7, #23]
	if(stopPtRowNum > startPtRowNum) rowLength = (stopPtRowNum - startPtRowNum);
 80024a8:	7cfa      	ldrb	r2, [r7, #19]
 80024aa:	7d7b      	ldrb	r3, [r7, #21]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d903      	bls.n	80024b8 <array_8x8_set_square+0x82>
 80024b0:	7cfa      	ldrb	r2, [r7, #19]
 80024b2:	7d7b      	ldrb	r3, [r7, #21]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	75bb      	strb	r3, [r7, #22]
	if(startPtRowNum > stopPtRowNum) rowLength = (startPtRowNum - stopPtRowNum);
 80024b8:	7d7a      	ldrb	r2, [r7, #21]
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d903      	bls.n	80024c8 <array_8x8_set_square+0x92>
 80024c0:	7d7a      	ldrb	r2, [r7, #21]
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	75bb      	strb	r3, [r7, #22]
	if((colLength) != (rowLength)) return;
 80024c8:	7dfa      	ldrb	r2, [r7, #23]
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d138      	bne.n	8002542 <array_8x8_set_square+0x10c>
	
	if(startPtColNum > stopPtColNum)
 80024d0:	7d3a      	ldrb	r2, [r7, #20]
 80024d2:	7cbb      	ldrb	r3, [r7, #18]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d905      	bls.n	80024e4 <array_8x8_set_square+0xae>
	{
		uint8_t tempColNum = startPtColNum;
 80024d8:	7d3b      	ldrb	r3, [r7, #20]
 80024da:	743b      	strb	r3, [r7, #16]
		startPtColNum = stopPtColNum;
 80024dc:	7cbb      	ldrb	r3, [r7, #18]
 80024de:	753b      	strb	r3, [r7, #20]
		stopPtColNum = tempColNum;
 80024e0:	7c3b      	ldrb	r3, [r7, #16]
 80024e2:	74bb      	strb	r3, [r7, #18]
	}
	
	if(startPtRowNum > stopPtRowNum)
 80024e4:	7d7a      	ldrb	r2, [r7, #21]
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d905      	bls.n	80024f8 <array_8x8_set_square+0xc2>
	{
		uint8_t tempRowNum = startPtRowNum;
 80024ec:	7d7b      	ldrb	r3, [r7, #21]
 80024ee:	73fb      	strb	r3, [r7, #15]
		startPtRowNum = stopPtRowNum;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	757b      	strb	r3, [r7, #21]
		stopPtRowNum = tempRowNum;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	74fb      	strb	r3, [r7, #19]
	}
	
	array_8x8_set_row_segment(arrayPtr,startPtRowNum,startPtColNum,stopPtColNum, value);
 80024f8:	7cb8      	ldrb	r0, [r7, #18]
 80024fa:	7d3a      	ldrb	r2, [r7, #20]
 80024fc:	7d79      	ldrb	r1, [r7, #21]
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	4603      	mov	r3, r0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff70 	bl	80023ea <array_8x8_set_row_segment>
	array_8x8_set_row_segment(arrayPtr,stopPtRowNum,startPtColNum,stopPtColNum, value);
 800250a:	7cb8      	ldrb	r0, [r7, #18]
 800250c:	7d3a      	ldrb	r2, [r7, #20]
 800250e:	7cf9      	ldrb	r1, [r7, #19]
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4603      	mov	r3, r0
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff67 	bl	80023ea <array_8x8_set_row_segment>
	array_8x8_set_col_segment(arrayPtr,startPtColNum,startPtRowNum,stopPtRowNum, value);
 800251c:	7cf8      	ldrb	r0, [r7, #19]
 800251e:	7d7a      	ldrb	r2, [r7, #21]
 8002520:	7d39      	ldrb	r1, [r7, #20]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4603      	mov	r3, r0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff39 	bl	80023a0 <array_8x8_set_col_segment>
	array_8x8_set_col_segment(arrayPtr,stopPtColNum,startPtRowNum,stopPtRowNum, value);	
 800252e:	7cf8      	ldrb	r0, [r7, #19]
 8002530:	7d7a      	ldrb	r2, [r7, #21]
 8002532:	7cb9      	ldrb	r1, [r7, #18]
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4603      	mov	r3, r0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff30 	bl	80023a0 <array_8x8_set_col_segment>
 8002540:	e000      	b.n	8002544 <array_8x8_set_square+0x10e>
	if((colLength) != (rowLength)) return;
 8002542:	bf00      	nop
}
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <array_8x8_shift_column>:
 * @param[in] arrayPtr - points to the first element of the given 8x8 array
 * @param[in] colNum - indicates which column is to be shifted (0 - 7)
 * @param[in] direction - specify a preprocessor #defined name that corresponds to a direction
 */
void array_8x8_shift_column(uint16_t *arrayPtr, uint8_t colNum, uint8_t direction)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
 8002556:	4613      	mov	r3, r2
 8002558:	70bb      	strb	r3, [r7, #2]
	if (direction == DIRECTION_FORWARD)
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d11c      	bne.n	800259a <array_8x8_shift_column+0x50>
	 {
			for (int index=56+colNum;index>7;index=index-8)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	3338      	adds	r3, #56	; 0x38
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e00f      	b.n	8002588 <array_8x8_shift_column+0x3e>
			{
				*(arrayPtr + index) = *(arrayPtr + index - 8);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800256e:	3b08      	subs	r3, #8
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	441a      	add	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	440b      	add	r3, r1
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	801a      	strh	r2, [r3, #0]
			for (int index=56+colNum;index>7;index=index-8)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b08      	subs	r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b07      	cmp	r3, #7
 800258c:	dcec      	bgt.n	8002568 <array_8x8_shift_column+0x1e>
			}
			array_8x8_set_single(arrayPtr,colNum,0x0000);
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	2200      	movs	r2, #0
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fef1 	bl	800237c <array_8x8_set_single>
	 }
	 
	if (direction == DIRECTION_BACK)
 800259a:	78bb      	ldrb	r3, [r7, #2]
 800259c:	2b06      	cmp	r3, #6
 800259e:	d11a      	bne.n	80025d6 <array_8x8_shift_column+0x8c>
	 {
			for (int index=colNum;index<56;index=index+8)
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e00d      	b.n	80025c2 <array_8x8_shift_column+0x78>
			{
				*(arrayPtr + index) = *(arrayPtr + index + 8);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3308      	adds	r3, #8
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	441a      	add	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	440b      	add	r3, r1
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	801a      	strh	r2, [r3, #0]
			for (int index=colNum;index<56;index=index+8)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3308      	adds	r3, #8
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b37      	cmp	r3, #55	; 0x37
 80025c6:	ddee      	ble.n	80025a6 <array_8x8_shift_column+0x5c>
			}
			array_8x8_set_single(arrayPtr,56+colNum,0x0000);
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	3338      	adds	r3, #56	; 0x38
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fed3 	bl	800237c <array_8x8_set_single>
	 }
	 
	 if (direction == DIRECTION_INWARD)
 80025d6:	78bb      	ldrb	r3, [r7, #2]
 80025d8:	2b07      	cmp	r3, #7
 80025da:	d153      	bne.n	8002684 <array_8x8_shift_column+0x13a>
	 {
		 *(arrayPtr + colNum + 32) = *(arrayPtr + colNum + 40);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	3328      	adds	r3, #40	; 0x28
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	441a      	add	r2, r3
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	3320      	adds	r3, #32
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	440b      	add	r3, r1
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 40) = *(arrayPtr + colNum + 48);
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	3330      	adds	r3, #48	; 0x30
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	441a      	add	r2, r3
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	3328      	adds	r3, #40	; 0x28
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	440b      	add	r3, r1
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 48) = *(arrayPtr + colNum + 56);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	3338      	adds	r3, #56	; 0x38
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	441a      	add	r2, r3
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	3330      	adds	r3, #48	; 0x30
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	440b      	add	r3, r1
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 56) = 0x0000;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	2200      	movs	r2, #0
 8002630:	801a      	strh	r2, [r3, #0]
		 // --------------- symmetry line---------------------//
		 *(arrayPtr + colNum + 24) = *(arrayPtr + colNum + 16);
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	3310      	adds	r3, #16
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	441a      	add	r2, r3
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	3318      	adds	r3, #24
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	440b      	add	r3, r1
 8002646:	8812      	ldrh	r2, [r2, #0]
 8002648:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 16) = *(arrayPtr + colNum + 8);
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	3308      	adds	r3, #8
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	441a      	add	r2, r3
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	3310      	adds	r3, #16
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	440b      	add	r3, r1
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 8) = *(arrayPtr + colNum + 0);
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	441a      	add	r2, r3
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	3308      	adds	r3, #8
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	440b      	add	r3, r1
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 0) = 0x000;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	2200      	movs	r2, #0
 8002682:	801a      	strh	r2, [r3, #0]
	 }
	 
	 if (direction == DIRECTION_OUTWARD)
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d154      	bne.n	8002734 <array_8x8_shift_column+0x1ea>
	 {
		 *(arrayPtr + colNum + 56) = *(arrayPtr + colNum + 48);
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	3330      	adds	r3, #48	; 0x30
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	441a      	add	r2, r3
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	3338      	adds	r3, #56	; 0x38
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	440b      	add	r3, r1
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 48) = *(arrayPtr + colNum + 40);
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	3328      	adds	r3, #40	; 0x28
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	441a      	add	r2, r3
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	3330      	adds	r3, #48	; 0x30
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	440b      	add	r3, r1
 80026b6:	8812      	ldrh	r2, [r2, #0]
 80026b8:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 40) = *(arrayPtr + colNum + 32);
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	3320      	adds	r3, #32
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	441a      	add	r2, r3
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	3328      	adds	r3, #40	; 0x28
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	440b      	add	r3, r1
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 32) = 0x0000;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	3320      	adds	r3, #32
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	2200      	movs	r2, #0
 80026de:	801a      	strh	r2, [r3, #0]
		 // --------------- symmetry line---------------------//
		 *(arrayPtr + colNum + 0) = *(arrayPtr + colNum + 8);
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	3308      	adds	r3, #8
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	441a      	add	r2, r3
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	440b      	add	r3, r1
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 8) = *(arrayPtr + colNum + 16);
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	3310      	adds	r3, #16
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	441a      	add	r2, r3
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	3308      	adds	r3, #8
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	440b      	add	r3, r1
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 16) = *(arrayPtr + colNum + 24);
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	3318      	adds	r3, #24
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	441a      	add	r2, r3
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	3310      	adds	r3, #16
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	440b      	add	r3, r1
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + colNum + 24) = 0x0000;		 
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	3318      	adds	r3, #24
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
	 }
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <array_8x8_shift_row>:
 * @param[in] arrayPtr - points to the first element of the given 8x8 array
 * @param[in] rowNum - indicates which row is to be shifted (0 - 7)
 * @param[in] direction - the desired shift direction
 */
void array_8x8_shift_row(uint16_t *arrayPtr, uint8_t rowNum, uint8_t direction)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
 8002748:	4613      	mov	r3, r2
 800274a:	70bb      	strb	r3, [r7, #2]
	if (direction == DIRECTION_RIGHT)
 800274c:	78bb      	ldrb	r3, [r7, #2]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d120      	bne.n	8002794 <array_8x8_shift_row+0x58>
	 {
			for (int index=((8*rowNum)+7);index>(8*rowNum);index--)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	3307      	adds	r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e00f      	b.n	800277c <array_8x8_shift_row+0x40>
			{
				*(arrayPtr + index) = *(arrayPtr + index - 1);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002762:	3b01      	subs	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	441a      	add	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	440b      	add	r3, r1
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	801a      	strh	r2, [r3, #0]
			for (int index=((8*rowNum)+7);index>(8*rowNum);index--)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b01      	subs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	429a      	cmp	r2, r3
 8002784:	dcea      	bgt.n	800275c <array_8x8_shift_row+0x20>
			}
			array_8x8_set_single(arrayPtr,8*rowNum,0x0000);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fdf4 	bl	800237c <array_8x8_set_single>
	 }
	
	if (direction == DIRECTION_LEFT)
 8002794:	78bb      	ldrb	r3, [r7, #2]
 8002796:	2b04      	cmp	r3, #4
 8002798:	d11f      	bne.n	80027da <array_8x8_shift_row+0x9e>
	 {
			for (int index=(8*rowNum);index<8*rowNum+7;index++)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	e00d      	b.n	80027be <array_8x8_shift_row+0x82>
			{
				*(arrayPtr + index) = *(arrayPtr + index + 1);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	441a      	add	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	440b      	add	r3, r1
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	801a      	strh	r2, [r3, #0]
			for (int index=(8*rowNum);index<8*rowNum+7;index++)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3307      	adds	r3, #7
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbeb      	blt.n	80027a2 <array_8x8_shift_row+0x66>
			}
			array_8x8_set_single(arrayPtr,8*rowNum+7,0x0000);
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	3307      	adds	r3, #7
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fdd1 	bl	800237c <array_8x8_set_single>
	 }
	 
		 if (direction == DIRECTION_INWARD)
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	d155      	bne.n	800288c <array_8x8_shift_row+0x150>
	 {
		 *(arrayPtr + (8*rowNum) + 3) = *(arrayPtr + (8*rowNum) + 2);
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	3304      	adds	r3, #4
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	441a      	add	r2, r3
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3306      	adds	r3, #6
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	440b      	add	r3, r1
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 2) = *(arrayPtr + (8*rowNum) + 1);
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	3302      	adds	r3, #2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	441a      	add	r2, r3
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	3304      	adds	r3, #4
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	440b      	add	r3, r1
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 1) = *(arrayPtr + (8*rowNum) + 0);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	441a      	add	r2, r3
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	3302      	adds	r3, #2
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	440b      	add	r3, r1
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 0) = 0x0000;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]
		 // --------------- symmetry line---------------------//
		 *(arrayPtr + (8*rowNum) + 4) = *(arrayPtr + (8*rowNum) + 5);
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	330a      	adds	r3, #10
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	441a      	add	r2, r3
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	3308      	adds	r3, #8
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	440b      	add	r3, r1
 800284a:	8812      	ldrh	r2, [r2, #0]
 800284c:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 5) = *(arrayPtr + (8*rowNum) + 6);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	330c      	adds	r3, #12
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	441a      	add	r2, r3
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	330a      	adds	r3, #10
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	440b      	add	r3, r1
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 6) = *(arrayPtr + (8*rowNum) + 7);
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	330e      	adds	r3, #14
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	441a      	add	r2, r3
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	330c      	adds	r3, #12
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	440b      	add	r3, r1
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 7) = 0x0000;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	330e      	adds	r3, #14
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	2200      	movs	r2, #0
 800288a:	801a      	strh	r2, [r3, #0]
	 }
	 
	 if (direction == DIRECTION_OUTWARD)
 800288c:	78bb      	ldrb	r3, [r7, #2]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d155      	bne.n	800293e <array_8x8_shift_row+0x202>
	 {
		 *(arrayPtr + (8*rowNum) + 0) = *(arrayPtr + (8*rowNum) + 1);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3302      	adds	r3, #2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	441a      	add	r2, r3
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	440b      	add	r3, r1
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 1) = *(arrayPtr + (8*rowNum) + 2);
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3304      	adds	r3, #4
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	441a      	add	r2, r3
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3302      	adds	r3, #2
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	440b      	add	r3, r1
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 2) = *(arrayPtr + (8*rowNum) + 3);
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	3306      	adds	r3, #6
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	441a      	add	r2, r3
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	3304      	adds	r3, #4
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	440b      	add	r3, r1
 80028d6:	8812      	ldrh	r2, [r2, #0]
 80028d8:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 3) = 0x0000;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3306      	adds	r3, #6
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	2200      	movs	r2, #0
 80028e6:	801a      	strh	r2, [r3, #0]
		 // --------------- symmetry line---------------------//
		 *(arrayPtr + (8*rowNum) + 7) = *(arrayPtr + (8*rowNum) + 6);
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	330c      	adds	r3, #12
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	441a      	add	r2, r3
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	330e      	adds	r3, #14
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	440b      	add	r3, r1
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 6) = *(arrayPtr + (8*rowNum) + 5);
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	330a      	adds	r3, #10
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	441a      	add	r2, r3
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	330c      	adds	r3, #12
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	440b      	add	r3, r1
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 5) = *(arrayPtr + (8*rowNum) + 4);
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	3308      	adds	r3, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	441a      	add	r2, r3
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	330a      	adds	r3, #10
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	440b      	add	r3, r1
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	801a      	strh	r2, [r3, #0]
		 *(arrayPtr + (8*rowNum) + 4) = 0x0000;		 
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3308      	adds	r3, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	2200      	movs	r2, #0
 800293c:	801a      	strh	r2, [r3, #0]
	 }
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <bool_mask_copy>:
	for(tempIndex=0;tempIndex<BOOL_MASK_LENGTH;tempIndex++)
		*(boolMaskPtr + tempIndex) = false;
}	
										
void bool_mask_copy(bool* originalBoolMaskPtr,bool* copyBoolMaskPtr)		
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
	int tempIndex = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
	for(tempIndex=0;tempIndex<BOOL_MASK_LENGTH;tempIndex++)
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e00a      	b.n	8002970 <bool_mask_copy+0x2a>
		*(copyBoolMaskPtr + tempIndex) = *(originalBoolMaskPtr + tempIndex);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	441a      	add	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	440b      	add	r3, r1
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
	for(tempIndex=0;tempIndex<BOOL_MASK_LENGTH;tempIndex++)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b3f      	cmp	r3, #63	; 0x3f
 8002974:	ddf1      	ble.n	800295a <bool_mask_copy+0x14>
}	
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <lcd20x4_i2c_sendCommand>:



/* Private functions */
static void lcd20x4_i2c_sendCommand(uint8_t command)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f023 030f 	bic.w	r3, r3, #15
 8002996:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	f043 030c 	orr.w	r3, r3, #12
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	723b      	strb	r3, [r7, #8]
 80029a2:	7bbb      	ldrb	r3, [r7, #14]
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	727b      	strb	r3, [r7, #9]
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	f043 030c 	orr.w	r3, r3, #12
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	72bb      	strb	r3, [r7, #10]
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <lcd20x4_i2c_sendCommand+0x60>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <lcd20x4_i2c_sendCommand+0x64>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b299      	uxth	r1, r3
 80029ca:	f107 0208 	add.w	r2, r7, #8
 80029ce:	23c8      	movs	r3, #200	; 0xc8
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2304      	movs	r3, #4
 80029d4:	f003 f9d6 	bl	8005d84 <HAL_I2C_Master_Transmit>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200006c8 	.word	0x200006c8
 80029e4:	200006cc 	.word	0x200006cc

080029e8 <lcd20x4_i2c_sendData>:

static void lcd20x4_i2c_sendData(uint8_t data)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f023 030f 	bic.w	r3, r3, #15
 80029fe:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8002a00:	7bbb      	ldrb	r3, [r7, #14]
 8002a02:	f043 030d 	orr.w	r3, r3, #13
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	723b      	strb	r3, [r7, #8]
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	f043 0309 	orr.w	r3, r3, #9
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	727b      	strb	r3, [r7, #9]
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	f043 030d 	orr.w	r3, r3, #13
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	72bb      	strb	r3, [r7, #10]
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	f043 0309 	orr.w	r3, r3, #9
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <lcd20x4_i2c_sendData+0x60>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <lcd20x4_i2c_sendData+0x64>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b299      	uxth	r1, r3
 8002a32:	f107 0208 	add.w	r2, r7, #8
 8002a36:	23c8      	movs	r3, #200	; 0xc8
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	f003 f9a2 	bl	8005d84 <HAL_I2C_Master_Transmit>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200006c8 	.word	0x200006c8
 8002a4c:	200006cc 	.word	0x200006cc

08002a50 <lcd20x4_i2c_init>:
/**
 * @brief Initialise LCD20x4
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd20x4_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8002a58:	2032      	movs	r0, #50	; 0x32
 8002a5a:	f002 fd99 	bl	8005590 <HAL_Delay>
  lcd20x4_i2cHandle = pI2cHandle;
 8002a5e:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <lcd20x4_i2c_init+0xd0>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <lcd20x4_i2c_init+0xd0>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	214e      	movs	r1, #78	; 0x4e
 8002a70:	f003 fcbc 	bl	80063ec <HAL_I2C_IsDeviceReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <lcd20x4_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd20x4_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <lcd20x4_i2c_init+0xd0>)
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a82:	2205      	movs	r2, #5
 8002a84:	217e      	movs	r1, #126	; 0x7e
 8002a86:	f003 fcb1 	bl	80063ec <HAL_I2C_IsDeviceReady>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <lcd20x4_i2c_init+0x44>
    {
      return false;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e040      	b.n	8002b16 <lcd20x4_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <lcd20x4_i2c_init+0xd4>)
 8002a96:	227e      	movs	r2, #126	; 0x7e
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e002      	b.n	8002aa2 <lcd20x4_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <lcd20x4_i2c_init+0xd4>)
 8002a9e:	224e      	movs	r2, #78	; 0x4e
 8002aa0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8002aa2:	202d      	movs	r0, #45	; 0x2d
 8002aa4:	f002 fd74 	bl	8005590 <HAL_Delay>
  //2. Attentions sequence
  lcd20x4_i2c_sendCommand(0x30);
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff69 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(5);
 8002aae:	2005      	movs	r0, #5
 8002ab0:	f002 fd6e 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x30);
 8002ab4:	2030      	movs	r0, #48	; 0x30
 8002ab6:	f7ff ff63 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f002 fd68 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x30);
 8002ac0:	2030      	movs	r0, #48	; 0x30
 8002ac2:	f7ff ff5d 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(8);
 8002ac6:	2008      	movs	r0, #8
 8002ac8:	f002 fd62 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x20);
 8002acc:	2020      	movs	r0, #32
 8002ace:	f7ff ff57 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(8);
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f002 fd5c 	bl	8005590 <HAL_Delay>

  lcd20x4_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8002ad8:	2028      	movs	r0, #40	; 0x28
 8002ada:	f7ff ff51 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f002 fd56 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8002ae4:	2008      	movs	r0, #8
 8002ae6:	f7ff ff4b 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f002 fd50 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_CLEARDISPLAY);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7ff ff45 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 8002af6:	2003      	movs	r0, #3
 8002af8:	f002 fd4a 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8002afc:	2006      	movs	r0, #6
 8002afe:	f7ff ff3f 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f002 fd44 	bl	8005590 <HAL_Delay>
  lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8002b08:	200c      	movs	r0, #12
 8002b0a:	f7ff ff39 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f002 fd3e 	bl	8005590 <HAL_Delay>

  return true;
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200006c8 	.word	0x200006c8
 8002b24:	200006cc 	.word	0x200006cc

08002b28 <lcd20x4_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 - 3 (4 row LCD)
 * @param[in] col - 0 - 19 (20 column LCD)
 */
void lcd20x4_i2c_setCursor(uint8_t row, uint8_t col)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	460a      	mov	r2, r1
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8002b38:	79bb      	ldrb	r3, [r7, #6]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <lcd20x4_i2c_setCursor+0x2e>
  {
    maskData |= (0x80);
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b4c:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff15 	bl	8002980 <lcd20x4_i2c_sendCommand>
  }
  if(row==1)
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <lcd20x4_i2c_setCursor+0x44>
  {
    maskData |= (0xC0);
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002b62:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff0a 	bl	8002980 <lcd20x4_i2c_sendCommand>
  }
  if(row==2)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d107      	bne.n	8002b82 <lcd20x4_i2c_setCursor+0x5a>
  {
    maskData |= (0x94);
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	f063 036b 	orn	r3, r3, #107	; 0x6b
 8002b78:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff feff 	bl	8002980 <lcd20x4_i2c_sendCommand>
  }
  if(row==3)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d107      	bne.n	8002b98 <lcd20x4_i2c_setCursor+0x70>
  {
    maskData |= (0xD4);
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	f063 032b 	orn	r3, r3, #43	; 0x2b
 8002b8e:	73fb      	strb	r3, [r7, #15]
    lcd20x4_i2c_sendCommand(maskData);
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fef4 	bl	8002980 <lcd20x4_i2c_sendCommand>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <lcd20x4_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd20x4_i2c_1stLine(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  lcd20x4_i2c_setCursor(0,0);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7ff ffbe 	bl	8002b28 <lcd20x4_i2c_setCursor>
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <lcd20x4_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd20x4_i2c_2ndLine(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  lcd20x4_i2c_setCursor(1,0);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7ff ffb6 	bl	8002b28 <lcd20x4_i2c_setCursor>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <lcd20x4_i2c_3rdLine>:
/**
 * @brief Move to beginning of 3rd line
 */
void lcd20x4_i2c_3rdLine(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  lcd20x4_i2c_setCursor(2,0);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f7ff ffae 	bl	8002b28 <lcd20x4_i2c_setCursor>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <lcd20x4_i2c_4thLine>:
/**
 * @brief Move to beginning of 4th line
 */
void lcd20x4_i2c_4thLine(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  lcd20x4_i2c_setCursor(3,0);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f7ff ffa6 	bl	8002b28 <lcd20x4_i2c_setCursor>
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <lcd20x4_i2c_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd20x4_i2c_cursorShow(bool state)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if(state)
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <lcd20x4_i2c_cursorShow+0x18>
  {
    lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8002bf0:	200f      	movs	r0, #15
 8002bf2:	f7ff fec5 	bl	8002980 <lcd20x4_i2c_sendCommand>
  }
  else
  {
    lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
  }
}
 8002bf6:	e002      	b.n	8002bfe <lcd20x4_i2c_cursorShow+0x1e>
    lcd20x4_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8002bf8:	200c      	movs	r0, #12
 8002bfa:	f7ff fec1 	bl	8002980 <lcd20x4_i2c_sendCommand>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <lcd20x4_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd20x4_i2c_clear(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
  lcd20x4_i2c_sendCommand(LCD_CLEARDISPLAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff feb8 	bl	8002980 <lcd20x4_i2c_sendCommand>
  HAL_Delay(3);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f002 fcbd 	bl	8005590 <HAL_Delay>
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <lcd20x4_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd20x4_i2c_printf(const char* str, ...)
{
 8002c1a:	b40f      	push	{r0, r1, r2, r3}
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8002c22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c26:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c30:	4618      	mov	r0, r3
 8002c32:	f006 f823 	bl	8008c7c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<20; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	77fb      	strb	r3, [r7, #31]
 8002c3a:	e00b      	b.n	8002c54 <lcd20x4_i2c_printf+0x3a>
  {
    lcd20x4_i2c_sendData((uint8_t)stringArray[i]);
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
 8002c3e:	f107 0220 	add.w	r2, r7, #32
 8002c42:	4413      	add	r3, r2
 8002c44:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fecd 	bl	80029e8 <lcd20x4_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<20; i++)
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	3301      	adds	r3, #1
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	7ffc      	ldrb	r4, [r7, #31]
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fa76 	bl	800014c <strlen>
 8002c60:	4603      	mov	r3, r0
 8002c62:	429c      	cmp	r4, r3
 8002c64:	d202      	bcs.n	8002c6c <lcd20x4_i2c_printf+0x52>
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b13      	cmp	r3, #19
 8002c6a:	d9e7      	bls.n	8002c3c <lcd20x4_i2c_printf+0x22>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3724      	adds	r7, #36	; 0x24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c76:	b004      	add	sp, #16
 8002c78:	4770      	bx	lr
	...

08002c7c <lyr_frame_convert>:
 * @brief merges the lyrFrame separate R/G/B 8x8 arrays into data16 which is the data transmitted to the TLCs 
 * @param[in] lyrFrame - the lyrFrame of interest
 * @param[in] data16Ptr - a pointer to the array of data which is sent to the TLC
 */
void lyr_frame_convert(LyrFrame_TypeDef lyrFrame,uint16_t *data16Ptr)
{
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	f107 0c10 	add.w	ip, r7, #16
 8002c88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int index=0;index<64;index++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	e02f      	b.n	8002cf2 <lyr_frame_convert+0x76>
	{
		*(data16Ptr + redMap[index]) = lyrFrame.redArray[index];
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <lyr_frame_convert+0x88>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ca0:	4413      	add	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	f107 0110 	add.w	r1, r7, #16
 8002ca8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002cac:	801a      	strh	r2, [r3, #0]
		*(data16Ptr + grnMap[index]) = lyrFrame.grnArray[index];
 8002cae:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <lyr_frame_convert+0x8c>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3340      	adds	r3, #64	; 0x40
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	f107 0110 	add.w	r1, r7, #16
 8002cc8:	440b      	add	r3, r1
 8002cca:	889b      	ldrh	r3, [r3, #4]
 8002ccc:	8013      	strh	r3, [r2, #0]
		*(data16Ptr + bluMap[index]) = lyrFrame.bluArray[index];
 8002cce:	4a0f      	ldr	r2, [pc, #60]	; (8002d0c <lyr_frame_convert+0x90>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002cdc:	4413      	add	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	3284      	adds	r2, #132	; 0x84
 8002ce2:	f107 0110 	add.w	r1, r7, #16
 8002ce6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002cea:	801a      	strh	r2, [r3, #0]
	for(int index=0;index<64;index++)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b3f      	cmp	r3, #63	; 0x3f
 8002cf6:	ddcc      	ble.n	8002c92 <lyr_frame_convert+0x16>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	b004      	add	sp, #16
 8002d02:	4770      	bx	lr
 8002d04:	200002e8 	.word	0x200002e8
 8002d08:	200003e8 	.word	0x200003e8
 8002d0c:	200004e8 	.word	0x200004e8

08002d10 <lyr_frame_clear_all>:
/**
 * @brief clear the given lyrFrame
 * @param[in] lyrFrame - a struct of the RGB values for a horizontal slice of the 3D frame
 */
void lyr_frame_clear_all(LyrFrame_TypeDef lyrFrame)
{
 8002d10:	b084      	sub	sp, #16
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	f107 0c10 	add.w	ip, r7, #16
 8002d1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int index=0;index<64;index++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	e017      	b.n	8002d56 <lyr_frame_clear_all+0x46>
	{
		*(lyrFrame.redArrPtr + index) = 0x0000;
 8002d26:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]
		*(lyrFrame.grnArrPtr + index) = 0x0000;
 8002d34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
		*(lyrFrame.bluArrPtr + index) = 0x0000;
 8002d42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
	for(int index=0;index<64;index++)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b3f      	cmp	r3, #63	; 0x3f
 8002d5a:	dde4      	ble.n	8002d26 <lyr_frame_clear_all+0x16>
	}
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	b004      	add	sp, #16
 8002d66:	4770      	bx	lr

08002d68 <lyr_frame_set_single_color>:
 * @param[in] color - an RGB color in the format 0x00000RRR0GGG0BBB
 * @param[in] ledNum - a number of the a corresponding LED in the lyrframe
 * example usage: lyr_frame_set_single(frame1.lyr0,white,27);
 */
void lyr_frame_set_single_color(LyrFrame_TypeDef lyrFrame, uint64_t color, uint8_t ledNum)
{
 8002d68:	b084      	sub	sp, #16
 8002d6a:	b490      	push	{r4, r7}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	f107 0410 	add.w	r4, r7, #16
 8002d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t redBrightness = (color>>32);
 8002d78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d7c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	0013      	movs	r3, r2
 8002d8a:	2400      	movs	r4, #0
 8002d8c:	80fb      	strh	r3, [r7, #6]
	uint16_t grnBrightness = (color>>16);
 8002d8e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f04f 0400 	mov.w	r4, #0
 8002d9e:	0c0b      	lsrs	r3, r1, #16
 8002da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002da4:	0c14      	lsrs	r4, r2, #16
 8002da6:	80bb      	strh	r3, [r7, #4]
	uint16_t bluBrightness = (color>>0);
 8002da8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	807b      	strh	r3, [r7, #2]
	*(lyrFrame.redArrPtr + ledNum) = redBrightness;
 8002db0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002db4:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	801a      	strh	r2, [r3, #0]
	*(lyrFrame.grnArrPtr + ledNum) = grnBrightness;
 8002dc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002dc4:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	88ba      	ldrh	r2, [r7, #4]
 8002dce:	801a      	strh	r2, [r3, #0]
	*(lyrFrame.bluArrPtr + ledNum) = bluBrightness;
 8002dd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dd4:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	887a      	ldrh	r2, [r7, #2]
 8002dde:	801a      	strh	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc90      	pop	{r4, r7}
 8002de8:	b004      	add	sp, #16
 8002dea:	4770      	bx	lr

08002dec <lyr_frame_set_single_rgb>:
 * @param[in] brightness - the intensity of a single R/G/B of an LED
 * @param[in] boolMaskPtr - points to the first element of a boolMask, which is used to initialize a lyrFrame array
 * example usage: lyr_frame_set_single_rgb(lyr0.redArrPtr, 4095, mask0);
 */
void lyr_frame_set_single_rgb(uint16_t *arrayPtr, uint16_t brightness, bool *boolMaskPtr)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	460b      	mov	r3, r1
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	817b      	strh	r3, [r7, #10]
	for (int arrayIndex=0;arrayIndex<64;arrayIndex++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00e      	b.n	8002e1e <lyr_frame_set_single_rgb+0x32>
	{
		if (*(boolMaskPtr + arrayIndex) == true)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <lyr_frame_set_single_rgb+0x2c>
		{
			*(arrayPtr + arrayIndex) = brightness;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	897a      	ldrh	r2, [r7, #10]
 8002e16:	801a      	strh	r2, [r3, #0]
	for (int arrayIndex=0;arrayIndex<64;arrayIndex++)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b3f      	cmp	r3, #63	; 0x3f
 8002e22:	dded      	ble.n	8002e00 <lyr_frame_set_single_rgb+0x14>
		}
	}
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <lyr_frame_set_color>:
 * @param[in] color - an RGB color in the format 0x00000RRR0GGG0BBB
 * @param[in] mask - corresponds to an 8x8 array that specifies which LEDs will be set the given color
 * example usage: lyr_frame_set_color(frame1.lyr0,yellow,mask2);
 */
void lyr_frame_set_color(LyrFrame_TypeDef lyrFrame,uint64_t color, bool mask[64])
{
 8002e2e:	b084      	sub	sp, #16
 8002e30:	b490      	push	{r4, r7}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	f107 0418 	add.w	r4, r7, #24
 8002e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// color takes form 0x00000RRR0GGG0BBB
	uint16_t redBrightness = (color>>32);
 8002e3e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e42:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	f04f 0400 	mov.w	r4, #0
 8002e4e:	0013      	movs	r3, r2
 8002e50:	2400      	movs	r4, #0
 8002e52:	817b      	strh	r3, [r7, #10]
	uint16_t grnBrightness = (color>>16);
 8002e54:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e58:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0c0b      	lsrs	r3, r1, #16
 8002e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e6a:	0c14      	lsrs	r4, r2, #16
 8002e6c:	813b      	strh	r3, [r7, #8]
	uint16_t bluBrightness = (color>>0);
 8002e6e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	80fb      	strh	r3, [r7, #6]
	

	for(int index=0;index<64;index++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01e      	b.n	8002eba <lyr_frame_set_color+0x8c>
	{
		if ( mask[index] == 1)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <lyr_frame_set_color+0x86>
		{
			*(lyrFrame.redArrPtr + index) = redBrightness;
 8002e8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	897a      	ldrh	r2, [r7, #10]
 8002e96:	801a      	strh	r2, [r3, #0]
			*(lyrFrame.grnArrPtr + index) = grnBrightness;
 8002e98:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	893a      	ldrh	r2, [r7, #8]
 8002ea4:	801a      	strh	r2, [r3, #0]
			*(lyrFrame.bluArrPtr + index) = bluBrightness;
 8002ea6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	801a      	strh	r2, [r3, #0]
	for(int index=0;index<64;index++)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8002ebe:	dddd      	ble.n	8002e7c <lyr_frame_set_color+0x4e>
			//*(lyrFrame.grnArrPtr + index) = 0x0000;
			//*(lyrFrame.bluArrPtr + index) = 0x0000;
		}
		
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc90      	pop	{r4, r7}
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr

08002ecc <lyrframe_set_square>:
 * @param[in] color - an RGB color in the format 0x00000RRR0GGG0BBB
 * @param[in] startPt - one corner of the square
 * @param[in] stopPt - the opposing corner of the square
 */
void lyrframe_set_square(LyrFrame_TypeDef lyrFrame, uint64_t color, uint8_t startPt, uint8_t stopPt)
{
 8002ecc:	b084      	sub	sp, #16
 8002ece:	b590      	push	{r4, r7, lr}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	f107 0418 	add.w	r4, r7, #24
 8002ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// color takes form 0x00000RRR0GGG0BBB
	uint16_t redBrightness = (color>>32);
 8002edc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ee0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	0013      	movs	r3, r2
 8002eee:	2400      	movs	r4, #0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	uint16_t grnBrightness = (color>>16);
 8002ef2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ef6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	0c0b      	lsrs	r3, r1, #16
 8002f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f08:	0c14      	lsrs	r4, r2, #16
 8002f0a:	80bb      	strh	r3, [r7, #4]
	uint16_t bluBrightness = (color>>0);
 8002f0c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	807b      	strh	r3, [r7, #2]
	
	array_8x8_set_square(lyrFrame.redArrPtr, redBrightness, startPt, stopPt);
 8002f14:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002f18:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8002f1c:	f897 21b0 	ldrb.w	r2, [r7, #432]	; 0x1b0
 8002f20:	88f9      	ldrh	r1, [r7, #6]
 8002f22:	f7ff fa88 	bl	8002436 <array_8x8_set_square>
	array_8x8_set_square(lyrFrame.grnArrPtr, grnBrightness, startPt, stopPt);
 8002f26:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002f2a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8002f2e:	f897 21b0 	ldrb.w	r2, [r7, #432]	; 0x1b0
 8002f32:	88b9      	ldrh	r1, [r7, #4]
 8002f34:	f7ff fa7f 	bl	8002436 <array_8x8_set_square>
	array_8x8_set_square(lyrFrame.bluArrPtr, bluBrightness, startPt, stopPt);
 8002f38:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8002f3c:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8002f40:	f897 21b0 	ldrb.w	r2, [r7, #432]	; 0x1b0
 8002f44:	8879      	ldrh	r1, [r7, #2]
 8002f46:	f7ff fa76 	bl	8002436 <array_8x8_set_square>
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002f54:	b004      	add	sp, #16
 8002f56:	4770      	bx	lr

08002f58 <lyr_frame_shift_column>:
 * @param[in] colNum - indicates which column is to be shifted (0 - 7)
 * @param[in] direction - specify a preprocessor #defined name that corresponds to a direction
 * example usage: lyr_frame_shift_column(frame1.lyr0, 7, DIRECTION_RIGHT);
 */
void lyr_frame_shift_column(LyrFrame_TypeDef lyrFrame, uint8_t colNum, uint8_t direction)
{
 8002f58:	b084      	sub	sp, #16
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	f107 0c08 	add.w	ip, r7, #8
 8002f62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	array_8x8_shift_column(lyrFrame.redArrPtr, colNum, direction);
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f6a:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002f6e:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fae9 	bl	800254a <array_8x8_shift_column>
	array_8x8_shift_column(lyrFrame.grnArrPtr, colNum, direction);
 8002f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7c:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002f80:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fae0 	bl	800254a <array_8x8_shift_column>
	array_8x8_shift_column(lyrFrame.bluArrPtr, colNum, direction);
 8002f8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f8e:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002f92:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fad7 	bl	800254a <array_8x8_shift_column>
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fa4:	b004      	add	sp, #16
 8002fa6:	4770      	bx	lr

08002fa8 <lyr_frame_shift_row>:
 * @param[in] rowNum - indicates which row is to be shifted (0 - 7)
 * @param[in] direction - specify a preprocessor #defined name that corresponds to a direction
 * example usage: lyr_frame_shift_row(frame1.lyr0, 0, DIRECTION_RIGHT);
 */
void lyr_frame_shift_row(LyrFrame_TypeDef lyrFrame, uint8_t rowNum, uint8_t direction)
{
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	f107 0c08 	add.w	ip, r7, #8
 8002fb2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	array_8x8_shift_row(lyrFrame.redArrPtr, rowNum, direction);
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002fbe:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fbba 	bl	800273c <array_8x8_shift_row>
	array_8x8_shift_row(lyrFrame.grnArrPtr, rowNum, direction);
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fcc:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002fd0:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fbb1 	bl	800273c <array_8x8_shift_row>
	array_8x8_shift_row(lyrFrame.bluArrPtr, rowNum, direction);
 8002fda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fde:	f897 2198 	ldrb.w	r2, [r7, #408]	; 0x198
 8002fe2:	f897 1194 	ldrb.w	r1, [r7, #404]	; 0x194
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fba8 	bl	800273c <array_8x8_shift_row>
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ff4:	b004      	add	sp, #16
 8002ff6:	4770      	bx	lr

08002ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	f6ad 5d64 	subw	sp, sp, #3428	; 0xd64
 8002ffe:	f44f 6745 	mov.w	r7, #3152	; 0xc50
 8003002:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003004:	f002 fa62 	bl	80054cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003008:	f000 f972 	bl	80032f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800300c:	f000 fb4a 	bl	80036a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003010:	f000 f9c0 	bl	8003394 <MX_I2C1_Init>
  MX_RTC_Init();
 8003014:	f000 f9ec 	bl	80033f0 <MX_RTC_Init>
  MX_SPI1_Init();
 8003018:	f000 fa06 	bl	8003428 <MX_SPI1_Init>
  MX_TIM1_Init();
 800301c:	f000 fa3a 	bl	8003494 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003020:	f000 fabc 	bl	800359c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003024:	f000 fb14 	bl	8003650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	

	//I can't decide if I want to pass a generic menu into init function like the last 3 or not. Each init function is so specific..
	MainMenuInit();
 8003028:	f000 feae 	bl	8003d88 <MainMenuInit>
	AnimationMenu = AnimationMenuInit(AnimationMenu);
 800302c:	4ea1      	ldr	r6, [pc, #644]	; (80032b4 <main+0x2bc>)
 800302e:	463d      	mov	r5, r7
 8003030:	4ca0      	ldr	r4, [pc, #640]	; (80032b4 <main+0x2bc>)
 8003032:	4668      	mov	r0, sp
 8003034:	f104 030c 	add.w	r3, r4, #12
 8003038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800303c:	4619      	mov	r1, r3
 800303e:	f005 fdf3 	bl	8008c28 <memcpy>
 8003042:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003046:	4628      	mov	r0, r5
 8003048:	f000 ff04 	bl	8003e54 <AnimationMenuInit>
 800304c:	463b      	mov	r3, r7
 800304e:	4630      	mov	r0, r6
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003056:	461a      	mov	r2, r3
 8003058:	f005 fde6 	bl	8008c28 <memcpy>
	PinMappingMenu = PinMappingMenuInit(PinMappingMenu);
 800305c:	4e96      	ldr	r6, [pc, #600]	; (80032b8 <main+0x2c0>)
 800305e:	463d      	mov	r5, r7
 8003060:	4c95      	ldr	r4, [pc, #596]	; (80032b8 <main+0x2c0>)
 8003062:	4668      	mov	r0, sp
 8003064:	f104 030c 	add.w	r3, r4, #12
 8003068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800306c:	4619      	mov	r1, r3
 800306e:	f005 fddb 	bl	8008c28 <memcpy>
 8003072:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003076:	4628      	mov	r0, r5
 8003078:	f000 ff88 	bl	8003f8c <PinMappingMenuInit>
 800307c:	463b      	mov	r3, r7
 800307e:	4630      	mov	r0, r6
 8003080:	4619      	mov	r1, r3
 8003082:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003086:	461a      	mov	r2, r3
 8003088:	f005 fdce 	bl	8008c28 <memcpy>
	ActiveAnimationMenu = ActiveAnimationMenuInit(ActiveAnimationMenu);
 800308c:	4e8b      	ldr	r6, [pc, #556]	; (80032bc <main+0x2c4>)
 800308e:	463d      	mov	r5, r7
 8003090:	4c8a      	ldr	r4, [pc, #552]	; (80032bc <main+0x2c4>)
 8003092:	4668      	mov	r0, sp
 8003094:	f104 030c 	add.w	r3, r4, #12
 8003098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800309c:	4619      	mov	r1, r3
 800309e:	f005 fdc3 	bl	8008c28 <memcpy>
 80030a2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 ffec 	bl	8004084 <ActiveAnimationMenuInit>
 80030ac:	463b      	mov	r3, r7
 80030ae:	4630      	mov	r0, r6
 80030b0:	4619      	mov	r1, r3
 80030b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030b6:	461a      	mov	r2, r3
 80030b8:	f005 fdb6 	bl	8008c28 <memcpy>

	
	//have to manually set these pointers
	frame0.lyr0.redArrPtr = &frame0.lyr0.redArray[0];
 80030bc:	4b80      	ldr	r3, [pc, #512]	; (80032c0 <main+0x2c8>)
 80030be:	4a80      	ldr	r2, [pc, #512]	; (80032c0 <main+0x2c8>)
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	frame0.lyr0.grnArrPtr = &frame0.lyr0.grnArray[0];
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <main+0x2c8>)
 80030c6:	4a7f      	ldr	r2, [pc, #508]	; (80032c4 <main+0x2cc>)
 80030c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	frame0.lyr0.bluArrPtr = &frame0.lyr0.bluArray[0];
 80030cc:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <main+0x2c8>)
 80030ce:	4a7e      	ldr	r2, [pc, #504]	; (80032c8 <main+0x2d0>)
 80030d0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	
	// This pin referencing is slightly redundant. L8 needs to be set since it's toggled during timXocstart (158)
	HAL_GPIO_WritePin(L8_EN_GPIO_Port, L8_EN_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030da:	487c      	ldr	r0, [pc, #496]	; (80032cc <main+0x2d4>)
 80030dc:	f002 fce2 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L7_EN_GPIO_Port, L7_EN_Pin, GPIO_PIN_RESET);
 80030e0:	2200      	movs	r2, #0
 80030e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030e6:	4879      	ldr	r0, [pc, #484]	; (80032cc <main+0x2d4>)
 80030e8:	f002 fcdc 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L6_EN_GPIO_Port, L6_EN_Pin, GPIO_PIN_RESET);
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f2:	4876      	ldr	r0, [pc, #472]	; (80032cc <main+0x2d4>)
 80030f4:	f002 fcd6 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L5_EN_GPIO_Port, L5_EN_Pin, GPIO_PIN_RESET);
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030fe:	4873      	ldr	r0, [pc, #460]	; (80032cc <main+0x2d4>)
 8003100:	f002 fcd0 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L4_EN_GPIO_Port, L4_EN_Pin, GPIO_PIN_RESET);
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800310a:	4870      	ldr	r0, [pc, #448]	; (80032cc <main+0x2d4>)
 800310c:	f002 fcca 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_EN_GPIO_Port, L3_EN_Pin, GPIO_PIN_RESET);
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003116:	486d      	ldr	r0, [pc, #436]	; (80032cc <main+0x2d4>)
 8003118:	f002 fcc4 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_EN_GPIO_Port, L2_EN_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003122:	486a      	ldr	r0, [pc, #424]	; (80032cc <main+0x2d4>)
 8003124:	f002 fcbe 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L1_EN_GPIO_Port, L1_EN_Pin, GPIO_PIN_RESET);
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312e:	4867      	ldr	r0, [pc, #412]	; (80032cc <main+0x2d4>)
 8003130:	f002 fcb8 	bl	8005aa4 <HAL_GPIO_WritePin>


	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);	//
 8003134:	2104      	movs	r1, #4
 8003136:	4866      	ldr	r0, [pc, #408]	; (80032d0 <main+0x2d8>)
 8003138:	f004 fec0 	bl	8007ebc <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 800313c:	4865      	ldr	r0, [pc, #404]	; (80032d4 <main+0x2dc>)
 800313e:	f004 fe6f 	bl	8007e20 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	//this was working with ch1 even though thats set as a gpio!
 8003142:	210c      	movs	r1, #12
 8003144:	4863      	ldr	r0, [pc, #396]	; (80032d4 <main+0x2dc>)
 8003146:	f004 feb9 	bl	8007ebc <HAL_TIM_OC_Start>
		
	lcd20x4_i2c_init(&hi2c1); // I don't know why this needs to be called in main and not inside MenuSystemInit()
 800314a:	4863      	ldr	r0, [pc, #396]	; (80032d8 <main+0x2e0>)
 800314c:	f7ff fc80 	bl	8002a50 <lcd20x4_i2c_init>
		
	HAL_GPIO_WritePin(L8_EN_GPIO_Port, L8_EN_Pin, GPIO_PIN_SET);		
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003156:	485d      	ldr	r0, [pc, #372]	; (80032cc <main+0x2d4>)
 8003158:	f002 fca4 	bl	8005aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Init(&hspi1);
 800315c:	485f      	ldr	r0, [pc, #380]	; (80032dc <main+0x2e4>)
 800315e:	f004 fc42 	bl	80079e6 <HAL_SPI_Init>

	tlc_clear(data16Ptr);
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <main+0x2e8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f002 f971 	bl	800544e <tlc_clear>
	UPDATE_FRAME = 1;
 800316c:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <main+0x2ec>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
	MenuSystemInit(hi2c1);
 8003172:	4c59      	ldr	r4, [pc, #356]	; (80032d8 <main+0x2e0>)
 8003174:	4668      	mov	r0, sp
 8003176:	f104 0310 	add.w	r3, r4, #16
 800317a:	2244      	movs	r2, #68	; 0x44
 800317c:	4619      	mov	r1, r3
 800317e:	f005 fd53 	bl	8008c28 <memcpy>
 8003182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003186:	f001 f8ed 	bl	8004364 <MenuSystemInit>
	MenuDisplayUpdate(MainMenu);	
 800318a:	4c57      	ldr	r4, [pc, #348]	; (80032e8 <main+0x2f0>)
 800318c:	4668      	mov	r0, sp
 800318e:	f104 0310 	add.w	r3, r4, #16
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	4619      	mov	r1, r3
 8003198:	f005 fd46 	bl	8008c28 <memcpy>
 800319c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031a0:	f000 fd28 	bl	8003bf4 <MenuDisplayUpdate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		
		while(currentAction == ACTION_NOP)
 80031a4:	e002      	b.n	80031ac <main+0x1b4>
		{
			HAL_Delay(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f002 f9f2 	bl	8005590 <HAL_Delay>
		while(currentAction == ACTION_NOP)
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <main+0x2f4>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	2b33      	cmp	r3, #51	; 0x33
 80031b2:	d0f8      	beq.n	80031a6 <main+0x1ae>
		}
		
		if(currentAction == ACTION_HALT_ANIMATION)
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <main+0x2f4>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <main+0x1ca>
		{
			HAL_Delay(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f002 f9e7 	bl	8005590 <HAL_Delay>
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_6)
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <main+0x2f4>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d10f      	bne.n	80031ea <main+0x1f2>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Stretchy Cube");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			stretchy_cube(frame0);
 80031ca:	4c3d      	ldr	r4, [pc, #244]	; (80032c0 <main+0x2c8>)
 80031cc:	4668      	mov	r0, sp
 80031ce:	f104 0310 	add.w	r3, r4, #16
 80031d2:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 80031d6:	4619      	mov	r1, r3
 80031d8:	f005 fd26 	bl	8008c28 <memcpy>
 80031dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031e0:	f7fe fb7a 	bl	80018d8 <stretchy_cube>
			currentAction = ACTION_NOP;
 80031e4:	4b41      	ldr	r3, [pc, #260]	; (80032ec <main+0x2f4>)
 80031e6:	2233      	movs	r2, #51	; 0x33
 80031e8:	801a      	strh	r2, [r3, #0]
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_5)
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <main+0x2f4>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d10f      	bne.n	8003212 <main+0x21a>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Sliding Cubes");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			sliding_cubes(frame0);
 80031f2:	4c33      	ldr	r4, [pc, #204]	; (80032c0 <main+0x2c8>)
 80031f4:	4668      	mov	r0, sp
 80031f6:	f104 0310 	add.w	r3, r4, #16
 80031fa:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 80031fe:	4619      	mov	r1, r3
 8003200:	f005 fd12 	bl	8008c28 <memcpy>
 8003204:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003208:	f7fd fc9e 	bl	8000b48 <sliding_cubes>
			currentAction = ACTION_NOP;
 800320c:	4b37      	ldr	r3, [pc, #220]	; (80032ec <main+0x2f4>)
 800320e:	2233      	movs	r2, #51	; 0x33
 8003210:	801a      	strh	r2, [r3, #0]
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_4)
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <main+0x2f4>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d10f      	bne.n	800323a <main+0x242>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Merry Christmas");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			merry_christmas(frame0);
 800321a:	4c29      	ldr	r4, [pc, #164]	; (80032c0 <main+0x2c8>)
 800321c:	4668      	mov	r0, sp
 800321e:	f104 0310 	add.w	r3, r4, #16
 8003222:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8003226:	4619      	mov	r1, r3
 8003228:	f005 fcfe 	bl	8008c28 <memcpy>
 800322c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003230:	f7fc ff94 	bl	800015c <merry_christmas>
			currentAction = ACTION_NOP;
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <main+0x2f4>)
 8003236:	2233      	movs	r2, #51	; 0x33
 8003238:	801a      	strh	r2, [r3, #0]
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_3)
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <main+0x2f4>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d10f      	bne.n	8003262 <main+0x26a>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Original Fade");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			original_fade(frame0);
 8003242:	4c1f      	ldr	r4, [pc, #124]	; (80032c0 <main+0x2c8>)
 8003244:	4668      	mov	r0, sp
 8003246:	f104 0310 	add.w	r3, r4, #16
 800324a:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 800324e:	4619      	mov	r1, r3
 8003250:	f005 fcea 	bl	8008c28 <memcpy>
 8003254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003258:	f7fc ffea 	bl	8000230 <original_fade>
			currentAction = ACTION_NOP;
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <main+0x2f4>)
 800325e:	2233      	movs	r2, #51	; 0x33
 8003260:	801a      	strh	r2, [r3, #0]
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_2)
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <main+0x2f4>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d10f      	bne.n	800328a <main+0x292>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Halloween");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			halloween(frame0);
 800326a:	4c15      	ldr	r4, [pc, #84]	; (80032c0 <main+0x2c8>)
 800326c:	4668      	mov	r0, sp
 800326e:	f104 0310 	add.w	r3, r4, #16
 8003272:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8003276:	4619      	mov	r1, r3
 8003278:	f005 fcd6 	bl	8008c28 <memcpy>
 800327c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003280:	f7fd fa34 	bl	80006ec <halloween>
			currentAction = ACTION_NOP;
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <main+0x2f4>)
 8003286:	2233      	movs	r2, #51	; 0x33
 8003288:	801a      	strh	r2, [r3, #0]
		}
		
		if(currentAction == ACTION_PLAY_ANIMATION_1)
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <main+0x2f4>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d18c      	bne.n	80031ac <main+0x1b4>
		{
			//MenuSetRowText(ActiveAnimationMenu.ArrayPtr, 0, " Joel Mode");
			//MenuDisplayUpdate(ActiveAnimationMenu);
			joel_mode(frame0);
 8003292:	4c0b      	ldr	r4, [pc, #44]	; (80032c0 <main+0x2c8>)
 8003294:	4668      	mov	r0, sp
 8003296:	f104 0310 	add.w	r3, r4, #16
 800329a:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 800329e:	4619      	mov	r1, r3
 80032a0:	f005 fcc2 	bl	8008c28 <memcpy>
 80032a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032a8:	f7fd fb02 	bl	80008b0 <joel_mode>
			currentAction = ACTION_NOP;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <main+0x2f4>)
 80032ae:	2233      	movs	r2, #51	; 0x33
 80032b0:	801a      	strh	r2, [r3, #0]
		while(currentAction == ACTION_NOP)
 80032b2:	e77b      	b.n	80031ac <main+0x1b4>
 80032b4:	2000198c 	.word	0x2000198c
 80032b8:	2000187c 	.word	0x2000187c
 80032bc:	20001a9c 	.word	0x20001a9c
 80032c0:	200008ec 	.word	0x200008ec
 80032c4:	20000970 	.word	0x20000970
 80032c8:	200009f4 	.word	0x200009f4
 80032cc:	40010c00 	.word	0x40010c00
 80032d0:	20001724 	.word	0x20001724
 80032d4:	200008ac 	.word	0x200008ac
 80032d8:	200006e4 	.word	0x200006e4
 80032dc:	200016cc 	.word	0x200016cc
 80032e0:	200002e0 	.word	0x200002e0
 80032e4:	200006cd 	.word	0x200006cd
 80032e8:	20001768 	.word	0x20001768
 80032ec:	200005e8 	.word	0x200005e8

080032f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b094      	sub	sp, #80	; 0x50
 80032f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032fa:	2228      	movs	r2, #40	; 0x28
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f005 fc9d 	bl	8008c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003320:	2305      	movs	r3, #5
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800332a:	2301      	movs	r3, #1
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fcb6 	bl	8006ca8 <HAL_RCC_OscConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8003342:	f000 fbb1 	bl	8003aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003346:	230f      	movs	r3, #15
 8003348:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f003 ff21 	bl	80071a8 <HAL_RCC_ClockConfig>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800336c:	f000 fb9c 	bl	8003aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003370:	2301      	movs	r3, #1
 8003372:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003378:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f004 f8af 	bl	80074e0 <HAL_RCCEx_PeriphCLKConfig>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003388:	f000 fb8e 	bl	8003aa8 <Error_Handler>
  }
}
 800338c:	bf00      	nop
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <MX_I2C1_Init+0x50>)
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <MX_I2C1_Init+0x54>)
 800339c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <MX_I2C1_Init+0x58>)
 80033a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_I2C1_Init+0x50>)
 80033d2:	f002 fbaf 	bl	8005b34 <HAL_I2C_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80033dc:	f000 fb64 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200006e4 	.word	0x200006e4
 80033e8:	40005400 	.word	0x40005400
 80033ec:	000186a0 	.word	0x000186a0

080033f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <MX_RTC_Init+0x30>)
 80033f6:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <MX_RTC_Init+0x34>)
 80033f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_RTC_Init+0x30>)
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <MX_RTC_Init+0x30>)
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_RTC_Init+0x30>)
 800340c:	f004 f9d8 	bl	80077c0 <HAL_RTC_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8003416:	f000 fb47 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000898 	.word	0x20000898
 8003424:	40002800 	.word	0x40002800

08003428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <MX_SPI1_Init+0x64>)
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <MX_SPI1_Init+0x68>)
 8003430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <MX_SPI1_Init+0x64>)
 8003434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <MX_SPI1_Init+0x64>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <MX_SPI1_Init+0x64>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_SPI1_Init+0x64>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <MX_SPI1_Init+0x64>)
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_SPI1_Init+0x64>)
 8003454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_SPI1_Init+0x64>)
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <MX_SPI1_Init+0x64>)
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_SPI1_Init+0x64>)
 8003468:	2200      	movs	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <MX_SPI1_Init+0x64>)
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <MX_SPI1_Init+0x64>)
 8003474:	220a      	movs	r2, #10
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003478:	4804      	ldr	r0, [pc, #16]	; (800348c <MX_SPI1_Init+0x64>)
 800347a:	f004 fab4 	bl	80079e6 <HAL_SPI_Init>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003484:	f000 fb10 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200016cc 	.word	0x200016cc
 8003490:	40013000 	.word	0x40013000

08003494 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b092      	sub	sp, #72	; 0x48
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800349a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	615a      	str	r2, [r3, #20]
 80034b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	2220      	movs	r2, #32
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f005 fbbd 	bl	8008c3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034c4:	4b33      	ldr	r3, [pc, #204]	; (8003594 <MX_TIM1_Init+0x100>)
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <MX_TIM1_Init+0x104>)
 80034c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034ca:	4b32      	ldr	r3, [pc, #200]	; (8003594 <MX_TIM1_Init+0x100>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <MX_TIM1_Init+0x100>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16383;
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <MX_TIM1_Init+0x100>)
 80034d8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80034dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <MX_TIM1_Init+0x100>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <MX_TIM1_Init+0x100>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <MX_TIM1_Init+0x100>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034f0:	4828      	ldr	r0, [pc, #160]	; (8003594 <MX_TIM1_Init+0x100>)
 80034f2:	f004 fd15 	bl	8007f20 <HAL_TIM_PWM_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80034fc:	f000 fad4 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003500:	2320      	movs	r3, #32
 8003502:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003508:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800350c:	4619      	mov	r1, r3
 800350e:	4821      	ldr	r0, [pc, #132]	; (8003594 <MX_TIM1_Init+0x100>)
 8003510:	f005 f992 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800351a:	f000 fac5 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800351e:	2360      	movs	r3, #96	; 0x60
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353a:	220c      	movs	r2, #12
 800353c:	4619      	mov	r1, r3
 800353e:	4815      	ldr	r0, [pc, #84]	; (8003594 <MX_TIM1_Init+0x100>)
 8003540:	f004 fe82 	bl	8008248 <HAL_TIM_PWM_ConfigChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800354a:	f000 faad 	bl	8003aa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <MX_TIM1_Init+0x100>)
 8003572:	f005 f9a5 	bl	80088c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800357c:	f000 fa94 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003580:	2370      	movs	r3, #112	; 0x70
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003584:	4803      	ldr	r0, [pc, #12]	; (8003594 <MX_TIM1_Init+0x100>)
 8003586:	f001 fdb3 	bl	80050f0 <HAL_TIM_MspPostInit>

}
 800358a:	bf00      	nop
 800358c:	3748      	adds	r7, #72	; 0x48
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200008ac 	.word	0x200008ac
 8003598:	40012c00 	.word	0x40012c00

0800359c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a2:	f107 0320 	add.w	r3, r7, #32
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <MX_TIM2_Init+0xb0>)
 80035c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <MX_TIM2_Init+0xb0>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <MX_TIM2_Init+0xb0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <MX_TIM2_Init+0xb0>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <MX_TIM2_Init+0xb0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <MX_TIM2_Init+0xb0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80035e4:	4819      	ldr	r0, [pc, #100]	; (800364c <MX_TIM2_Init+0xb0>)
 80035e6:	f004 fc3e 	bl	8007e66 <HAL_TIM_OC_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80035f0:	f000 fa5a 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035fc:	f107 0320 	add.w	r3, r7, #32
 8003600:	4619      	mov	r1, r3
 8003602:	4812      	ldr	r0, [pc, #72]	; (800364c <MX_TIM2_Init+0xb0>)
 8003604:	f005 f918 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800360e:	f000 fa4b 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003612:	2330      	movs	r3, #48	; 0x30
 8003614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2204      	movs	r2, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4808      	ldr	r0, [pc, #32]	; (800364c <MX_TIM2_Init+0xb0>)
 800362a:	f004 fdad 	bl	8008188 <HAL_TIM_OC_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003634:	f000 fa38 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	sConfigOC.Pulse = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <MX_TIM2_Init+0xb0>)
 800363e:	f001 fd57 	bl	80050f0 <HAL_TIM_MspPostInit>

}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20001724 	.word	0x20001724

08003650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <MX_USART1_UART_Init+0x50>)
 8003658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800365c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003676:	220c      	movs	r2, #12
 8003678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003682:	2200      	movs	r2, #0
 8003684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003686:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003688:	f005 f97d 	bl	8008986 <HAL_UART_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003692:	f000 fa09 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000858 	.word	0x20000858
 80036a0:	40013800 	.word	0x40013800

080036a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036aa:	f107 0310 	add.w	r3, r7, #16
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4a41      	ldr	r2, [pc, #260]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	6193      	str	r3, [r2, #24]
 80036c4:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d0:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	6193      	str	r3, [r2, #24]
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a35      	ldr	r2, [pc, #212]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <MX_GPIO_Init+0x120>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <MX_GPIO_Init+0x120>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <MX_GPIO_Init+0x120>)
 8003706:	f043 0308 	orr.w	r3, r3, #8
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <MX_GPIO_Init+0x120>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XLAT_3V3_Pin|BLANK_3V3_Pin|ESP8266_EN_Pin, GPIO_PIN_RESET);
 8003718:	2200      	movs	r2, #0
 800371a:	f248 1110 	movw	r1, #33040	; 0x8110
 800371e:	482a      	ldr	r0, [pc, #168]	; (80037c8 <MX_GPIO_Init+0x124>)
 8003720:	f002 f9c0 	bl	8005aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DCPRG_3V3_Pin|VPRG_3V3_Pin|L3_EN_Pin|L4_EN_Pin 
 8003724:	2200      	movs	r2, #0
 8003726:	f64f 7103 	movw	r1, #65283	; 0xff03
 800372a:	4828      	ldr	r0, [pc, #160]	; (80037cc <MX_GPIO_Init+0x128>)
 800372c:	f002 f9ba 	bl	8005aa4 <HAL_GPIO_WritePin>
                          |L5_EN_Pin|L6_EN_Pin|L7_EN_Pin|L8_EN_Pin 
                          |L1_EN_Pin|L2_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : XLAT_3V3_Pin BLANK_3V3_Pin ESP8266_EN_Pin */
  GPIO_InitStruct.Pin = XLAT_3V3_Pin|BLANK_3V3_Pin|ESP8266_EN_Pin;
 8003730:	f248 1310 	movw	r3, #33040	; 0x8110
 8003734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003736:	2301      	movs	r3, #1
 8003738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2302      	movs	r3, #2
 8003740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	4619      	mov	r1, r3
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <MX_GPIO_Init+0x124>)
 800374a:	f002 f851 	bl	80057f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCPRG_3V3_Pin VPRG_3V3_Pin L3_EN_Pin L4_EN_Pin 
                           L5_EN_Pin L6_EN_Pin L7_EN_Pin L8_EN_Pin 
                           L1_EN_Pin L2_EN_Pin */
  GPIO_InitStruct.Pin = DCPRG_3V3_Pin|VPRG_3V3_Pin|L3_EN_Pin|L4_EN_Pin 
 800374e:	f64f 7303 	movw	r3, #65283	; 0xff03
 8003752:	613b      	str	r3, [r7, #16]
                          |L5_EN_Pin|L6_EN_Pin|L7_EN_Pin|L8_EN_Pin 
                          |L1_EN_Pin|L2_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2302      	movs	r3, #2
 800375e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	4619      	mov	r1, r3
 8003766:	4819      	ldr	r0, [pc, #100]	; (80037cc <MX_GPIO_Init+0x128>)
 8003768:	f002 f842 	bl	80057f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XERR_Pin */
  GPIO_InitStruct.Pin = XERR_Pin;
 800376c:	2308      	movs	r3, #8
 800376e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003774:	2301      	movs	r3, #1
 8003776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XERR_GPIO_Port, &GPIO_InitStruct);
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4619      	mov	r1, r3
 800377e:	4813      	ldr	r0, [pc, #76]	; (80037cc <MX_GPIO_Init+0x128>)
 8003780:	f002 f836 	bl	80057f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keypad_IRQ_Pin Wheel_IRQ_Pin */
  GPIO_InitStruct.Pin = Keypad_IRQ_Pin|Wheel_IRQ_Pin;
 8003784:	2330      	movs	r3, #48	; 0x30
 8003786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <MX_GPIO_Init+0x12c>)
 800378a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	4619      	mov	r1, r3
 8003796:	480d      	ldr	r0, [pc, #52]	; (80037cc <MX_GPIO_Init+0x128>)
 8003798:	f002 f82a 	bl	80057f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800379c:	2200      	movs	r2, #0
 800379e:	2102      	movs	r1, #2
 80037a0:	200a      	movs	r0, #10
 80037a2:	f001 ffee 	bl	8005782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80037a6:	200a      	movs	r0, #10
 80037a8:	f002 f807 	bl	80057ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2102      	movs	r1, #2
 80037b0:	2017      	movs	r0, #23
 80037b2:	f001 ffe6 	bl	8005782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037b6:	2017      	movs	r0, #23
 80037b8:	f001 ffff 	bl	80057ba <HAL_NVIC_EnableIRQ>

}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40010800 	.word	0x40010800
 80037cc:	40010c00 	.word	0x40010c00
 80037d0:	10210000 	.word	0x10210000

080037d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b097      	sub	sp, #92	; 0x5c
 80037d8:	af14      	add	r7, sp, #80	; 0x50
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
	currentAction = Menu_Read_MPR121(hi2c1, GPIO_Pin, currentAction);
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_GPIO_EXTI_Callback+0x68>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	4c17      	ldr	r4, [pc, #92]	; (8003840 <HAL_GPIO_EXTI_Callback+0x6c>)
 80037e4:	9312      	str	r3, [sp, #72]	; 0x48
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	9311      	str	r3, [sp, #68]	; 0x44
 80037ea:	4668      	mov	r0, sp
 80037ec:	f104 0310 	add.w	r3, r4, #16
 80037f0:	2244      	movs	r2, #68	; 0x44
 80037f2:	4619      	mov	r1, r3
 80037f4:	f005 fa18 	bl	8008c28 <memcpy>
 80037f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037fc:	f000 fe3c 	bl	8004478 <Menu_Read_MPR121>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_GPIO_EXTI_Callback+0x68>)
 8003806:	801a      	strh	r2, [r3, #0]
	if (currentAction == ACTION_HALT_ANIMATION) HALT_ANIMATION = true;
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_GPIO_EXTI_Callback+0x68>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <HAL_GPIO_EXTI_Callback+0x42>
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_GPIO_EXTI_Callback+0x70>)
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
	if (currentAction == ACTION_PAUSE_ANIMATION)
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_GPIO_EXTI_Callback+0x68>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	2b37      	cmp	r3, #55	; 0x37
 800381c:	d10a      	bne.n	8003834 <HAL_GPIO_EXTI_Callback+0x60>
	{
		if (PAUSE_ANIMATION == true) PAUSE_ANIMATION = false;
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_GPIO_EXTI_Callback+0x74>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_EXTI_Callback+0x5a>
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_GPIO_EXTI_Callback+0x74>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
		else PAUSE_ANIMATION = true;
	}
}
 800382c:	e002      	b.n	8003834 <HAL_GPIO_EXTI_Callback+0x60>
		else PAUSE_ANIMATION = true;
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_GPIO_EXTI_Callback+0x74>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bd90      	pop	{r4, r7, pc}
 800383c:	200005e8 	.word	0x200005e8
 8003840:	200006e4 	.word	0x200006e4
 8003844:	2000067c 	.word	0x2000067c
 8003848:	2000067d 	.word	0x2000067d

0800384c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	rngCount++;
 8003854:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	4a3c      	ldr	r2, [pc, #240]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800385c:	6013      	str	r3, [r2, #0]
	
	if(UPDATE_FRAME==0)
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d025      	beq.n	80038b8 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		previous_lyr_off(activeLyr);
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f878 	bl	8003968 <previous_lyr_off>
		HAL_GPIO_WritePin(BLANK_3V3_GPIO_Port, BLANK_3V3_Pin, GPIO_PIN_SET);
 8003878:	2201      	movs	r2, #1
 800387a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800387e:	4836      	ldr	r0, [pc, #216]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003880:	f002 f910 	bl	8005aa4 <HAL_GPIO_WritePin>
		for(uint16_t dummyVar =1;dummyVar<15;dummyVar++); // short delay (approx 3us)
 8003884:	2301      	movs	r3, #1
 8003886:	81fb      	strh	r3, [r7, #14]
 8003888:	e002      	b.n	8003890 <HAL_TIM_PeriodElapsedCallback+0x44>
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	3301      	adds	r3, #1
 800388e:	81fb      	strh	r3, [r7, #14]
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	2b0e      	cmp	r3, #14
 8003894:	d9f9      	bls.n	800388a <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_GPIO_WritePin(BLANK_3V3_GPIO_Port, BLANK_3V3_Pin, GPIO_PIN_RESET);
 8003896:	2200      	movs	r2, #0
 8003898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800389c:	482e      	ldr	r0, [pc, #184]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800389e:	f002 f901 	bl	8005aa4 <HAL_GPIO_WritePin>
		activeLyr =  current_lyr_on(activeLyr);
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f8a9 	bl	8003a00 <current_lyr_on>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80038b4:	701a      	strb	r2, [r3, #0]
		return;
 80038b6:	e046      	b.n	8003946 <HAL_TIM_PeriodElapsedCallback+0xfa>
	}
	
	if(UPDATE_FRAME==1)
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d042      	beq.n	8003946 <HAL_TIM_PeriodElapsedCallback+0xfa>
	{
		previous_lyr_off(activeLyr);
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f84e 	bl	8003968 <previous_lyr_off>
		tlc_spi_convert(data16Ptr, data8Ptr);
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f001 fd54 	bl	8005384 <tlc_spi_convert>
		HAL_SPI_Transmit(&hspi1, data8Ptr, 24*NUM_TLCS, 10);
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	230a      	movs	r3, #10
 80038e2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80038e6:	481f      	ldr	r0, [pc, #124]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80038e8:	f004 f8de 	bl	8007aa8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(BLANK_3V3_GPIO_Port, BLANK_3V3_Pin, GPIO_PIN_SET);
 80038ec:	2201      	movs	r2, #1
 80038ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038f2:	4819      	ldr	r0, [pc, #100]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80038f4:	f002 f8d6 	bl	8005aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(XLAT_3V3_GPIO_Port, XLAT_3V3_Pin, GPIO_PIN_SET);
 80038f8:	2201      	movs	r2, #1
 80038fa:	2110      	movs	r1, #16
 80038fc:	4816      	ldr	r0, [pc, #88]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80038fe:	f002 f8d1 	bl	8005aa4 <HAL_GPIO_WritePin>
		for(uint16_t dummyVar =1;dummyVar<15;dummyVar++); // short delay (approx 3us)
 8003902:	2301      	movs	r3, #1
 8003904:	81bb      	strh	r3, [r7, #12]
 8003906:	e002      	b.n	800390e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8003908:	89bb      	ldrh	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	81bb      	strh	r3, [r7, #12]
 800390e:	89bb      	ldrh	r3, [r7, #12]
 8003910:	2b0e      	cmp	r3, #14
 8003912:	d9f9      	bls.n	8003908 <HAL_TIM_PeriodElapsedCallback+0xbc>
		HAL_GPIO_WritePin(XLAT_3V3_GPIO_Port, XLAT_3V3_Pin, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	2110      	movs	r1, #16
 8003918:	480f      	ldr	r0, [pc, #60]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800391a:	f002 f8c3 	bl	8005aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLANK_3V3_GPIO_Port, BLANK_3V3_Pin, GPIO_PIN_RESET);
 800391e:	2200      	movs	r2, #0
 8003920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003926:	f002 f8bd 	bl	8005aa4 <HAL_GPIO_WritePin>
		UPDATE_FRAME=0;
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
		activeLyr =  current_lyr_on(activeLyr);
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f862 	bl	8003a00 <current_lyr_on>
 800393c:	4603      	mov	r3, r0
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003942:	701a      	strb	r2, [r3, #0]
		return;
 8003944:	bf00      	nop
	}
}
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200006d4 	.word	0x200006d4
 8003950:	200006cd 	.word	0x200006cd
 8003954:	200006ce 	.word	0x200006ce
 8003958:	40010800 	.word	0x40010800
 800395c:	200002e0 	.word	0x200002e0
 8003960:	200002e4 	.word	0x200002e4
 8003964:	200016cc 	.word	0x200016cc

08003968 <previous_lyr_off>:
	
void previous_lyr_off(uint16_t activeLyr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
	if(activeLyr == 0) HAL_GPIO_TogglePin(L8_EN_GPIO_Port, L8_EN_Pin);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <previous_lyr_off+0x1a>
 8003978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800397c:	481f      	ldr	r0, [pc, #124]	; (80039fc <previous_lyr_off+0x94>)
 800397e:	f002 f8a9 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 1) HAL_GPIO_TogglePin(L1_EN_GPIO_Port, L1_EN_Pin);
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d104      	bne.n	8003992 <previous_lyr_off+0x2a>
 8003988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398c:	481b      	ldr	r0, [pc, #108]	; (80039fc <previous_lyr_off+0x94>)
 800398e:	f002 f8a1 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 2) HAL_GPIO_TogglePin(L2_EN_GPIO_Port, L2_EN_Pin);
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d104      	bne.n	80039a2 <previous_lyr_off+0x3a>
 8003998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800399c:	4817      	ldr	r0, [pc, #92]	; (80039fc <previous_lyr_off+0x94>)
 800399e:	f002 f899 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 3) HAL_GPIO_TogglePin(L3_EN_GPIO_Port, L3_EN_Pin);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d104      	bne.n	80039b2 <previous_lyr_off+0x4a>
 80039a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <previous_lyr_off+0x94>)
 80039ae:	f002 f891 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 4) HAL_GPIO_TogglePin(L4_EN_GPIO_Port, L4_EN_Pin);
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d104      	bne.n	80039c2 <previous_lyr_off+0x5a>
 80039b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039bc:	480f      	ldr	r0, [pc, #60]	; (80039fc <previous_lyr_off+0x94>)
 80039be:	f002 f889 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 5) HAL_GPIO_TogglePin(L5_EN_GPIO_Port, L5_EN_Pin);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d104      	bne.n	80039d2 <previous_lyr_off+0x6a>
 80039c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039cc:	480b      	ldr	r0, [pc, #44]	; (80039fc <previous_lyr_off+0x94>)
 80039ce:	f002 f881 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 6) HAL_GPIO_TogglePin(L6_EN_GPIO_Port, L6_EN_Pin);
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d104      	bne.n	80039e2 <previous_lyr_off+0x7a>
 80039d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039dc:	4807      	ldr	r0, [pc, #28]	; (80039fc <previous_lyr_off+0x94>)
 80039de:	f002 f879 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 7) HAL_GPIO_TogglePin(L7_EN_GPIO_Port, L7_EN_Pin);
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	d104      	bne.n	80039f2 <previous_lyr_off+0x8a>
 80039e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ec:	4803      	ldr	r0, [pc, #12]	; (80039fc <previous_lyr_off+0x94>)
 80039ee:	f002 f871 	bl	8005ad4 <HAL_GPIO_TogglePin>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40010c00 	.word	0x40010c00

08003a00 <current_lyr_on>:
	
uint16_t current_lyr_on(uint16_t activeLyr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
	if(activeLyr == 0) HAL_GPIO_TogglePin(L1_EN_GPIO_Port, L1_EN_Pin);
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <current_lyr_on+0x1a>
 8003a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a14:	4823      	ldr	r0, [pc, #140]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a16:	f002 f85d 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 1) HAL_GPIO_TogglePin(L2_EN_GPIO_Port, L2_EN_Pin);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d104      	bne.n	8003a2a <current_lyr_on+0x2a>
 8003a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a24:	481f      	ldr	r0, [pc, #124]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a26:	f002 f855 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 2) HAL_GPIO_TogglePin(L3_EN_GPIO_Port, L3_EN_Pin);
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d104      	bne.n	8003a3a <current_lyr_on+0x3a>
 8003a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a34:	481b      	ldr	r0, [pc, #108]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a36:	f002 f84d 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 3) HAL_GPIO_TogglePin(L4_EN_GPIO_Port, L4_EN_Pin);
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d104      	bne.n	8003a4a <current_lyr_on+0x4a>
 8003a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a44:	4817      	ldr	r0, [pc, #92]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a46:	f002 f845 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 4) HAL_GPIO_TogglePin(L5_EN_GPIO_Port, L5_EN_Pin);
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d104      	bne.n	8003a5a <current_lyr_on+0x5a>
 8003a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a54:	4813      	ldr	r0, [pc, #76]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a56:	f002 f83d 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 5) HAL_GPIO_TogglePin(L6_EN_GPIO_Port, L6_EN_Pin);
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d104      	bne.n	8003a6a <current_lyr_on+0x6a>
 8003a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a64:	480f      	ldr	r0, [pc, #60]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a66:	f002 f835 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 6) HAL_GPIO_TogglePin(L7_EN_GPIO_Port, L7_EN_Pin);
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d104      	bne.n	8003a7a <current_lyr_on+0x7a>
 8003a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a74:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a76:	f002 f82d 	bl	8005ad4 <HAL_GPIO_TogglePin>
	if(activeLyr == 7) HAL_GPIO_TogglePin(L8_EN_GPIO_Port, L8_EN_Pin);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	d104      	bne.n	8003a8a <current_lyr_on+0x8a>
 8003a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a84:	4807      	ldr	r0, [pc, #28]	; (8003aa4 <current_lyr_on+0xa4>)
 8003a86:	f002 f825 	bl	8005ad4 <HAL_GPIO_TogglePin>
	activeLyr++;
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	80fb      	strh	r3, [r7, #6]
	if(activeLyr==8) activeLyr = 0;
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d101      	bne.n	8003a9a <current_lyr_on+0x9a>
 8003a96:	2300      	movs	r3, #0
 8003a98:	80fb      	strh	r3, [r7, #6]
	return activeLyr;
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010c00 	.word	0x40010c00

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <MenuScrollUp>:
int16_t redValPM;
int16_t bluValPM;
int16_t grnValPM;

Menu_TypeDef MenuScrollUp (Menu_TypeDef Menu)
{
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b0c2      	sub	sp, #264	; 0x108
 8003aba:	af40      	add	r7, sp, #256	; 0x100
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	f107 0014 	add.w	r0, r7, #20
 8003ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Menu.DisplaySelectedRow == Menu.HighestRow) return Menu;
 8003ac6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d109      	bne.n	8003ae6 <MenuScrollUp+0x32>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f005 f8a2 	bl	8008c28 <memcpy>
 8003ae4:	e02f      	b.n	8003b46 <MenuScrollUp+0x92>
	if(Menu.DisplaySelectedRow == Menu.DisplayTopRow)
 8003ae6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d109      	bne.n	8003b06 <MenuScrollUp+0x52>
	{
		Menu.DisplayTopRow = Menu.DisplayTopRow - MenuRowLength;
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	3b14      	subs	r3, #20
 8003af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Menu.DisplayBottomRow = Menu.DisplayBottomRow - MenuRowLength;
 8003afc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b00:	3b14      	subs	r3, #20
 8003b02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	}
	Menu.DisplaySelectedRow = Menu.DisplaySelectedRow - MenuRowLength;
 8003b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b0a:	3b14      	subs	r3, #20
 8003b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	Menu.selectedRowNum--;
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b14:	3b01      	subs	r3, #1
 8003b16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	MenuDisplayUpdate(Menu);
 8003b1a:	4668      	mov	r0, sp
 8003b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b24:	4619      	mov	r1, r3
 8003b26:	f005 f87f 	bl	8008c28 <memcpy>
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b30:	f000 f860 	bl	8003bf4 <MenuDisplayUpdate>
	return Menu;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003b40:	4619      	mov	r1, r3
 8003b42:	f005 f871 	bl	8008c28 <memcpy>
}
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr

08003b54 <MenuScrollDown>:


Menu_TypeDef MenuScrollDown (Menu_TypeDef Menu)
{
 8003b54:	b084      	sub	sp, #16
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b0c2      	sub	sp, #264	; 0x108
 8003b5a:	af40      	add	r7, sp, #256	; 0x100
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	f107 0014 	add.w	r0, r7, #20
 8003b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Menu.DisplaySelectedRow == Menu.LowestRow) return Menu;
 8003b66:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d109      	bne.n	8003b86 <MenuScrollDown+0x32>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f005 f852 	bl	8008c28 <memcpy>
 8003b84:	e02f      	b.n	8003be6 <MenuScrollDown+0x92>
	if(Menu.DisplaySelectedRow == Menu.DisplayBottomRow)
 8003b86:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d109      	bne.n	8003ba6 <MenuScrollDown+0x52>
	{
		Menu.DisplayTopRow = Menu.DisplayTopRow + MenuRowLength;
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	3314      	adds	r3, #20
 8003b98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Menu.DisplayBottomRow = Menu.DisplayBottomRow + MenuRowLength;
 8003b9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	}
	Menu.DisplaySelectedRow = Menu.DisplaySelectedRow + MenuRowLength;
 8003ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003baa:	3314      	adds	r3, #20
 8003bac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	Menu.selectedRowNum++;
 8003bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	MenuDisplayUpdate(Menu);
 8003bba:	4668      	mov	r0, sp
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f005 f82f 	bl	8008c28 <memcpy>
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd0:	f000 f810 	bl	8003bf4 <MenuDisplayUpdate>
	return Menu;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003be0:	4619      	mov	r1, r3
 8003be2:	f005 f821 	bl	8008c28 <memcpy>
}
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bf0:	b004      	add	sp, #16
 8003bf2:	4770      	bx	lr

08003bf4 <MenuDisplayUpdate>:

// The passed in menu is displayed on the LCD
// Nothing is returned because the menu isn't modified
void MenuDisplayUpdate(Menu_TypeDef Menu)
{
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	f107 0c20 	add.w	ip, r7, #32
 8003c00:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Menu.ArrayPtr = &Menu.Array[0]; //for some reason this array pointer doesn't get passed in appropriately so this is necessary
 8003c04:	f107 0320 	add.w	r3, r7, #32
 8003c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	char tempStr[MenuRowLength];
	char *tempStrPtr = &tempStr[0];
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	617b      	str	r3, [r7, #20]
	lcd20x4_i2c_clear();
 8003c10:	f7fe fff9 	bl	8002c06 <lcd20x4_i2c_clear>
	
	lcd20x4_i2c_1stLine();
 8003c14:	f7fe ffc4 	bl	8002ba0 <lcd20x4_i2c_1stLine>
	MenuStrCpy(tempStrPtr, Menu.ArrayPtr, Menu.DisplayTopRow, MenuRowLength);
 8003c18:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003c1c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003c20:	2314      	movs	r3, #20
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f000 f85a 	bl	8003cdc <MenuStrCpy>
	lcd20x4_i2c_printf(tempStr);
 8003c28:	463b      	mov	r3, r7
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fff5 	bl	8002c1a <lcd20x4_i2c_printf>
	HAL_Delay(10);
 8003c30:	200a      	movs	r0, #10
 8003c32:	f001 fcad 	bl	8005590 <HAL_Delay>
	
	lcd20x4_i2c_2ndLine();
 8003c36:	f7fe ffbb 	bl	8002bb0 <lcd20x4_i2c_2ndLine>
	MenuStrCpy(tempStrPtr, Menu.ArrayPtr, (Menu.DisplayTopRow + MenuRowLength),MenuRowLength);
 8003c3a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003c3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c42:	f103 0214 	add.w	r2, r3, #20
 8003c46:	2314      	movs	r3, #20
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f000 f847 	bl	8003cdc <MenuStrCpy>
	lcd20x4_i2c_printf(tempStr);
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe ffe2 	bl	8002c1a <lcd20x4_i2c_printf>
	HAL_Delay(10);
 8003c56:	200a      	movs	r0, #10
 8003c58:	f001 fc9a 	bl	8005590 <HAL_Delay>
	
	lcd20x4_i2c_3rdLine();
 8003c5c:	f7fe ffb0 	bl	8002bc0 <lcd20x4_i2c_3rdLine>
	MenuStrCpy(tempStrPtr, Menu.ArrayPtr, (Menu.DisplayTopRow + 2*MenuRowLength),MenuRowLength);
 8003c60:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003c64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c68:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003c6c:	2314      	movs	r3, #20
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f000 f834 	bl	8003cdc <MenuStrCpy>
	lcd20x4_i2c_printf(tempStr);
 8003c74:	463b      	mov	r3, r7
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe ffcf 	bl	8002c1a <lcd20x4_i2c_printf>
	HAL_Delay(10);
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	f001 fc87 	bl	8005590 <HAL_Delay>
	
	lcd20x4_i2c_4thLine();
 8003c82:	f7fe ffa5 	bl	8002bd0 <lcd20x4_i2c_4thLine>
	MenuStrCpy(tempStrPtr, Menu.ArrayPtr, (Menu.DisplayTopRow + 3*MenuRowLength),MenuRowLength);
 8003c86:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003c8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c8e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c92:	2314      	movs	r3, #20
 8003c94:	6978      	ldr	r0, [r7, #20]
 8003c96:	f000 f821 	bl	8003cdc <MenuStrCpy>
	lcd20x4_i2c_printf(tempStr);
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe ffbc 	bl	8002c1a <lcd20x4_i2c_printf>
	lcd20x4_i2c_setCursor(((Menu.DisplaySelectedRow-Menu.DisplayTopRow)/MenuRowLength),0);
 8003ca2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <MenuDisplayUpdate+0xe4>)
 8003cae:	fb82 1203 	smull	r1, r2, r2, r3
 8003cb2:	10d2      	asrs	r2, r2, #3
 8003cb4:	17db      	asrs	r3, r3, #31
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ff33 	bl	8002b28 <lcd20x4_i2c_setCursor>
	HAL_Delay(10);
 8003cc2:	200a      	movs	r0, #10
 8003cc4:	f001 fc64 	bl	8005590 <HAL_Delay>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd2:	b004      	add	sp, #16
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	66666667 	.word	0x66666667

08003cdc <MenuStrCpy>:


void MenuStrCpy(char *strPtr, char *arrayPtr, int strCpyStart , int strCpyLength)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
	int tempIndex=0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
	while(tempIndex<strCpyLength)
 8003cee:	e00c      	b.n	8003d0a <MenuStrCpy+0x2e>
	{
		*(strPtr+tempIndex) = *(arrayPtr + strCpyStart + tempIndex);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	440b      	add	r3, r1
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	701a      	strb	r2, [r3, #0]
		tempIndex++;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
	while(tempIndex<strCpyLength)
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	dbee      	blt.n	8003cf0 <MenuStrCpy+0x14>
	}
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <MenuSetRowText>:


void MenuSetRowText(char* menuPtr, int rowNum, char rowTxt[MenuRowLength])
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
	int rowIndex=0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
	while(rowIndex<MenuRowLength)
 8003d2c:	e025      	b.n	8003d7a <MenuSetRowText+0x5e>
	{
		//prevents a peculiar rowTxt is shorter than MenuRowLength. 
		//The extra ununsed length then gets initialized to seemingly random values.
		if(rowIndex>strlen(rowTxt)) 
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fa0c 	bl	800014c <strlen>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d20c      	bcs.n	8003d56 <MenuSetRowText+0x3a>
			*(menuPtr + (MenuRowLength*rowNum) + rowIndex) = 0x00;
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e00e      	b.n	8003d74 <MenuSetRowText+0x58>
		else
			*(menuPtr + (MenuRowLength*rowNum) + rowIndex) = rowTxt[rowIndex];
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	18d1      	adds	r1, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	780a      	ldrb	r2, [r1, #0]
 8003d72:	701a      	strb	r2, [r3, #0]
		rowIndex++;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
	while(rowIndex<MenuRowLength)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b13      	cmp	r3, #19
 8003d7e:	ddd6      	ble.n	8003d2e <MenuSetRowText+0x12>
	}
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <MainMenuInit>:

void MainMenuInit(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	int mainMenuColumnLength = 4;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	607b      	str	r3, [r7, #4]
	MainMenu.active=true;
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <MainMenuInit+0xb8>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	MainMenu.ArrayPtr = &MainMenu.Array[0];
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <MainMenuInit+0xb8>)
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <MainMenuInit+0xb8>)
 8003d9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	MainMenu.HighestRow=0;
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <MainMenuInit+0xb8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	MainMenu.DisplayTopRow=0;
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <MainMenuInit+0xb8>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	MainMenu.DisplaySelectedRow=0;
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <MainMenuInit+0xb8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	MainMenu.DisplayBottomRow = 3*MenuRowLength;
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <MainMenuInit+0xb8>)
 8003dbc:	223c      	movs	r2, #60	; 0x3c
 8003dbe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	MainMenu.LowestRow = MenuRowLength*(mainMenuColumnLength - 1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <MainMenuInit+0xb8>)
 8003dd2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	
	MenuSetRowText(MainMenu.ArrayPtr, 0, MainMenuName);
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <MainMenuInit+0xb8>)
 8003dd8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <MainMenuInit+0xbc>)
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff9b 	bl	8003d1c <MenuSetRowText>
	MainMenu.rowAction[0] = ACTION_NOP;
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <MainMenuInit+0xb8>)
 8003de8:	2233      	movs	r2, #51	; 0x33
 8003dea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	
	MenuSetRowText(MainMenu.ArrayPtr, 1, " - Animations ");
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <MainMenuInit+0xb8>)
 8003df0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <MainMenuInit+0xc0>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff8f 	bl	8003d1c <MenuSetRowText>
	MainMenu.rowAction[1] = ACTION_ANIMATION_MENU;
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <MainMenuInit+0xb8>)
 8003e00:	2235      	movs	r2, #53	; 0x35
 8003e02:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	MenuSetRowText(MainMenu.ArrayPtr, 2, " - Pin Mapping");
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <MainMenuInit+0xb8>)
 8003e08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <MainMenuInit+0xc4>)
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff83 	bl	8003d1c <MenuSetRowText>
	MainMenu.rowAction[2] = ACTION_PIN_MAPPING_MENU;
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <MainMenuInit+0xb8>)
 8003e18:	2236      	movs	r2, #54	; 0x36
 8003e1a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	
	MenuSetRowText(MainMenu.ArrayPtr, 3, " - Options");
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <MainMenuInit+0xb8>)
 8003e20:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <MainMenuInit+0xc8>)
 8003e26:	2103      	movs	r1, #3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff77 	bl	8003d1c <MenuSetRowText>
	MainMenu.rowAction[3] = ACTION_NOP;	
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <MainMenuInit+0xb8>)
 8003e30:	2233      	movs	r2, #51	; 0x33
 8003e32:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20001768 	.word	0x20001768
 8003e44:	08009478 	.word	0x08009478
 8003e48:	08009484 	.word	0x08009484
 8003e4c:	08009494 	.word	0x08009494
 8003e50:	080094a4 	.word	0x080094a4

08003e54 <AnimationMenuInit>:

Menu_TypeDef AnimationMenuInit(Menu_TypeDef Menu)
{
 8003e54:	b084      	sub	sp, #16
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	f107 0014 	add.w	r0, r7, #20
 8003e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Menu.ArrayPtr = &Menu.Array[0];
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	Menu.HighestRow=0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	Menu.DisplayTopRow=0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	Menu.DisplaySelectedRow=0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	Menu.DisplayBottomRow = 3*MenuRowLength;
 8003e80:	233c      	movs	r3, #60	; 0x3c
 8003e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	Menu.LowestRow = MenuRowLength*(MenuColumnLength - 1);
 8003e86:	23b4      	movs	r3, #180	; 0xb4
 8003e88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	
	MenuSetRowText(Menu.ArrayPtr, 0, AnimationMenuName);
 8003e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e90:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <AnimationMenuInit+0x110>)
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff41 	bl	8003d1c <MenuSetRowText>
	
	MenuSetRowText(Menu.ArrayPtr, 1, " Joel Mode ");
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9e:	4a32      	ldr	r2, [pc, #200]	; (8003f68 <AnimationMenuInit+0x114>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff3a 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[1] = ACTION_PLAY_ANIMATION_1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	
	MenuSetRowText(Menu.ArrayPtr, 2, " Halloween");
 8003eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <AnimationMenuInit+0x118>)
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff30 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[2] = ACTION_PLAY_ANIMATION_2;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	
	MenuSetRowText(Menu.ArrayPtr, 3, " Original Fade");
 8003ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <AnimationMenuInit+0x11c>)
 8003ec8:	2103      	movs	r1, #3
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff26 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[3] = ACTION_PLAY_ANIMATION_3;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	
	MenuSetRowText(Menu.ArrayPtr, 4, " Merry Christmas");
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <AnimationMenuInit+0x120>)
 8003edc:	2104      	movs	r1, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ff1c 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[4] = ACTION_PLAY_ANIMATION_4;
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	
	MenuSetRowText(Menu.ArrayPtr, 5, " Sliding Cubes");
 8003eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <AnimationMenuInit+0x124>)
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff12 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[5] = ACTION_PLAY_ANIMATION_5;
 8003ef8:	2305      	movs	r3, #5
 8003efa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	MenuSetRowText(Menu.ArrayPtr, 6, " Stretchy Cube");
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <AnimationMenuInit+0x128>)
 8003f04:	2106      	movs	r1, #6
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff08 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[6] = ACTION_PLAY_ANIMATION_6;
 8003f0c:	2306      	movs	r3, #6
 8003f0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	
	MenuSetRowText(Menu.ArrayPtr, 7, " Row 7");
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <AnimationMenuInit+0x12c>)
 8003f18:	2107      	movs	r1, #7
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fefe 	bl	8003d1c <MenuSetRowText>
	MenuSetRowText(Menu.ArrayPtr, 8, " Row 8");
 8003f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <AnimationMenuInit+0x130>)
 8003f26:	2108      	movs	r1, #8
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fef7 	bl	8003d1c <MenuSetRowText>
	MenuSetRowText(Menu.ArrayPtr, 9, " Back to Main Menu");
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <AnimationMenuInit+0x134>)
 8003f34:	2109      	movs	r1, #9
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fef0 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[9] = ACTION_MAIN_MENU;
 8003f3c:	2334      	movs	r3, #52	; 0x34
 8003f3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	return Menu;	
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f004 fe6a 	bl	8008c28 <memcpy>
}
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f5e:	b004      	add	sp, #16
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	080094b0 	.word	0x080094b0
 8003f68:	080094c4 	.word	0x080094c4
 8003f6c:	080094d0 	.word	0x080094d0
 8003f70:	080094dc 	.word	0x080094dc
 8003f74:	080094ec 	.word	0x080094ec
 8003f78:	08009500 	.word	0x08009500
 8003f7c:	08009510 	.word	0x08009510
 8003f80:	08009520 	.word	0x08009520
 8003f84:	08009528 	.word	0x08009528
 8003f88:	08009530 	.word	0x08009530

08003f8c <PinMappingMenuInit>:


Menu_TypeDef PinMappingMenuInit(Menu_TypeDef Menu)
{
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	f107 001c 	add.w	r0, r7, #28
 8003f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int pinMappingMenuLength = 6;
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	60fb      	str	r3, [r7, #12]
	
	Menu.ArrayPtr = &Menu.Array[0];
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	Menu.HighestRow=0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	Menu.DisplayTopRow=0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	Menu.DisplaySelectedRow=0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	Menu.DisplayBottomRow = 3*MenuRowLength;
 8003fbc:	233c      	movs	r3, #60	; 0x3c
 8003fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	Menu.LowestRow = MenuRowLength*(pinMappingMenuLength - 1);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1e5a      	subs	r2, r3, #1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	
	MenuSetRowText(Menu.ArrayPtr, 0, PinMappingMenuName);
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	4a25      	ldr	r2, [pc, #148]	; (800406c <PinMappingMenuInit+0xe0>)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fe9e 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[0] = ACTION_NOP;
 8003fe0:	2333      	movs	r3, #51	; 0x33
 8003fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	
	MenuSetRowText(Menu.ArrayPtr, 1, " LED #0");
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	4a21      	ldr	r2, [pc, #132]	; (8004070 <PinMappingMenuInit+0xe4>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fe94 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[1] = ACTION_NOP;
 8003ff4:	2333      	movs	r3, #51	; 0x33
 8003ff6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	
	MenuSetRowText(Menu.ArrayPtr, 2, " RED Val: 4000");
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <PinMappingMenuInit+0xe8>)
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fe8a 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[2] = ACTION_NOP;
 8004008:	2333      	movs	r3, #51	; 0x33
 800400a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	
	MenuSetRowText(Menu.ArrayPtr, 3, " GRN Val: 2000");
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	4a19      	ldr	r2, [pc, #100]	; (8004078 <PinMappingMenuInit+0xec>)
 8004014:	2103      	movs	r1, #3
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fe80 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[3] = ACTION_NOP;
 800401c:	2333      	movs	r3, #51	; 0x33
 800401e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	MenuSetRowText(Menu.ArrayPtr, 4, " BLU Val: 1000");
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <PinMappingMenuInit+0xf0>)
 8004028:	2104      	movs	r1, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fe76 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[4] = ACTION_NOP;
 8004030:	2333      	movs	r3, #51	; 0x33
 8004032:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	
	MenuSetRowText(Menu.ArrayPtr, 5, " Back");
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403a:	4a11      	ldr	r2, [pc, #68]	; (8004080 <PinMappingMenuInit+0xf4>)
 800403c:	2105      	movs	r1, #5
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fe6c 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[5] = ACTION_MAIN_MENU;
 8004044:	2334      	movs	r3, #52	; 0x34
 8004046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	return Menu;	
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	f107 031c 	add.w	r3, r7, #28
 8004052:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004056:	4619      	mov	r1, r3
 8004058:	f004 fde6 	bl	8008c28 <memcpy>
}
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004066:	b004      	add	sp, #16
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	08009544 	.word	0x08009544
 8004070:	08009554 	.word	0x08009554
 8004074:	0800955c 	.word	0x0800955c
 8004078:	0800956c 	.word	0x0800956c
 800407c:	0800957c 	.word	0x0800957c
 8004080:	0800958c 	.word	0x0800958c

08004084 <ActiveAnimationMenuInit>:


Menu_TypeDef ActiveAnimationMenuInit(Menu_TypeDef Menu)
{
 8004084:	b084      	sub	sp, #16
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	f107 0014 	add.w	r0, r7, #20
 8004092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Menu.ArrayPtr = &Menu.Array[0];
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	Menu.HighestRow=0;
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	Menu.DisplayTopRow=0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	Menu.DisplaySelectedRow=0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	Menu.DisplayBottomRow = 3*MenuRowLength;
 80040b0:	233c      	movs	r3, #60	; 0x3c
 80040b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	Menu.LowestRow = Menu.DisplayBottomRow;
 80040b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	
	MenuSetRowText(Menu.ArrayPtr, 0, " Active Animation: ");
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <ActiveAnimationMenuInit+0xac>)
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fe28 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[0] = ACTION_NOP;
 80040cc:	2333      	movs	r3, #51	; 0x33
 80040ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	
	MenuSetRowText(Menu.ArrayPtr, 1, " Brightness: 100%");
 80040d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <ActiveAnimationMenuInit+0xb0>)
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe1e 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[1] = ACTION_NOP;
 80040e0:	2333      	movs	r3, #51	; 0x33
 80040e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	
	MenuSetRowText(Menu.ArrayPtr, 2, " Play/Pause");
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <ActiveAnimationMenuInit+0xb4>)
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fe14 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[2] = ACTION_PAUSE_ANIMATION;
 80040f4:	2337      	movs	r3, #55	; 0x37
 80040f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	
	MenuSetRowText(Menu.ArrayPtr, 3, " Halt & Exit");
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	4a0f      	ldr	r2, [pc, #60]	; (800413c <ActiveAnimationMenuInit+0xb8>)
 8004100:	2103      	movs	r1, #3
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe0a 	bl	8003d1c <MenuSetRowText>
	Menu.rowAction[3] = ACTION_HALT_ANIMATION;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	return Menu;	
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	f44f 7288 	mov.w	r2, #272	; 0x110
 800411a:	4619      	mov	r1, r3
 800411c:	f004 fd84 	bl	8008c28 <memcpy>
}
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800412a:	b004      	add	sp, #16
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	08009594 	.word	0x08009594
 8004134:	080095a8 	.word	0x080095a8
 8004138:	080095bc 	.word	0x080095bc
 800413c:	080095c8 	.word	0x080095c8

08004140 <MenuButtonPressed>:
//The passed in menu is scrutinized to determine what action to perform
//MainMenu, ApplicationMenu, and PinMapping  Menu are global so don't need to be passed in/out
// the display is updated accordingly
//The same menu is passed out in case it was modified (such as Menu.active toggled)
Menu_TypeDef MenuButtonPressed(Menu_TypeDef Menu)
{
 8004140:	b084      	sub	sp, #16
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b0c3      	sub	sp, #268	; 0x10c
 8004146:	af40      	add	r7, sp, #256	; 0x100
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	f107 001c 	add.w	r0, r7, #28
 800414e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if (Menu.rowAction[Menu.selectedRowNum] == ACTION_NOP) return Menu;
 8004152:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004156:	3338      	adds	r3, #56	; 0x38
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	f107 0218 	add.w	r2, r7, #24
 800415e:	4413      	add	r3, r2
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b33      	cmp	r3, #51	; 0x33
 8004164:	d109      	bne.n	800417a <MenuButtonPressed+0x3a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004172:	4619      	mov	r1, r3
 8004174:	f004 fd58 	bl	8008c28 <memcpy>
 8004178:	e0e4      	b.n	8004344 <MenuButtonPressed+0x204>
	
	if (Menu.rowAction[Menu.selectedRowNum] == ACTION_MAIN_MENU)
 800417a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800417e:	3338      	adds	r3, #56	; 0x38
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	f107 0218 	add.w	r2, r7, #24
 8004186:	4413      	add	r3, r2
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b34      	cmp	r3, #52	; 0x34
 800418c:	d11d      	bne.n	80041ca <MenuButtonPressed+0x8a>
	{
		Menu.active = false;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
		MainMenu.active = true;
 8004194:	4b6f      	ldr	r3, [pc, #444]	; (8004354 <MenuButtonPressed+0x214>)
 8004196:	2201      	movs	r2, #1
 8004198:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		MenuDisplayUpdate(MainMenu);
 800419c:	4c6d      	ldr	r4, [pc, #436]	; (8004354 <MenuButtonPressed+0x214>)
 800419e:	4668      	mov	r0, sp
 80041a0:	f104 0310 	add.w	r3, r4, #16
 80041a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a8:	4619      	mov	r1, r3
 80041aa:	f004 fd3d 	bl	8008c28 <memcpy>
 80041ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041b2:	f7ff fd1f 	bl	8003bf4 <MenuDisplayUpdate>
		return Menu;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80041c2:	4619      	mov	r1, r3
 80041c4:	f004 fd30 	bl	8008c28 <memcpy>
 80041c8:	e0bc      	b.n	8004344 <MenuButtonPressed+0x204>
	}
		
	if (Menu.rowAction[Menu.selectedRowNum] == ACTION_ANIMATION_MENU)
 80041ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041ce:	3338      	adds	r3, #56	; 0x38
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f107 0218 	add.w	r2, r7, #24
 80041d6:	4413      	add	r3, r2
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b35      	cmp	r3, #53	; 0x35
 80041dc:	d11d      	bne.n	800421a <MenuButtonPressed+0xda>
	{
		Menu.active = false;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
		AnimationMenu.active = true;
 80041e4:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <MenuButtonPressed+0x218>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		MenuDisplayUpdate(AnimationMenu);
 80041ec:	4c5a      	ldr	r4, [pc, #360]	; (8004358 <MenuButtonPressed+0x218>)
 80041ee:	4668      	mov	r0, sp
 80041f0:	f104 0310 	add.w	r3, r4, #16
 80041f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f8:	4619      	mov	r1, r3
 80041fa:	f004 fd15 	bl	8008c28 <memcpy>
 80041fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004202:	f7ff fcf7 	bl	8003bf4 <MenuDisplayUpdate>
		return Menu;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	f107 031c 	add.w	r3, r7, #28
 800420e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004212:	4619      	mov	r1, r3
 8004214:	f004 fd08 	bl	8008c28 <memcpy>
 8004218:	e094      	b.n	8004344 <MenuButtonPressed+0x204>
	}
	
	if (Menu.rowAction[Menu.selectedRowNum] == ACTION_PIN_MAPPING_MENU)
 800421a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800421e:	3338      	adds	r3, #56	; 0x38
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f107 0218 	add.w	r2, r7, #24
 8004226:	4413      	add	r3, r2
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b36      	cmp	r3, #54	; 0x36
 800422c:	d11d      	bne.n	800426a <MenuButtonPressed+0x12a>
	{
		Menu.active = false;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
		PinMappingMenu.active = true;
 8004234:	4b49      	ldr	r3, [pc, #292]	; (800435c <MenuButtonPressed+0x21c>)
 8004236:	2201      	movs	r2, #1
 8004238:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		MenuDisplayUpdate(PinMappingMenu);
 800423c:	4c47      	ldr	r4, [pc, #284]	; (800435c <MenuButtonPressed+0x21c>)
 800423e:	4668      	mov	r0, sp
 8004240:	f104 0310 	add.w	r3, r4, #16
 8004244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004248:	4619      	mov	r1, r3
 800424a:	f004 fced 	bl	8008c28 <memcpy>
 800424e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004252:	f7ff fccf 	bl	8003bf4 <MenuDisplayUpdate>
		return Menu;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f107 031c 	add.w	r3, r7, #28
 800425e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004262:	4619      	mov	r1, r3
 8004264:	f004 fce0 	bl	8008c28 <memcpy>
 8004268:	e06c      	b.n	8004344 <MenuButtonPressed+0x204>
	}
	
	if (Menu.rowAction[Menu.selectedRowNum] == ACTION_HALT_ANIMATION)
 800426a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f107 0218 	add.w	r2, r7, #24
 8004276:	4413      	add	r3, r2
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11d      	bne.n	80042ba <MenuButtonPressed+0x17a>
	{
		Menu.active = false;
 800427e:	2300      	movs	r3, #0
 8004280:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
		AnimationMenu.active = true;
 8004284:	4b34      	ldr	r3, [pc, #208]	; (8004358 <MenuButtonPressed+0x218>)
 8004286:	2201      	movs	r2, #1
 8004288:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		MenuDisplayUpdate(AnimationMenu);
 800428c:	4c32      	ldr	r4, [pc, #200]	; (8004358 <MenuButtonPressed+0x218>)
 800428e:	4668      	mov	r0, sp
 8004290:	f104 0310 	add.w	r3, r4, #16
 8004294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004298:	4619      	mov	r1, r3
 800429a:	f004 fcc5 	bl	8008c28 <memcpy>
 800429e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042a2:	f7ff fca7 	bl	8003bf4 <MenuDisplayUpdate>
		return Menu;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f107 031c 	add.w	r3, r7, #28
 80042ae:	f44f 7288 	mov.w	r2, #272	; 0x110
 80042b2:	4619      	mov	r1, r3
 80042b4:	f004 fcb8 	bl	8008c28 <memcpy>
 80042b8:	e044      	b.n	8004344 <MenuButtonPressed+0x204>
	}
	
	
	if ((Menu.rowAction[Menu.selectedRowNum] >= ACTION_PLAY_ANIMATION_1) & (Menu.rowAction[Menu.selectedRowNum] <= ACTION_PLAY_ANIMATION_50))
 80042ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042be:	3338      	adds	r3, #56	; 0x38
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f107 0218 	add.w	r2, r7, #24
 80042c6:	4413      	add	r3, r2
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfcc      	ite	gt
 80042ce:	2301      	movgt	r3, #1
 80042d0:	2300      	movle	r3, #0
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042d8:	3338      	adds	r3, #56	; 0x38
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f107 0118 	add.w	r1, r7, #24
 80042e0:	440b      	add	r3, r1
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b0a      	cmp	r3, #10
 80042e6:	bfd4      	ite	le
 80042e8:	2301      	movle	r3, #1
 80042ea:	2300      	movgt	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4013      	ands	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <MenuButtonPressed+0x1f2>
	{
		Menu.active = false;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
		ActiveAnimationMenu.active = true;
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <MenuButtonPressed+0x220>)
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		MenuDisplayUpdate(ActiveAnimationMenu);
 8004304:	4c16      	ldr	r4, [pc, #88]	; (8004360 <MenuButtonPressed+0x220>)
 8004306:	4668      	mov	r0, sp
 8004308:	f104 0310 	add.w	r3, r4, #16
 800430c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004310:	4619      	mov	r1, r3
 8004312:	f004 fc89 	bl	8008c28 <memcpy>
 8004316:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800431a:	f7ff fc6b 	bl	8003bf4 <MenuDisplayUpdate>
		return Menu;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f107 031c 	add.w	r3, r7, #28
 8004326:	f44f 7288 	mov.w	r2, #272	; 0x110
 800432a:	4619      	mov	r1, r3
 800432c:	f004 fc7c 	bl	8008c28 <memcpy>
 8004330:	e008      	b.n	8004344 <MenuButtonPressed+0x204>
	}
	return Menu;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	f107 031c 	add.w	r3, r7, #28
 800433a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800433e:	4619      	mov	r1, r3
 8004340:	f004 fc72 	bl	8008c28 <memcpy>
}
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800434e:	b004      	add	sp, #16
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20001768 	.word	0x20001768
 8004358:	2000198c 	.word	0x2000198c
 800435c:	2000187c 	.word	0x2000187c
 8004360:	20001a9c 	.word	0x20001a9c

08004364 <MenuSystemInit>:

/**
 * @brief Establishes & verifies connectivity with the LCD & capacitive touch sensors
 **/
void MenuSystemInit(I2C_HandleTypeDef hi2c)
{
 8004364:	b084      	sub	sp, #16
 8004366:	b580      	push	{r7, lr}
 8004368:	af00      	add	r7, sp, #0
 800436a:	f107 0c08 	add.w	ip, r7, #8
 800436e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//lcd20x4_i2c_init(&hi2c);
	HAL_Delay(100);
 8004372:	2064      	movs	r0, #100	; 0x64
 8004374:	f001 f90c 	bl	8005590 <HAL_Delay>
	mpr121_init(&hi2c, (KEYPAD_ADDRESS<<1), &hi2c);	
 8004378:	f107 0208 	add.w	r2, r7, #8
 800437c:	21b6      	movs	r1, #182	; 0xb6
 800437e:	f107 0008 	add.w	r0, r7, #8
 8004382:	f000 fb9f 	bl	8004ac4 <mpr121_init>
	HAL_Delay(100);
 8004386:	2064      	movs	r0, #100	; 0x64
 8004388:	f001 f902 	bl	8005590 <HAL_Delay>
	mpr121_init(&hi2c, (WHEEL_ADDRESS<<1), &hi2c);
 800438c:	f107 0208 	add.w	r2, r7, #8
 8004390:	21b4      	movs	r1, #180	; 0xb4
 8004392:	f107 0008 	add.w	r0, r7, #8
 8004396:	f000 fb95 	bl	8004ac4 <mpr121_init>
	HAL_Delay(100);
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	f001 f8f8 	bl	8005590 <HAL_Delay>
	lcd20x4_i2c_clear();
 80043a0:	f7fe fc31 	bl	8002c06 <lcd20x4_i2c_clear>
	HAL_Delay(100);	
 80043a4:	2064      	movs	r0, #100	; 0x64
 80043a6:	f001 f8f3 	bl	8005590 <HAL_Delay>
	
	lcd20x4_i2c_1stLine();
 80043aa:	f7fe fbf9 	bl	8002ba0 <lcd20x4_i2c_1stLine>
	lcd20x4_i2c_printf("8x8x8 RGB LED Cube");
 80043ae:	482a      	ldr	r0, [pc, #168]	; (8004458 <MenuSystemInit+0xf4>)
 80043b0:	f7fe fc33 	bl	8002c1a <lcd20x4_i2c_printf>
	lcd20x4_i2c_2ndLine();
 80043b4:	f7fe fbfc 	bl	8002bb0 <lcd20x4_i2c_2ndLine>
	lcd20x4_i2c_printf("FW Version: v1.0.1.0");
 80043b8:	4828      	ldr	r0, [pc, #160]	; (800445c <MenuSystemInit+0xf8>)
 80043ba:	f7fe fc2e 	bl	8002c1a <lcd20x4_i2c_printf>
	lcd20x4_i2c_3rdLine();
 80043be:	f7fe fbff 	bl	8002bc0 <lcd20x4_i2c_3rdLine>
	lcd20x4_i2c_printf("Designed by:");
 80043c2:	4827      	ldr	r0, [pc, #156]	; (8004460 <MenuSystemInit+0xfc>)
 80043c4:	f7fe fc29 	bl	8002c1a <lcd20x4_i2c_printf>
	lcd20x4_i2c_4thLine();
 80043c8:	f7fe fc02 	bl	8002bd0 <lcd20x4_i2c_4thLine>
	lcd20x4_i2c_printf("Joel Michaelis :^)");
 80043cc:	4825      	ldr	r0, [pc, #148]	; (8004464 <MenuSystemInit+0x100>)
 80043ce:	f7fe fc24 	bl	8002c1a <lcd20x4_i2c_printf>
	HAL_Delay(6000);
 80043d2:	f241 7070 	movw	r0, #6000	; 0x1770
 80043d6:	f001 f8db 	bl	8005590 <HAL_Delay>
	lcd20x4_i2c_clear();
 80043da:	f7fe fc14 	bl	8002c06 <lcd20x4_i2c_clear>

	lcd20x4_i2c_2ndLine();
 80043de:	f7fe fbe7 	bl	8002bb0 <lcd20x4_i2c_2ndLine>
	if(HAL_I2C_IsDeviceReady(&hi2c, (KEYPAD_ADDRESS<<1), 2, 10) == HAL_OK)
 80043e2:	230a      	movs	r3, #10
 80043e4:	2202      	movs	r2, #2
 80043e6:	21b6      	movs	r1, #182	; 0xb6
 80043e8:	f107 0008 	add.w	r0, r7, #8
 80043ec:	f001 fffe 	bl	80063ec <HAL_I2C_IsDeviceReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <MenuSystemInit+0xa0>
		{
			HAL_Delay(50);
 80043f6:	2032      	movs	r0, #50	; 0x32
 80043f8:	f001 f8ca 	bl	8005590 <HAL_Delay>
			lcd20x4_i2c_printf("Keypad Ready!");
 80043fc:	481a      	ldr	r0, [pc, #104]	; (8004468 <MenuSystemInit+0x104>)
 80043fe:	f7fe fc0c 	bl	8002c1a <lcd20x4_i2c_printf>
 8004402:	e002      	b.n	800440a <MenuSystemInit+0xa6>
		}
	else lcd20x4_i2c_printf("Keypad Init Failed");
 8004404:	4819      	ldr	r0, [pc, #100]	; (800446c <MenuSystemInit+0x108>)
 8004406:	f7fe fc08 	bl	8002c1a <lcd20x4_i2c_printf>
	
	lcd20x4_i2c_3rdLine();		
 800440a:	f7fe fbd9 	bl	8002bc0 <lcd20x4_i2c_3rdLine>
	if(HAL_I2C_IsDeviceReady(&hi2c, (WHEEL_ADDRESS<<1), 2, 10) == HAL_OK)
 800440e:	230a      	movs	r3, #10
 8004410:	2202      	movs	r2, #2
 8004412:	21b4      	movs	r1, #180	; 0xb4
 8004414:	f107 0008 	add.w	r0, r7, #8
 8004418:	f001 ffe8 	bl	80063ec <HAL_I2C_IsDeviceReady>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <MenuSystemInit+0xcc>
		{
			HAL_Delay(50);
 8004422:	2032      	movs	r0, #50	; 0x32
 8004424:	f001 f8b4 	bl	8005590 <HAL_Delay>
			lcd20x4_i2c_printf("Wheel Ready!");
 8004428:	4811      	ldr	r0, [pc, #68]	; (8004470 <MenuSystemInit+0x10c>)
 800442a:	f7fe fbf6 	bl	8002c1a <lcd20x4_i2c_printf>
 800442e:	e002      	b.n	8004436 <MenuSystemInit+0xd2>
		}
	else lcd20x4_i2c_printf("Wheel Init Failed");
 8004430:	4810      	ldr	r0, [pc, #64]	; (8004474 <MenuSystemInit+0x110>)
 8004432:	f7fe fbf2 	bl	8002c1a <lcd20x4_i2c_printf>
	
		
	
	HAL_Delay(1000);
 8004436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800443a:	f001 f8a9 	bl	8005590 <HAL_Delay>
	lcd20x4_i2c_clear();
 800443e:	f7fe fbe2 	bl	8002c06 <lcd20x4_i2c_clear>
	lcd20x4_i2c_1stLine();	
 8004442:	f7fe fbad 	bl	8002ba0 <lcd20x4_i2c_1stLine>
	lcd20x4_i2c_cursorShow(1);
 8004446:	2001      	movs	r0, #1
 8004448:	f7fe fbca 	bl	8002be0 <lcd20x4_i2c_cursorShow>
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004454:	b004      	add	sp, #16
 8004456:	4770      	bx	lr
 8004458:	080095d8 	.word	0x080095d8
 800445c:	080095ec 	.word	0x080095ec
 8004460:	08009604 	.word	0x08009604
 8004464:	08009614 	.word	0x08009614
 8004468:	08009628 	.word	0x08009628
 800446c:	08009638 	.word	0x08009638
 8004470:	0800964c 	.word	0x0800964c
 8004474:	0800965c 	.word	0x0800965c

08004478 <Menu_Read_MPR121>:

/**
 * @brief exactly what it sounds like
 **/
uint16_t Menu_Read_MPR121(I2C_HandleTypeDef hi2c, uint16_t GPIO_Pin, uint16_t currentAction)
{
 8004478:	b084      	sub	sp, #16
 800447a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447c:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8004480:	af42      	add	r7, sp, #264	; 0x108
 8004482:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8004486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Keypad_IRQ = false;
 800448a:	4b66      	ldr	r3, [pc, #408]	; (8004624 <Menu_Read_MPR121+0x1ac>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
	Wheel_IRQ = false;
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <Menu_Read_MPR121+0x1b0>)
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
	
	//ensures that MPR121s aren't read while LCD is being written to
	I2C_HandleTypeDef *phi2c1 = &hi2c;
 8004496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	if (phi2c1->State != HAL_I2C_STATE_READY)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d010      	beq.n	80044ce <Menu_Read_MPR121+0x56>
	{
		if (GPIO_Pin == Keypad_IRQ_Pin) Keypad_IRQ = true;
 80044ac:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d102      	bne.n	80044ba <Menu_Read_MPR121+0x42>
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <Menu_Read_MPR121+0x1ac>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == Wheel_IRQ_Pin) Wheel_IRQ = true;
 80044ba:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d102      	bne.n	80044c8 <Menu_Read_MPR121+0x50>
 80044c2:	4b59      	ldr	r3, [pc, #356]	; (8004628 <Menu_Read_MPR121+0x1b0>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
		return currentAction;
 80044c8:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 80044cc:	e288      	b.n	80049e0 <Menu_Read_MPR121+0x568>
	}
	
	if(GPIO_Pin == Wheel_IRQ_Pin)
 80044ce:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	f040 826b 	bne.w	80049ae <Menu_Read_MPR121+0x536>
	{
		while(HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY)
 80044d8:	bf00      	nop
 80044da:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80044de:	f002 f8a7 	bl	8006630 <HAL_I2C_GetState>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d1f8      	bne.n	80044da <Menu_Read_MPR121+0x62>
    {
    }
		
		lastWheelDir = wheelDir;
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <Menu_Read_MPR121+0x1b4>)
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	4b50      	ldr	r3, [pc, #320]	; (8004630 <Menu_Read_MPR121+0x1b8>)
 80044ee:	701a      	strb	r2, [r3, #0]
		wheelDir = mpr121_wheel(&hi2c, (WHEEL_ADDRESS<<1), wheelDir);
 80044f0:	4b4e      	ldr	r3, [pc, #312]	; (800462c <Menu_Read_MPR121+0x1b4>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	21b4      	movs	r1, #180	; 0xb4
 80044f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80044fc:	f000 fc25 	bl	8004d4a <mpr121_wheel>
 8004500:	4603      	mov	r3, r0
 8004502:	461a      	mov	r2, r3
 8004504:	4b49      	ldr	r3, [pc, #292]	; (800462c <Menu_Read_MPR121+0x1b4>)
 8004506:	701a      	strb	r2, [r3, #0]
		HAL_Delay(mpr121ReadDelayms);
 8004508:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <Menu_Read_MPR121+0x1bc>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f001 f83f 	bl	8005590 <HAL_Delay>
		
		if ((wheelDir == 'C') & (lastWheelDir != 'C'))	//since the program recognizes touch & release
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <Menu_Read_MPR121+0x1b4>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b43      	cmp	r3, #67	; 0x43
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <Menu_Read_MPR121+0x1b8>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b43      	cmp	r3, #67	; 0x43
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4013      	ands	r3, r2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80b2 	beq.w	800469c <Menu_Read_MPR121+0x224>
		{	
			if (MainMenu.active == true) 
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <Menu_Read_MPR121+0x1c0>)
 800453a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d021      	beq.n	8004586 <Menu_Read_MPR121+0x10e>
			{
				MainMenu = MenuButtonPressed(MainMenu);
 8004542:	4e3d      	ldr	r6, [pc, #244]	; (8004638 <Menu_Read_MPR121+0x1c0>)
 8004544:	463d      	mov	r5, r7
 8004546:	4c3c      	ldr	r4, [pc, #240]	; (8004638 <Menu_Read_MPR121+0x1c0>)
 8004548:	4668      	mov	r0, sp
 800454a:	f104 030c 	add.w	r3, r4, #12
 800454e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004552:	4619      	mov	r1, r3
 8004554:	f004 fb68 	bl	8008c28 <memcpy>
 8004558:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800455c:	4628      	mov	r0, r5
 800455e:	f7ff fdef 	bl	8004140 <MenuButtonPressed>
 8004562:	463b      	mov	r3, r7
 8004564:	4630      	mov	r0, r6
 8004566:	4619      	mov	r1, r3
 8004568:	f44f 7388 	mov.w	r3, #272	; 0x110
 800456c:	461a      	mov	r2, r3
 800456e:	f004 fb5b 	bl	8008c28 <memcpy>
				currentAction = MainMenu.rowAction[MainMenu.selectedRowNum];
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <Menu_Read_MPR121+0x1c0>)
 8004574:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004578:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <Menu_Read_MPR121+0x1c0>)
 800457a:	3338      	adds	r3, #56	; 0x38
 800457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004580:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 8004584:	e084      	b.n	8004690 <Menu_Read_MPR121+0x218>
			}
			else if (AnimationMenu.active == true) 
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <Menu_Read_MPR121+0x1c4>)
 8004588:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d021      	beq.n	80045d4 <Menu_Read_MPR121+0x15c>
			{
				AnimationMenu = MenuButtonPressed(AnimationMenu);
 8004590:	4e2a      	ldr	r6, [pc, #168]	; (800463c <Menu_Read_MPR121+0x1c4>)
 8004592:	463d      	mov	r5, r7
 8004594:	4c29      	ldr	r4, [pc, #164]	; (800463c <Menu_Read_MPR121+0x1c4>)
 8004596:	4668      	mov	r0, sp
 8004598:	f104 030c 	add.w	r3, r4, #12
 800459c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045a0:	4619      	mov	r1, r3
 80045a2:	f004 fb41 	bl	8008c28 <memcpy>
 80045a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff fdc8 	bl	8004140 <MenuButtonPressed>
 80045b0:	463b      	mov	r3, r7
 80045b2:	4630      	mov	r0, r6
 80045b4:	4619      	mov	r1, r3
 80045b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80045ba:	461a      	mov	r2, r3
 80045bc:	f004 fb34 	bl	8008c28 <memcpy>
				currentAction = AnimationMenu.rowAction[AnimationMenu.selectedRowNum];
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <Menu_Read_MPR121+0x1c4>)
 80045c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <Menu_Read_MPR121+0x1c4>)
 80045c8:	3338      	adds	r3, #56	; 0x38
 80045ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ce:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 80045d2:	e05d      	b.n	8004690 <Menu_Read_MPR121+0x218>
			}
			else if (PinMappingMenu.active == true) 
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <Menu_Read_MPR121+0x1c8>)
 80045d6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d032      	beq.n	8004644 <Menu_Read_MPR121+0x1cc>
			{
				PinMappingMenu = MenuButtonPressed(PinMappingMenu);
 80045de:	4e18      	ldr	r6, [pc, #96]	; (8004640 <Menu_Read_MPR121+0x1c8>)
 80045e0:	463d      	mov	r5, r7
 80045e2:	4c17      	ldr	r4, [pc, #92]	; (8004640 <Menu_Read_MPR121+0x1c8>)
 80045e4:	4668      	mov	r0, sp
 80045e6:	f104 030c 	add.w	r3, r4, #12
 80045ea:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045ee:	4619      	mov	r1, r3
 80045f0:	f004 fb1a 	bl	8008c28 <memcpy>
 80045f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7ff fda1 	bl	8004140 <MenuButtonPressed>
 80045fe:	463b      	mov	r3, r7
 8004600:	4630      	mov	r0, r6
 8004602:	4619      	mov	r1, r3
 8004604:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004608:	461a      	mov	r2, r3
 800460a:	f004 fb0d 	bl	8008c28 <memcpy>
				currentAction = PinMappingMenu.rowAction[PinMappingMenu.selectedRowNum];
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <Menu_Read_MPR121+0x1c8>)
 8004610:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004614:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <Menu_Read_MPR121+0x1c8>)
 8004616:	3338      	adds	r3, #56	; 0x38
 8004618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461c:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 8004620:	e036      	b.n	8004690 <Menu_Read_MPR121+0x218>
 8004622:	bf00      	nop
 8004624:	200006cf 	.word	0x200006cf
 8004628:	200006d0 	.word	0x200006d0
 800462c:	200005ec 	.word	0x200005ec
 8004630:	200005eb 	.word	0x200005eb
 8004634:	200005ea 	.word	0x200005ea
 8004638:	20001768 	.word	0x20001768
 800463c:	2000198c 	.word	0x2000198c
 8004640:	2000187c 	.word	0x2000187c
			}
			else if (ActiveAnimationMenu.active == true) 
 8004644:	4bb5      	ldr	r3, [pc, #724]	; (800491c <Menu_Read_MPR121+0x4a4>)
 8004646:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <Menu_Read_MPR121+0x218>
			{
				ActiveAnimationMenu = MenuButtonPressed(ActiveAnimationMenu);
 800464e:	4eb3      	ldr	r6, [pc, #716]	; (800491c <Menu_Read_MPR121+0x4a4>)
 8004650:	463d      	mov	r5, r7
 8004652:	4cb2      	ldr	r4, [pc, #712]	; (800491c <Menu_Read_MPR121+0x4a4>)
 8004654:	4668      	mov	r0, sp
 8004656:	f104 030c 	add.w	r3, r4, #12
 800465a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800465e:	4619      	mov	r1, r3
 8004660:	f004 fae2 	bl	8008c28 <memcpy>
 8004664:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004668:	4628      	mov	r0, r5
 800466a:	f7ff fd69 	bl	8004140 <MenuButtonPressed>
 800466e:	463b      	mov	r3, r7
 8004670:	4630      	mov	r0, r6
 8004672:	4619      	mov	r1, r3
 8004674:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004678:	461a      	mov	r2, r3
 800467a:	f004 fad5 	bl	8008c28 <memcpy>
				currentAction = ActiveAnimationMenu.rowAction[ActiveAnimationMenu.selectedRowNum];
 800467e:	4ba7      	ldr	r3, [pc, #668]	; (800491c <Menu_Read_MPR121+0x4a4>)
 8004680:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004684:	4aa5      	ldr	r2, [pc, #660]	; (800491c <Menu_Read_MPR121+0x4a4>)
 8004686:	3338      	adds	r3, #56	; 0x38
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
			}
			wheelDir = 'X';
 8004690:	4ba3      	ldr	r3, [pc, #652]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 8004692:	2258      	movs	r2, #88	; 0x58
 8004694:	701a      	strb	r2, [r3, #0]
			lastWheelDir = 'X';
 8004696:	4ba3      	ldr	r3, [pc, #652]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 8004698:	2258      	movs	r2, #88	; 0x58
 800469a:	701a      	strb	r2, [r3, #0]
		}
		
		if ((wheelDir=='E'&lastWheelDir=='N')|(wheelDir=='S'&lastWheelDir=='E')|(wheelDir=='W'&lastWheelDir=='S')|(wheelDir=='N'&lastWheelDir=='W'))
 800469c:	4ba0      	ldr	r3, [pc, #640]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b45      	cmp	r3, #69	; 0x45
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b9e      	ldr	r3, [pc, #632]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b4e      	cmp	r3, #78	; 0x4e
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	4013      	ands	r3, r2
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b98      	ldr	r3, [pc, #608]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b53      	cmp	r3, #83	; 0x53
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2d9      	uxtb	r1, r3
 80046ca:	4b96      	ldr	r3, [pc, #600]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b45      	cmp	r3, #69	; 0x45
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	400b      	ands	r3, r1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	4313      	orrs	r3, r2
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b8f      	ldr	r3, [pc, #572]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b57      	cmp	r3, #87	; 0x57
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b53      	cmp	r3, #83	; 0x53
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	400b      	ands	r3, r1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	b2da      	uxtb	r2, r3
 8004704:	4b86      	ldr	r3, [pc, #536]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b4e      	cmp	r3, #78	; 0x4e
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2d9      	uxtb	r1, r3
 8004712:	4b84      	ldr	r3, [pc, #528]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b57      	cmp	r3, #87	; 0x57
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	400b      	ands	r3, r1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d073      	beq.n	8004814 <Menu_Read_MPR121+0x39c>
		{
			if (MainMenu.active == true) 				MainMenu = MenuScrollUp(MainMenu);
 800472c:	4b7e      	ldr	r3, [pc, #504]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 800472e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <Menu_Read_MPR121+0x2ee>
 8004736:	4e7c      	ldr	r6, [pc, #496]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 8004738:	463d      	mov	r5, r7
 800473a:	4c7b      	ldr	r4, [pc, #492]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 800473c:	4668      	mov	r0, sp
 800473e:	f104 030c 	add.w	r3, r4, #12
 8004742:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004746:	4619      	mov	r1, r3
 8004748:	f004 fa6e 	bl	8008c28 <memcpy>
 800474c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004750:	4628      	mov	r0, r5
 8004752:	f7ff f9af 	bl	8003ab4 <MenuScrollUp>
 8004756:	463b      	mov	r3, r7
 8004758:	4630      	mov	r0, r6
 800475a:	4619      	mov	r1, r3
 800475c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004760:	461a      	mov	r2, r3
 8004762:	f004 fa61 	bl	8008c28 <memcpy>
			if (AnimationMenu.active == true)		AnimationMenu = MenuScrollUp(AnimationMenu);
 8004766:	4b71      	ldr	r3, [pc, #452]	; (800492c <Menu_Read_MPR121+0x4b4>)
 8004768:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <Menu_Read_MPR121+0x328>
 8004770:	4e6e      	ldr	r6, [pc, #440]	; (800492c <Menu_Read_MPR121+0x4b4>)
 8004772:	463d      	mov	r5, r7
 8004774:	4c6d      	ldr	r4, [pc, #436]	; (800492c <Menu_Read_MPR121+0x4b4>)
 8004776:	4668      	mov	r0, sp
 8004778:	f104 030c 	add.w	r3, r4, #12
 800477c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004780:	4619      	mov	r1, r3
 8004782:	f004 fa51 	bl	8008c28 <memcpy>
 8004786:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800478a:	4628      	mov	r0, r5
 800478c:	f7ff f992 	bl	8003ab4 <MenuScrollUp>
 8004790:	463b      	mov	r3, r7
 8004792:	4630      	mov	r0, r6
 8004794:	4619      	mov	r1, r3
 8004796:	f44f 7388 	mov.w	r3, #272	; 0x110
 800479a:	461a      	mov	r2, r3
 800479c:	f004 fa44 	bl	8008c28 <memcpy>
			if (PinMappingMenu.active == true)	PinMappingMenu = MenuScrollUp(PinMappingMenu);
 80047a0:	4b63      	ldr	r3, [pc, #396]	; (8004930 <Menu_Read_MPR121+0x4b8>)
 80047a2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d017      	beq.n	80047da <Menu_Read_MPR121+0x362>
 80047aa:	4e61      	ldr	r6, [pc, #388]	; (8004930 <Menu_Read_MPR121+0x4b8>)
 80047ac:	463d      	mov	r5, r7
 80047ae:	4c60      	ldr	r4, [pc, #384]	; (8004930 <Menu_Read_MPR121+0x4b8>)
 80047b0:	4668      	mov	r0, sp
 80047b2:	f104 030c 	add.w	r3, r4, #12
 80047b6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047ba:	4619      	mov	r1, r3
 80047bc:	f004 fa34 	bl	8008c28 <memcpy>
 80047c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80047c4:	4628      	mov	r0, r5
 80047c6:	f7ff f975 	bl	8003ab4 <MenuScrollUp>
 80047ca:	463b      	mov	r3, r7
 80047cc:	4630      	mov	r0, r6
 80047ce:	4619      	mov	r1, r3
 80047d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80047d4:	461a      	mov	r2, r3
 80047d6:	f004 fa27 	bl	8008c28 <memcpy>
			if (ActiveAnimationMenu.active == true)	ActiveAnimationMenu = MenuScrollUp(ActiveAnimationMenu);
 80047da:	4b50      	ldr	r3, [pc, #320]	; (800491c <Menu_Read_MPR121+0x4a4>)
 80047dc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d017      	beq.n	8004814 <Menu_Read_MPR121+0x39c>
 80047e4:	4e4d      	ldr	r6, [pc, #308]	; (800491c <Menu_Read_MPR121+0x4a4>)
 80047e6:	463d      	mov	r5, r7
 80047e8:	4c4c      	ldr	r4, [pc, #304]	; (800491c <Menu_Read_MPR121+0x4a4>)
 80047ea:	4668      	mov	r0, sp
 80047ec:	f104 030c 	add.w	r3, r4, #12
 80047f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047f4:	4619      	mov	r1, r3
 80047f6:	f004 fa17 	bl	8008c28 <memcpy>
 80047fa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80047fe:	4628      	mov	r0, r5
 8004800:	f7ff f958 	bl	8003ab4 <MenuScrollUp>
 8004804:	463b      	mov	r3, r7
 8004806:	4630      	mov	r0, r6
 8004808:	4619      	mov	r1, r3
 800480a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800480e:	461a      	mov	r2, r3
 8004810:	f004 fa0a 	bl	8008c28 <memcpy>
		}

		if ((wheelDir=='W'&lastWheelDir=='N')|(wheelDir=='N'&lastWheelDir=='E')|(wheelDir=='E'&lastWheelDir=='S')|(wheelDir=='S'&lastWheelDir=='W'))
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b57      	cmp	r3, #87	; 0x57
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4b40      	ldr	r3, [pc, #256]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b4e      	cmp	r3, #78	; 0x4e
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4013      	ands	r3, r2
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b4e      	cmp	r3, #78	; 0x4e
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2d9      	uxtb	r1, r3
 8004842:	4b38      	ldr	r3, [pc, #224]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b45      	cmp	r3, #69	; 0x45
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	400b      	ands	r3, r1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4313      	orrs	r3, r2
 8004856:	b2da      	uxtb	r2, r3
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b45      	cmp	r3, #69	; 0x45
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2d9      	uxtb	r1, r3
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b53      	cmp	r3, #83	; 0x53
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	400b      	ands	r3, r1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	b2da      	uxtb	r2, r3
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <Menu_Read_MPR121+0x4a8>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b53      	cmp	r3, #83	; 0x53
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2d9      	uxtb	r1, r3
 800488a:	4b26      	ldr	r3, [pc, #152]	; (8004924 <Menu_Read_MPR121+0x4ac>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b57      	cmp	r3, #87	; 0x57
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	400b      	ands	r3, r1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8081 	beq.w	80049a8 <Menu_Read_MPR121+0x530>
		{
			if (MainMenu.active == true) 				MainMenu = MenuScrollDown(MainMenu);
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 80048a8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d017      	beq.n	80048e0 <Menu_Read_MPR121+0x468>
 80048b0:	4e1d      	ldr	r6, [pc, #116]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 80048b2:	463d      	mov	r5, r7
 80048b4:	4c1c      	ldr	r4, [pc, #112]	; (8004928 <Menu_Read_MPR121+0x4b0>)
 80048b6:	4668      	mov	r0, sp
 80048b8:	f104 030c 	add.w	r3, r4, #12
 80048bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048c0:	4619      	mov	r1, r3
 80048c2:	f004 f9b1 	bl	8008c28 <memcpy>
 80048c6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7ff f942 	bl	8003b54 <MenuScrollDown>
 80048d0:	463b      	mov	r3, r7
 80048d2:	4630      	mov	r0, r6
 80048d4:	4619      	mov	r1, r3
 80048d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80048da:	461a      	mov	r2, r3
 80048dc:	f004 f9a4 	bl	8008c28 <memcpy>
			if (AnimationMenu.active == true)		AnimationMenu = MenuScrollDown(AnimationMenu);
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <Menu_Read_MPR121+0x4b4>)
 80048e2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <Menu_Read_MPR121+0x4bc>
 80048ea:	4e10      	ldr	r6, [pc, #64]	; (800492c <Menu_Read_MPR121+0x4b4>)
 80048ec:	463d      	mov	r5, r7
 80048ee:	4c0f      	ldr	r4, [pc, #60]	; (800492c <Menu_Read_MPR121+0x4b4>)
 80048f0:	4668      	mov	r0, sp
 80048f2:	f104 030c 	add.w	r3, r4, #12
 80048f6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048fa:	4619      	mov	r1, r3
 80048fc:	f004 f994 	bl	8008c28 <memcpy>
 8004900:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004904:	4628      	mov	r0, r5
 8004906:	f7ff f925 	bl	8003b54 <MenuScrollDown>
 800490a:	463b      	mov	r3, r7
 800490c:	4630      	mov	r0, r6
 800490e:	4619      	mov	r1, r3
 8004910:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004914:	461a      	mov	r2, r3
 8004916:	f004 f987 	bl	8008c28 <memcpy>
 800491a:	e00b      	b.n	8004934 <Menu_Read_MPR121+0x4bc>
 800491c:	20001a9c 	.word	0x20001a9c
 8004920:	200005ec 	.word	0x200005ec
 8004924:	200005eb 	.word	0x200005eb
 8004928:	20001768 	.word	0x20001768
 800492c:	2000198c 	.word	0x2000198c
 8004930:	2000187c 	.word	0x2000187c
			if (PinMappingMenu.active == true)	PinMappingMenu = MenuScrollDown(PinMappingMenu);
 8004934:	4b2e      	ldr	r3, [pc, #184]	; (80049f0 <Menu_Read_MPR121+0x578>)
 8004936:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d017      	beq.n	800496e <Menu_Read_MPR121+0x4f6>
 800493e:	4e2c      	ldr	r6, [pc, #176]	; (80049f0 <Menu_Read_MPR121+0x578>)
 8004940:	463d      	mov	r5, r7
 8004942:	4c2b      	ldr	r4, [pc, #172]	; (80049f0 <Menu_Read_MPR121+0x578>)
 8004944:	4668      	mov	r0, sp
 8004946:	f104 030c 	add.w	r3, r4, #12
 800494a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800494e:	4619      	mov	r1, r3
 8004950:	f004 f96a 	bl	8008c28 <memcpy>
 8004954:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004958:	4628      	mov	r0, r5
 800495a:	f7ff f8fb 	bl	8003b54 <MenuScrollDown>
 800495e:	463b      	mov	r3, r7
 8004960:	4630      	mov	r0, r6
 8004962:	4619      	mov	r1, r3
 8004964:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004968:	461a      	mov	r2, r3
 800496a:	f004 f95d 	bl	8008c28 <memcpy>
			if (ActiveAnimationMenu.active == true)	ActiveAnimationMenu = MenuScrollDown(ActiveAnimationMenu);
 800496e:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <Menu_Read_MPR121+0x57c>)
 8004970:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d017      	beq.n	80049a8 <Menu_Read_MPR121+0x530>
 8004978:	4e1e      	ldr	r6, [pc, #120]	; (80049f4 <Menu_Read_MPR121+0x57c>)
 800497a:	463d      	mov	r5, r7
 800497c:	4c1d      	ldr	r4, [pc, #116]	; (80049f4 <Menu_Read_MPR121+0x57c>)
 800497e:	4668      	mov	r0, sp
 8004980:	f104 030c 	add.w	r3, r4, #12
 8004984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004988:	4619      	mov	r1, r3
 800498a:	f004 f94d 	bl	8008c28 <memcpy>
 800498e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004992:	4628      	mov	r0, r5
 8004994:	f7ff f8de 	bl	8003b54 <MenuScrollDown>
 8004998:	463b      	mov	r3, r7
 800499a:	4630      	mov	r0, r6
 800499c:	4619      	mov	r1, r3
 800499e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80049a2:	461a      	mov	r2, r3
 80049a4:	f004 f940 	bl	8008c28 <memcpy>
		}	
		return currentAction;
 80049a8:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 80049ac:	e018      	b.n	80049e0 <Menu_Read_MPR121+0x568>
	}	
	
	//effectively nothing is implemented at the moment for this other than reading the MPR121 to clear the low IRQ line
	if(GPIO_Pin == Keypad_IRQ_Pin)
 80049ae:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d112      	bne.n	80049dc <Menu_Read_MPR121+0x564>
	{
		uint8_t keypadVal;	
		keypadVal = mpr121_keyPad(&hi2c, (KEYPAD_ADDRESS<<1));
 80049b6:	21b6      	movs	r1, #182	; 0xb6
 80049b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80049bc:	f000 f96e 	bl	8004c9c <mpr121_keyPad>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		HAL_Delay(mpr121ReadDelayms);		
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <Menu_Read_MPR121+0x580>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fde0 	bl	8005590 <HAL_Delay>
		if (keypadVal == 10)
 80049d0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80049d4:	2b0a      	cmp	r3, #10
 80049d6:	d101      	bne.n	80049dc <Menu_Read_MPR121+0x564>
			return ACTION_HALT_ANIMATION;
 80049d8:	2300      	movs	r3, #0
 80049da:	e001      	b.n	80049e0 <Menu_Read_MPR121+0x568>
	}
	return currentAction;
 80049dc:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80049ec:	b004      	add	sp, #16
 80049ee:	4770      	bx	lr
 80049f0:	2000187c 	.word	0x2000187c
 80049f4:	20001a9c 	.word	0x20001a9c
 80049f8:	200005ea 	.word	0x200005ea

080049fc <mpr121_write>:
#include "mpr121.h"


//------------------- WRITE register  -------------------------
void mpr121_write(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address, uint8_t reg,uint8_t data)
{	
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	70fb      	strb	r3, [r7, #3]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70bb      	strb	r3, [r7, #2]
 8004a12:	4613      	mov	r3, r2
 8004a14:	707b      	strb	r3, [r7, #1]
	uint8_t i2cData[2] = {reg,data};
 8004a16:	78bb      	ldrb	r3, [r7, #2]
 8004a18:	733b      	strb	r3, [r7, #12]
 8004a1a:	787b      	ldrb	r3, [r7, #1]
 8004a1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, mpr121Address, i2cData, 2, 10); //need to figure out what to do about timeout and mpr121Address.
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	b299      	uxth	r1, r3
 8004a22:	f107 020c 	add.w	r2, r7, #12
 8004a26:	230a      	movs	r3, #10
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 f9a9 	bl	8005d84 <HAL_I2C_Master_Transmit>
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <mpr121_read>:
 * @param[in] reg - starting register address to read from.
 * @param[in] length - how many bytes to read.
 * @param[in] ReturnData - points to the data location.
 */
void mpr121_read(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address, uint8_t reg,uint8_t length,uint8_t *ReturnData)
{
 8004a3a:	b590      	push	{r4, r7, lr}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af04      	add	r7, sp, #16
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	4608      	mov	r0, r1
 8004a44:	4611      	mov	r1, r2
 8004a46:	461a      	mov	r2, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	70fb      	strb	r3, [r7, #3]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70bb      	strb	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Read(hi2c, mpr121Address, reg, length, ReturnData, length, 10);
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	b299      	uxth	r1, r3
 8004a58:	78bb      	ldrb	r3, [r7, #2]
 8004a5a:	b298      	uxth	r0, r3
 8004a5c:	787b      	ldrb	r3, [r7, #1]
 8004a5e:	b29c      	uxth	r4, r3
 8004a60:	787b      	ldrb	r3, [r7, #1]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	220a      	movs	r2, #10
 8004a66:	9202      	str	r2, [sp, #8]
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	4602      	mov	r2, r0
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f001 fa84 	bl	8005f80 <HAL_I2C_Mem_Read>
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}

08004a80 <mpr121_touch>:


//------------------- read Touch  -------------------------
uint16_t mpr121_touch(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
	uint8_t i2cTouchData[2] = {0x00, 0x00};
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	723b      	strb	r3, [r7, #8]
 8004a90:	2300      	movs	r3, #0
 8004a92:	727b      	strb	r3, [r7, #9]
	uint8_t *pi2cData = &i2cTouchData[0];
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	60fb      	str	r3, [r7, #12]
	mpr121_read(hi2c, mpr121Address, 0x00, 2, pi2cData);
 8004a9a:	78f9      	ldrb	r1, [r7, #3]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ffc8 	bl	8004a3a <mpr121_read>
	uint16_t retVal = ((i2cTouchData[1]<<8) | i2cTouchData[0]);
 8004aaa:	7a7b      	ldrb	r3, [r7, #9]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	b21a      	sxth	r2, r3
 8004ab0:	7a3b      	ldrb	r3, [r7, #8]
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b21b      	sxth	r3, r3
 8004ab8:	817b      	strh	r3, [r7, #10]
	return retVal;
 8004aba:	897b      	ldrh	r3, [r7, #10]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <mpr121_init>:


//------------------- MPR121 Config  -------------------------
void mpr121_init(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address, I2C_HandleTypeDef *pI2cHandle){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	460b      	mov	r3, r1
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	72fb      	strb	r3, [r7, #11]

	// STOP
	mpr121_write(hi2c, mpr121Address, ELE_CFG, 0x00);
 8004ad2:	7af9      	ldrb	r1, [r7, #11]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	225e      	movs	r2, #94	; 0x5e
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff ff8f 	bl	80049fc <mpr121_write>
  mpr121_write(hi2c, mpr121Address, RES_CF, 0X63);
 8004ade:	7af9      	ldrb	r1, [r7, #11]
 8004ae0:	2363      	movs	r3, #99	; 0x63
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff89 	bl	80049fc <mpr121_write>
  HAL_Delay(10);
 8004aea:	200a      	movs	r0, #10
 8004aec:	f000 fd50 	bl	8005590 <HAL_Delay>
	
	// Section A
	// This group controls filtering when data is > baseline.
	mpr121_write(hi2c, mpr121Address, MHD_R, 0x01);
 8004af0:	7af9      	ldrb	r1, [r7, #11]
 8004af2:	2301      	movs	r3, #1
 8004af4:	222b      	movs	r2, #43	; 0x2b
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff80 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, NHD_R, 0x01);
 8004afc:	7af9      	ldrb	r1, [r7, #11]
 8004afe:	2301      	movs	r3, #1
 8004b00:	222c      	movs	r2, #44	; 0x2c
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff ff7a 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, NCL_R, 0x00);
 8004b08:	7af9      	ldrb	r1, [r7, #11]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	222d      	movs	r2, #45	; 0x2d
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff ff74 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, FDL_R, 0x00);
 8004b14:	7af9      	ldrb	r1, [r7, #11]
 8004b16:	2300      	movs	r3, #0
 8004b18:	222e      	movs	r2, #46	; 0x2e
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff ff6e 	bl	80049fc <mpr121_write>

	// Section B
	// This group controls filtering when data is < baseline.
	mpr121_write(hi2c, mpr121Address, MHD_F, 0x01);
 8004b20:	7af9      	ldrb	r1, [r7, #11]
 8004b22:	2301      	movs	r3, #1
 8004b24:	222f      	movs	r2, #47	; 0x2f
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff ff68 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, NHD_F, 0x01);
 8004b2c:	7af9      	ldrb	r1, [r7, #11]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	2230      	movs	r2, #48	; 0x30
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff62 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, NCL_F, 0xFF);
 8004b38:	7af9      	ldrb	r1, [r7, #11]
 8004b3a:	23ff      	movs	r3, #255	; 0xff
 8004b3c:	2231      	movs	r2, #49	; 0x31
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff ff5c 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, FDL_F, 0x02);
 8004b44:	7af9      	ldrb	r1, [r7, #11]
 8004b46:	2302      	movs	r3, #2
 8004b48:	2232      	movs	r2, #50	; 0x32
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ff56 	bl	80049fc <mpr121_write>

	// Section C
	// This group sets touch and release thresholds for each electrode
	mpr121_write(hi2c, mpr121Address, ELE0_T, TOU_THRESH);
 8004b50:	7af9      	ldrb	r1, [r7, #11]
 8004b52:	2306      	movs	r3, #6
 8004b54:	2241      	movs	r2, #65	; 0x41
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff ff50 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE0_R, REL_THRESH);
 8004b5c:	7af9      	ldrb	r1, [r7, #11]
 8004b5e:	2303      	movs	r3, #3
 8004b60:	2242      	movs	r2, #66	; 0x42
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff4a 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE1_T, TOU_THRESH);
 8004b68:	7af9      	ldrb	r1, [r7, #11]
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	2243      	movs	r2, #67	; 0x43
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff44 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE1_R, REL_THRESH);
 8004b74:	7af9      	ldrb	r1, [r7, #11]
 8004b76:	2303      	movs	r3, #3
 8004b78:	2244      	movs	r2, #68	; 0x44
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff ff3e 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE2_T, TOU_THRESH);
 8004b80:	7af9      	ldrb	r1, [r7, #11]
 8004b82:	2306      	movs	r3, #6
 8004b84:	2245      	movs	r2, #69	; 0x45
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff ff38 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE2_R, REL_THRESH);
 8004b8c:	7af9      	ldrb	r1, [r7, #11]
 8004b8e:	2303      	movs	r3, #3
 8004b90:	2246      	movs	r2, #70	; 0x46
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff ff32 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE3_T, TOU_THRESH);
 8004b98:	7af9      	ldrb	r1, [r7, #11]
 8004b9a:	2306      	movs	r3, #6
 8004b9c:	2247      	movs	r2, #71	; 0x47
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff ff2c 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE3_R, REL_THRESH);
 8004ba4:	7af9      	ldrb	r1, [r7, #11]
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	2248      	movs	r2, #72	; 0x48
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff ff26 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE4_T, TOU_THRESH);
 8004bb0:	7af9      	ldrb	r1, [r7, #11]
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	2249      	movs	r2, #73	; 0x49
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff ff20 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE4_R, REL_THRESH);
 8004bbc:	7af9      	ldrb	r1, [r7, #11]
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	224a      	movs	r2, #74	; 0x4a
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff1a 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE5_T, TOU_THRESH);
 8004bc8:	7af9      	ldrb	r1, [r7, #11]
 8004bca:	2306      	movs	r3, #6
 8004bcc:	224b      	movs	r2, #75	; 0x4b
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff14 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE5_R, REL_THRESH);
 8004bd4:	7af9      	ldrb	r1, [r7, #11]
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	224c      	movs	r2, #76	; 0x4c
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7ff ff0e 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE6_T, TOU_THRESH);
 8004be0:	7af9      	ldrb	r1, [r7, #11]
 8004be2:	2306      	movs	r3, #6
 8004be4:	224d      	movs	r2, #77	; 0x4d
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ff08 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE6_R, REL_THRESH);
 8004bec:	7af9      	ldrb	r1, [r7, #11]
 8004bee:	2303      	movs	r3, #3
 8004bf0:	224e      	movs	r2, #78	; 0x4e
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff02 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE7_T, TOU_THRESH);
 8004bf8:	7af9      	ldrb	r1, [r7, #11]
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	224f      	movs	r2, #79	; 0x4f
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff fefc 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE7_R, REL_THRESH);
 8004c04:	7af9      	ldrb	r1, [r7, #11]
 8004c06:	2303      	movs	r3, #3
 8004c08:	2250      	movs	r2, #80	; 0x50
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fef6 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE8_T, TOU_THRESH);
 8004c10:	7af9      	ldrb	r1, [r7, #11]
 8004c12:	2306      	movs	r3, #6
 8004c14:	2251      	movs	r2, #81	; 0x51
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fef0 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE8_R, REL_THRESH);
 8004c1c:	7af9      	ldrb	r1, [r7, #11]
 8004c1e:	2303      	movs	r3, #3
 8004c20:	2252      	movs	r2, #82	; 0x52
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff feea 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE9_T, TOU_THRESH);
 8004c28:	7af9      	ldrb	r1, [r7, #11]
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	2253      	movs	r2, #83	; 0x53
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fee4 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE9_R, REL_THRESH);
 8004c34:	7af9      	ldrb	r1, [r7, #11]
 8004c36:	2303      	movs	r3, #3
 8004c38:	2254      	movs	r2, #84	; 0x54
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff fede 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE10_T, TOU_THRESH);
 8004c40:	7af9      	ldrb	r1, [r7, #11]
 8004c42:	2306      	movs	r3, #6
 8004c44:	2255      	movs	r2, #85	; 0x55
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fed8 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE10_R, REL_THRESH);
 8004c4c:	7af9      	ldrb	r1, [r7, #11]
 8004c4e:	2303      	movs	r3, #3
 8004c50:	2256      	movs	r2, #86	; 0x56
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fed2 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE11_T, TOU_THRESH);
 8004c58:	7af9      	ldrb	r1, [r7, #11]
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	2257      	movs	r2, #87	; 0x57
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fecc 	bl	80049fc <mpr121_write>
	mpr121_write(hi2c, mpr121Address, ELE11_R, REL_THRESH);
 8004c64:	7af9      	ldrb	r1, [r7, #11]
 8004c66:	2303      	movs	r3, #3
 8004c68:	2258      	movs	r2, #88	; 0x58
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fec6 	bl	80049fc <mpr121_write>

	// Section D
	// Set the Filter Configuration
	// Set ESI2
	mpr121_write(hi2c, mpr121Address, AFE1_CFG, 0x10);
 8004c70:	7af9      	ldrb	r1, [r7, #11]
 8004c72:	2310      	movs	r3, #16
 8004c74:	225c      	movs	r2, #92	; 0x5c
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fec0 	bl	80049fc <mpr121_write>
	//AFE配置1 （默认=0x10）
	//	一级采样FFI:00-6次
	//	充放电电流CDC:100000 - 32uA
	mpr121_write(hi2c, mpr121Address, AFE2_CFG, 0x04);
 8004c7c:	7af9      	ldrb	r1, [r7, #11]
 8004c7e:	2304      	movs	r3, #4
 8004c80:	225d      	movs	r2, #93	; 0x5d
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff feba 	bl	80049fc <mpr121_write>

	// Section E
	// Electrode Configuration
	// Enable 6 Electrodes and set to run mode
	// Set ELE_CFG to 0x00 to return to standby mode
	mpr121_write(hi2c, mpr121Address, ELE_CFG, 0x8C);	// Enables all 12 Electrodes
 8004c88:	7af9      	ldrb	r1, [r7, #11]
 8004c8a:	238c      	movs	r3, #140	; 0x8c
 8004c8c:	225e      	movs	r2, #94	; 0x5e
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff feb4 	bl	80049fc <mpr121_write>
	// Section F
	// Enable Auto Config and auto Reconfig
	/*mpr121_write(ATO_CFG0, 0x0B);
	mpr121_write(ATO_CFGU, 0xC9);	// USL = (Vdd-0.7)/vdd*256 = 0xC9 @3.3V   mpr121_write(ATO_CFGL, 0x82);	// LSL = 0.65*USL = 0x82 @3.3V
	mpr121_write(ATO_CFGT, 0xB5);*/	// Target = 0.9*USL = 0xB5 @3.3V
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <mpr121_keyPad>:
      }
}

//------------------- centigrade  -------------------------
uint8_t mpr121_keyPad(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  uint16_t var = mpr121_touch(hi2c, mpr121Address);
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fee7 	bl	8004a80 <mpr121_touch>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	81fb      	strh	r3, [r7, #14]
  
  if (var == 0x0001) return 1;
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <mpr121_keyPad+0x24>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e040      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0002) return 4;
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d101      	bne.n	8004cca <mpr121_keyPad+0x2e>
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	e03b      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0004) return 7;
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d101      	bne.n	8004cd4 <mpr121_keyPad+0x38>
 8004cd0:	2307      	movs	r3, #7
 8004cd2:	e036      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0008) return 10;		// '*' on keypad
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d101      	bne.n	8004cde <mpr121_keyPad+0x42>
 8004cda:	230a      	movs	r3, #10
 8004cdc:	e031      	b.n	8004d42 <mpr121_keyPad+0xa6>
	
  if (var == 0x0010) return 2;
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d101      	bne.n	8004ce8 <mpr121_keyPad+0x4c>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e02c      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0020) return 5;
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d101      	bne.n	8004cf2 <mpr121_keyPad+0x56>
 8004cee:	2305      	movs	r3, #5
 8004cf0:	e027      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0040) return 8;
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d101      	bne.n	8004cfc <mpr121_keyPad+0x60>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	e022      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0080) return 11;		// '0' on keypad
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d101      	bne.n	8004d06 <mpr121_keyPad+0x6a>
 8004d02:	230b      	movs	r3, #11
 8004d04:	e01d      	b.n	8004d42 <mpr121_keyPad+0xa6>
	
  if (var == 0x0100) return 3;
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d101      	bne.n	8004d12 <mpr121_keyPad+0x76>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e017      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0200) return 6;
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d101      	bne.n	8004d1e <mpr121_keyPad+0x82>
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	e011      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0400) return 9;
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d101      	bne.n	8004d2a <mpr121_keyPad+0x8e>
 8004d26:	2309      	movs	r3, #9
 8004d28:	e00b      	b.n	8004d42 <mpr121_keyPad+0xa6>
	if (var == 0x0800) return 12;		// '12' on keypad	
 8004d2a:	89fb      	ldrh	r3, [r7, #14]
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d30:	d101      	bne.n	8004d36 <mpr121_keyPad+0x9a>
 8004d32:	230c      	movs	r3, #12
 8004d34:	e005      	b.n	8004d42 <mpr121_keyPad+0xa6>

	if (var == 0x0000) return 0;	
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <mpr121_keyPad+0xa4>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <mpr121_keyPad+0xa6>
	
	return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <mpr121_wheel>:

char mpr121_wheel(I2C_HandleTypeDef *hi2c, uint8_t mpr121Address, char prevDir)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
 8004d56:	4613      	mov	r3, r2
 8004d58:	70bb      	strb	r3, [r7, #2]
	uint16_t var = mpr121_touch(hi2c, mpr121Address); 
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fe8e 	bl	8004a80 <mpr121_touch>
 8004d64:	4603      	mov	r3, r0
 8004d66:	81fb      	strh	r3, [r7, #14]
	if			(var==0x0100) return 'C';	//center button
 8004d68:	89fb      	ldrh	r3, [r7, #14]
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	d101      	bne.n	8004d74 <mpr121_wheel+0x2a>
 8004d70:	2343      	movs	r3, #67	; 0x43
 8004d72:	e084      	b.n	8004e7e <mpr121_wheel+0x134>
	else if ((var==0x0001)|(var==0x0003)|(var==0x0081)|(var==0x0083)) return 'S';	//South
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	89fb      	ldrh	r3, [r7, #14]
 8004d94:	2b81      	cmp	r3, #129	; 0x81
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	89fa      	ldrh	r2, [r7, #14]
 8004da2:	2a83      	cmp	r2, #131	; 0x83
 8004da4:	bf0c      	ite	eq
 8004da6:	2201      	moveq	r2, #1
 8004da8:	2200      	movne	r2, #0
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	4313      	orrs	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <mpr121_wheel+0x6c>
 8004db2:	2353      	movs	r3, #83	; 0x53
 8004db4:	e063      	b.n	8004e7e <mpr121_wheel+0x134>
	else if ((var==0x0004)|(var==0x0006)|(var==0x000C)|(var==0x000E)) return 'W';	//West
 8004db6:	89fb      	ldrh	r3, [r7, #14]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	89fb      	ldrh	r3, [r7, #14]
 8004dc4:	2b06      	cmp	r3, #6
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4313      	orrs	r3, r2
 8004de2:	89fa      	ldrh	r2, [r7, #14]
 8004de4:	2a0e      	cmp	r2, #14
 8004de6:	bf0c      	ite	eq
 8004de8:	2201      	moveq	r2, #1
 8004dea:	2200      	movne	r2, #0
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	4313      	orrs	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <mpr121_wheel+0xae>
 8004df4:	2357      	movs	r3, #87	; 0x57
 8004df6:	e042      	b.n	8004e7e <mpr121_wheel+0x134>
	else if ((var==0x0010)|(var==0x0018)|(var==0x0030)|(var==0x0038)) return 'N';	//North
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	2b18      	cmp	r3, #24
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4313      	orrs	r3, r2
 8004e24:	89fa      	ldrh	r2, [r7, #14]
 8004e26:	2a38      	cmp	r2, #56	; 0x38
 8004e28:	bf0c      	ite	eq
 8004e2a:	2201      	moveq	r2, #1
 8004e2c:	2200      	movne	r2, #0
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	4313      	orrs	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <mpr121_wheel+0xf0>
 8004e36:	234e      	movs	r3, #78	; 0x4e
 8004e38:	e021      	b.n	8004e7e <mpr121_wheel+0x134>
	else if ((var==0x0040)|(var==0x0060)|(var==0x00C0)|(var==0x00E0)) return 'E';	//East
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	89fb      	ldrh	r3, [r7, #14]
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	89fb      	ldrh	r3, [r7, #14]
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	89fa      	ldrh	r2, [r7, #14]
 8004e68:	2ae0      	cmp	r2, #224	; 0xe0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2201      	moveq	r2, #1
 8004e6e:	2200      	movne	r2, #0
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	4313      	orrs	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <mpr121_wheel+0x132>
 8004e78:	2345      	movs	r3, #69	; 0x45
 8004e7a:	e000      	b.n	8004e7e <mpr121_wheel+0x134>
	return prevDir;
 8004e7c:	78bb      	ldrb	r3, [r7, #2]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <rand_32bit_modulus>:
 * @param[in] rngSeed - the seed which the modulus will happen to
 * @param[in] maxVal - the modulus operator/operand ?
 * @param[out] result - the resulting pseudo random number
 **/
uint32_t rand_32bit_modulus(uint32_t rngSeed, uint32_t maxVal)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
	uint32_t result;
	result = (rngSeed % (maxVal+1));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e9a:	fb02 f201 	mul.w	r2, r2, r1
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
	return result;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <HAL_MspInit+0x5c>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <HAL_MspInit+0x5c>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6193      	str	r3, [r2, #24]
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_MspInit+0x5c>)
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_MspInit+0x5c>)
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <HAL_MspInit+0x5c>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	61d3      	str	r3, [r2, #28]
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_MspInit+0x5c>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <HAL_MspInit+0x60>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <HAL_MspInit+0x60>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40010000 	.word	0x40010000

08004f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <HAL_I2C_MspInit+0x70>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d123      	bne.n	8004f7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f3a:	f043 0308 	orr.w	r3, r3, #8
 8004f3e:	6193      	str	r3, [r2, #24]
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f4c:	23c0      	movs	r3, #192	; 0xc0
 8004f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f50:	2312      	movs	r3, #18
 8004f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f54:	2303      	movs	r3, #3
 8004f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f58:	f107 0310 	add.w	r3, r7, #16
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	480b      	ldr	r0, [pc, #44]	; (8004f8c <HAL_I2C_MspInit+0x78>)
 8004f60:	f000 fc46 	bl	80057f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f6e:	61d3      	str	r3, [r2, #28]
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_I2C_MspInit+0x74>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f7c:	bf00      	nop
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40005400 	.word	0x40005400
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40010c00 	.word	0x40010c00

08004f90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <HAL_RTC_MspInit+0x3c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d110      	bne.n	8004fc4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004fa2:	f001 fe75 	bl	8006c90 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RTC_MspInit+0x40>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RTC_MspInit+0x40>)
 8004fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fb0:	61d3      	str	r3, [r2, #28]
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <HAL_RTC_MspInit+0x40>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RTC_MspInit+0x44>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40002800 	.word	0x40002800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	4242043c 	.word	0x4242043c

08004fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <HAL_SPI_MspInit+0x88>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d12f      	bne.n	8005058 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 8004ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005002:	6193      	str	r3, [r2, #24]
 8005004:	4b17      	ldr	r3, [pc, #92]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	6193      	str	r3, [r2, #24]
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <HAL_SPI_MspInit+0x8c>)
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCLK_3V3_Pin|SIN_3V3_Pin;
 8005028:	23a0      	movs	r3, #160	; 0xa0
 800502a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005030:	2303      	movs	r3, #3
 8005032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005034:	f107 0310 	add.w	r3, r7, #16
 8005038:	4619      	mov	r1, r3
 800503a:	480b      	ldr	r0, [pc, #44]	; (8005068 <HAL_SPI_MspInit+0x90>)
 800503c:	f000 fbd8 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOUT_3V3_Pin;
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SOUT_3V3_GPIO_Port, &GPIO_InitStruct);
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	4619      	mov	r1, r3
 8005052:	4805      	ldr	r0, [pc, #20]	; (8005068 <HAL_SPI_MspInit+0x90>)
 8005054:	f000 fbcc 	bl	80057f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005058:	bf00      	nop
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40013000 	.word	0x40013000
 8005064:	40021000 	.word	0x40021000
 8005068:	40010800 	.word	0x40010800

0800506c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <HAL_TIM_PWM_MspInit+0x44>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d113      	bne.n	80050a6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_TIM_PWM_MspInit+0x48>)
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_TIM_PWM_MspInit+0x48>)
 8005084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005088:	6193      	str	r3, [r2, #24]
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <HAL_TIM_PWM_MspInit+0x48>)
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	2019      	movs	r0, #25
 800509c:	f000 fb71 	bl	8005782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80050a0:	2019      	movs	r0, #25
 80050a2:	f000 fb8a 	bl	80057ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c8:	d10b      	bne.n	80050e2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <HAL_TIM_OC_MspInit+0x34>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4a07      	ldr	r2, [pc, #28]	; (80050ec <HAL_TIM_OC_MspInit+0x34>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	61d3      	str	r3, [r2, #28]
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_TIM_OC_MspInit+0x34>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40021000 	.word	0x40021000

080050f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_TIM_MspPostInit+0x98>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d119      	bne.n	8005144 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 8005116:	f043 0304 	orr.w	r3, r3, #4
 800511a:	6193      	str	r3, [r2, #24]
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800512c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512e:	2302      	movs	r3, #2
 8005130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005132:	2302      	movs	r3, #2
 8005134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005136:	f107 0310 	add.w	r3, r7, #16
 800513a:	4619      	mov	r1, r3
 800513c:	4814      	ldr	r0, [pc, #80]	; (8005190 <HAL_TIM_MspPostInit+0xa0>)
 800513e:	f000 fb57 	bl	80057f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005142:	e01c      	b.n	800517e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d117      	bne.n	800517e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6193      	str	r3, [r2, #24]
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_TIM_MspPostInit+0x9c>)
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GSCK_3V3_Pin;
 8005166:	2302      	movs	r3, #2
 8005168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516a:	2302      	movs	r3, #2
 800516c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2302      	movs	r3, #2
 8005170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GSCK_3V3_GPIO_Port, &GPIO_InitStruct);
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	4619      	mov	r1, r3
 8005178:	4805      	ldr	r0, [pc, #20]	; (8005190 <HAL_TIM_MspPostInit+0xa0>)
 800517a:	f000 fb39 	bl	80057f0 <HAL_GPIO_Init>
}
 800517e:	bf00      	nop
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40021000 	.word	0x40021000
 8005190:	40010800 	.word	0x40010800

08005194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519c:	f107 0310 	add.w	r3, r7, #16
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	609a      	str	r2, [r3, #8]
 80051a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <HAL_UART_MspInit+0x8c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d131      	bne.n	8005218 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051be:	6193      	str	r3, [r2, #24]
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051cc:	4b15      	ldr	r3, [pc, #84]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051d2:	f043 0304 	orr.w	r3, r3, #4
 80051d6:	6193      	str	r3, [r2, #24]
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_UART_MspInit+0x90>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP8266_RX_STM32_TX_Pin;
 80051e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ea:	2302      	movs	r3, #2
 80051ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051ee:	2303      	movs	r3, #3
 80051f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP8266_RX_STM32_TX_GPIO_Port, &GPIO_InitStruct);
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4619      	mov	r1, r3
 80051f8:	480b      	ldr	r0, [pc, #44]	; (8005228 <HAL_UART_MspInit+0x94>)
 80051fa:	f000 faf9 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP8266_TX_STM32_RX_Pin;
 80051fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ESP8266_TX_STM32_RX_GPIO_Port, &GPIO_InitStruct);
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	4619      	mov	r1, r3
 8005212:	4805      	ldr	r0, [pc, #20]	; (8005228 <HAL_UART_MspInit+0x94>)
 8005214:	f000 faec 	bl	80057f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005218:	bf00      	nop
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40013800 	.word	0x40013800
 8005224:	40021000 	.word	0x40021000
 8005228:	40010800 	.word	0x40010800

0800522c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800523c:	e7fe      	b.n	800523c <HardFault_Handler+0x4>

0800523e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005242:	e7fe      	b.n	8005242 <MemManage_Handler+0x4>

08005244 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005248:	e7fe      	b.n	8005248 <BusFault_Handler+0x4>

0800524a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800524e:	e7fe      	b.n	800524e <UsageFault_Handler+0x4>

08005250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005278:	f000 f96e 	bl	8005558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}

08005280 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005284:	2010      	movs	r0, #16
 8005286:	f000 fc3d 	bl	8005b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}

0800528e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005292:	2020      	movs	r0, #32
 8005294:	f000 fc36 	bl	8005b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}

0800529c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <TIM1_UP_IRQHandler+0x10>)
 80052a2:	f002 fe68 	bl	8007f76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200008ac 	.word	0x200008ac

080052b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <_sbrk+0x5c>)
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <_sbrk+0x60>)
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_sbrk+0x64>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <_sbrk+0x64>)
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <_sbrk+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <_sbrk+0x64>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d207      	bcs.n	80052f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052e0:	f003 fc78 	bl	8008bd4 <__errno>
 80052e4:	4602      	mov	r2, r0
 80052e6:	230c      	movs	r3, #12
 80052e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	e009      	b.n	8005304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <_sbrk+0x64>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <_sbrk+0x64>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <_sbrk+0x64>)
 8005300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20005000 	.word	0x20005000
 8005310:	00002000 	.word	0x00002000
 8005314:	200006d8 	.word	0x200006d8
 8005318:	20001bb8 	.word	0x20001bb8

0800531c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <SystemInit+0x5c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a14      	ldr	r2, [pc, #80]	; (8005378 <SystemInit+0x5c>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <SystemInit+0x5c>)
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4911      	ldr	r1, [pc, #68]	; (8005378 <SystemInit+0x5c>)
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <SystemInit+0x60>)
 8005334:	4013      	ands	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <SystemInit+0x5c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <SystemInit+0x5c>)
 800533e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <SystemInit+0x5c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <SystemInit+0x5c>)
 800534e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005352:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <SystemInit+0x5c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a07      	ldr	r2, [pc, #28]	; (8005378 <SystemInit+0x5c>)
 800535a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800535e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <SystemInit+0x5c>)
 8005362:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005366:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <SystemInit+0x64>)
 800536a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800536e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	40021000 	.word	0x40021000
 800537c:	f8ff0000 	.word	0xf8ff0000
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <tlc_spi_convert>:
#define BLANK_3V3_GPIO_Port GPIOA
#define XLAT_3V3_Pin GPIO_PIN_4
#define XLAT_3V3_GPIO_Port GPIOA
 
 void tlc_spi_convert(uint16_t *data16, uint8_t *data8)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]

	int index8 = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
	int index16 = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
	int i = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]

	while (index8 < 24*NUM_TLCS)
 800539a:	e04f      	b.n	800543c <tlc_spi_convert+0xb8>
	{
		switch (i)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d017      	beq.n	80053d2 <tlc_spi_convert+0x4e>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d036      	beq.n	8005414 <tlc_spi_convert+0x90>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d000      	beq.n	80053ac <tlc_spi_convert+0x28>
 80053aa:	e047      	b.n	800543c <tlc_spi_convert+0xb8>
		{
			case 0:
				*(data8 + index8) = (*(data16 + index16)>>4);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	b299      	uxth	r1, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	b2ca      	uxtb	r2, r1
 80053c2:	701a      	strb	r2, [r3, #0]
				index8++;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3301      	adds	r3, #1
 80053c8:	617b      	str	r3, [r7, #20]
        i++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
        break;
 80053d0:	e034      	b.n	800543c <tlc_spi_convert+0xb8>

      case 1:
				*(data8 + index8) = ( (( (*(data16 + index16)<<4) & 0xF0)) | ( (*(data16 + (index16 + 1))>>8) & 0x0F ));
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	b25a      	sxtb	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3301      	adds	r3, #1
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	440b      	add	r3, r1
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b259      	sxtb	r1, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4413      	add	r3, r2
 8005402:	b2ca      	uxtb	r2, r1
 8005404:	701a      	strb	r2, [r3, #0]
				index8++;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
        i++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
        break;
 8005412:	e013      	b.n	800543c <tlc_spi_convert+0xb8>

      case 2:
				*(data8 + index8) = *(data16 + (index16 + 1));
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	3301      	adds	r3, #1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	8819      	ldrh	r1, [r3, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	4413      	add	r3, r2
 8005426:	b2ca      	uxtb	r2, r1
 8005428:	701a      	strb	r2, [r3, #0]
				index8++;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3301      	adds	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
				index16 = index16 + 2;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3302      	adds	r3, #2
 8005434:	613b      	str	r3, [r7, #16]
        i=0;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
        break;
 800543a:	bf00      	nop
	while (index8 < 24*NUM_TLCS)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8005442:	dbab      	blt.n	800539c <tlc_spi_convert+0x18>
		}
	}
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <tlc_clear>:


void tlc_clear(uint16_t *data16Ptr)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
	for(int i=0; i<24*NUM_TLCS;i++)
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e008      	b.n	800546e <tlc_clear+0x20>
	{
		*(data16Ptr + i) = 0;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	2200      	movs	r2, #0
 8005466:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<24*NUM_TLCS;i++)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8005474:	dbf2      	blt.n	800545c <tlc_clear+0xe>
	}
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005480:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005482:	e003      	b.n	800548c <LoopCopyDataInit>

08005484 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005486:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005488:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800548a:	3104      	adds	r1, #4

0800548c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800548c:	480a      	ldr	r0, [pc, #40]	; (80054b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005490:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005492:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005494:	d3f6      	bcc.n	8005484 <CopyDataInit>
  ldr r2, =_sbss
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005498:	e002      	b.n	80054a0 <LoopFillZerobss>

0800549a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800549a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800549c:	f842 3b04 	str.w	r3, [r2], #4

080054a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80054a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80054a4:	d3f9      	bcc.n	800549a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054a6:	f7ff ff39 	bl	800531c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054aa:	f003 fb99 	bl	8008be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054ae:	f7fd fda3 	bl	8002ff8 <main>
  bx lr
 80054b2:	4770      	bx	lr
  ldr r3, =_sidata
 80054b4:	080096ec 	.word	0x080096ec
  ldr r0, =_sdata
 80054b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80054bc:	20000660 	.word	0x20000660
  ldr r2, =_sbss
 80054c0:	20000660 	.word	0x20000660
  ldr r3, = _ebss
 80054c4:	20001bb8 	.word	0x20001bb8

080054c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054c8:	e7fe      	b.n	80054c8 <ADC1_2_IRQHandler>
	...

080054cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_Init+0x28>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <HAL_Init+0x28>)
 80054d6:	f043 0310 	orr.w	r3, r3, #16
 80054da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054dc:	2003      	movs	r0, #3
 80054de:	f000 f945 	bl	800576c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f000 f808 	bl	80054f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054e8:	f7ff fce2 	bl	8004eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40022000 	.word	0x40022000

080054f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005500:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_InitTick+0x54>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_InitTick+0x58>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800550e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f95d 	bl	80057d6 <HAL_SYSTICK_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e00e      	b.n	8005544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d80a      	bhi.n	8005542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800552c:	2200      	movs	r2, #0
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	f000 f925 	bl	8005782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005538:	4a06      	ldr	r2, [pc, #24]	; (8005554 <HAL_InitTick+0x5c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	200005f0 	.word	0x200005f0
 8005550:	200005f8 	.word	0x200005f8
 8005554:	200005f4 	.word	0x200005f4

08005558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_IncTick+0x1c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	4b05      	ldr	r3, [pc, #20]	; (8005578 <HAL_IncTick+0x20>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4413      	add	r3, r2
 8005568:	4a03      	ldr	r2, [pc, #12]	; (8005578 <HAL_IncTick+0x20>)
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	200005f8 	.word	0x200005f8
 8005578:	20001bb0 	.word	0x20001bb0

0800557c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return uwTick;
 8005580:	4b02      	ldr	r3, [pc, #8]	; (800558c <HAL_GetTick+0x10>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr
 800558c:	20001bb0 	.word	0x20001bb0

08005590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005598:	f7ff fff0 	bl	800557c <HAL_GetTick>
 800559c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d005      	beq.n	80055b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055aa:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_Delay+0x40>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055b6:	bf00      	nop
 80055b8:	f7ff ffe0 	bl	800557c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d8f7      	bhi.n	80055b8 <HAL_Delay+0x28>
  {
  }
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200005f8 	.word	0x200005f8

080055d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <__NVIC_SetPriorityGrouping+0x44>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055f0:	4013      	ands	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005606:	4a04      	ldr	r2, [pc, #16]	; (8005618 <__NVIC_SetPriorityGrouping+0x44>)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	60d3      	str	r3, [r2, #12]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <__NVIC_GetPriorityGrouping+0x18>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 0307 	and.w	r3, r3, #7
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	db0b      	blt.n	8005662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	f003 021f 	and.w	r2, r3, #31
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <__NVIC_EnableIRQ+0x34>)
 8005652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2001      	movs	r0, #1
 800565a:	fa00 f202 	lsl.w	r2, r0, r2
 800565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	e000e100 	.word	0xe000e100

08005670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005680:	2b00      	cmp	r3, #0
 8005682:	db0a      	blt.n	800569a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	490c      	ldr	r1, [pc, #48]	; (80056bc <__NVIC_SetPriority+0x4c>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	0112      	lsls	r2, r2, #4
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	440b      	add	r3, r1
 8005694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005698:	e00a      	b.n	80056b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4908      	ldr	r1, [pc, #32]	; (80056c0 <__NVIC_SetPriority+0x50>)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	3b04      	subs	r3, #4
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	440b      	add	r3, r1
 80056ae:	761a      	strb	r2, [r3, #24]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e100 	.word	0xe000e100
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f1c3 0307 	rsb	r3, r3, #7
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf28      	it	cs
 80056e2:	2304      	movcs	r3, #4
 80056e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d902      	bls.n	80056f4 <NVIC_EncodePriority+0x30>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3b03      	subs	r3, #3
 80056f2:	e000      	b.n	80056f6 <NVIC_EncodePriority+0x32>
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	401a      	ands	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800570c:	f04f 31ff 	mov.w	r1, #4294967295
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	43d9      	mvns	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800571c:	4313      	orrs	r3, r2
         );
}
 800571e:	4618      	mov	r0, r3
 8005720:	3724      	adds	r7, #36	; 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3b01      	subs	r3, #1
 8005734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005738:	d301      	bcc.n	800573e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800573a:	2301      	movs	r3, #1
 800573c:	e00f      	b.n	800575e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <SysTick_Config+0x40>)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005746:	210f      	movs	r1, #15
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	f7ff ff90 	bl	8005670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <SysTick_Config+0x40>)
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005756:	4b04      	ldr	r3, [pc, #16]	; (8005768 <SysTick_Config+0x40>)
 8005758:	2207      	movs	r2, #7
 800575a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	e000e010 	.word	0xe000e010

0800576c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff2d 	bl	80055d4 <__NVIC_SetPriorityGrouping>
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	4603      	mov	r3, r0
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005794:	f7ff ff42 	bl	800561c <__NVIC_GetPriorityGrouping>
 8005798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6978      	ldr	r0, [r7, #20]
 80057a0:	f7ff ff90 	bl	80056c4 <NVIC_EncodePriority>
 80057a4:	4602      	mov	r2, r0
 80057a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff5f 	bl	8005670 <__NVIC_SetPriority>
}
 80057b2:	bf00      	nop
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	4603      	mov	r3, r0
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff35 	bl	8005638 <__NVIC_EnableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ffa2 	bl	8005728 <SysTick_Config>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b08b      	sub	sp, #44	; 0x2c
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80057fe:	2300      	movs	r3, #0
 8005800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005802:	e127      	b.n	8005a54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005804:	2201      	movs	r2, #1
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	429a      	cmp	r2, r3
 800581e:	f040 8116 	bne.w	8005a4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b12      	cmp	r3, #18
 8005828:	d034      	beq.n	8005894 <HAL_GPIO_Init+0xa4>
 800582a:	2b12      	cmp	r3, #18
 800582c:	d80d      	bhi.n	800584a <HAL_GPIO_Init+0x5a>
 800582e:	2b02      	cmp	r3, #2
 8005830:	d02b      	beq.n	800588a <HAL_GPIO_Init+0x9a>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d804      	bhi.n	8005840 <HAL_GPIO_Init+0x50>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d031      	beq.n	800589e <HAL_GPIO_Init+0xae>
 800583a:	2b01      	cmp	r3, #1
 800583c:	d01c      	beq.n	8005878 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800583e:	e048      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005840:	2b03      	cmp	r3, #3
 8005842:	d043      	beq.n	80058cc <HAL_GPIO_Init+0xdc>
 8005844:	2b11      	cmp	r3, #17
 8005846:	d01b      	beq.n	8005880 <HAL_GPIO_Init+0x90>
          break;
 8005848:	e043      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800584a:	4a89      	ldr	r2, [pc, #548]	; (8005a70 <HAL_GPIO_Init+0x280>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d026      	beq.n	800589e <HAL_GPIO_Init+0xae>
 8005850:	4a87      	ldr	r2, [pc, #540]	; (8005a70 <HAL_GPIO_Init+0x280>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d806      	bhi.n	8005864 <HAL_GPIO_Init+0x74>
 8005856:	4a87      	ldr	r2, [pc, #540]	; (8005a74 <HAL_GPIO_Init+0x284>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d020      	beq.n	800589e <HAL_GPIO_Init+0xae>
 800585c:	4a86      	ldr	r2, [pc, #536]	; (8005a78 <HAL_GPIO_Init+0x288>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01d      	beq.n	800589e <HAL_GPIO_Init+0xae>
          break;
 8005862:	e036      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005864:	4a85      	ldr	r2, [pc, #532]	; (8005a7c <HAL_GPIO_Init+0x28c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d019      	beq.n	800589e <HAL_GPIO_Init+0xae>
 800586a:	4a85      	ldr	r2, [pc, #532]	; (8005a80 <HAL_GPIO_Init+0x290>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d016      	beq.n	800589e <HAL_GPIO_Init+0xae>
 8005870:	4a84      	ldr	r2, [pc, #528]	; (8005a84 <HAL_GPIO_Init+0x294>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_GPIO_Init+0xae>
          break;
 8005876:	e02c      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	623b      	str	r3, [r7, #32]
          break;
 800587e:	e028      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	623b      	str	r3, [r7, #32]
          break;
 8005888:	e023      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	3308      	adds	r3, #8
 8005890:	623b      	str	r3, [r7, #32]
          break;
 8005892:	e01e      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	330c      	adds	r3, #12
 800589a:	623b      	str	r3, [r7, #32]
          break;
 800589c:	e019      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80058a6:	2304      	movs	r3, #4
 80058a8:	623b      	str	r3, [r7, #32]
          break;
 80058aa:	e012      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d105      	bne.n	80058c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80058b4:	2308      	movs	r3, #8
 80058b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	611a      	str	r2, [r3, #16]
          break;
 80058be:	e008      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80058c0:	2308      	movs	r3, #8
 80058c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	615a      	str	r2, [r3, #20]
          break;
 80058ca:	e002      	b.n	80058d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]
          break;
 80058d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2bff      	cmp	r3, #255	; 0xff
 80058d6:	d801      	bhi.n	80058dc <HAL_GPIO_Init+0xec>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	e001      	b.n	80058e0 <HAL_GPIO_Init+0xf0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2bff      	cmp	r3, #255	; 0xff
 80058e6:	d802      	bhi.n	80058ee <HAL_GPIO_Init+0xfe>
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	e002      	b.n	80058f4 <HAL_GPIO_Init+0x104>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	3b08      	subs	r3, #8
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	210f      	movs	r1, #15
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	401a      	ands	r2, r3
 8005906:	6a39      	ldr	r1, [r7, #32]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	fa01 f303 	lsl.w	r3, r1, r3
 800590e:	431a      	orrs	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8096 	beq.w	8005a4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_GPIO_Init+0x298>)
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_GPIO_Init+0x298>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6193      	str	r3, [r2, #24]
 800592e:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <HAL_GPIO_Init+0x298>)
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800593a:	4a54      	ldr	r2, [pc, #336]	; (8005a8c <HAL_GPIO_Init+0x29c>)
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	3302      	adds	r3, #2
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4013      	ands	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a4b      	ldr	r2, [pc, #300]	; (8005a90 <HAL_GPIO_Init+0x2a0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_GPIO_Init+0x19e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a4a      	ldr	r2, [pc, #296]	; (8005a94 <HAL_GPIO_Init+0x2a4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00d      	beq.n	800598a <HAL_GPIO_Init+0x19a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a49      	ldr	r2, [pc, #292]	; (8005a98 <HAL_GPIO_Init+0x2a8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <HAL_GPIO_Init+0x196>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a48      	ldr	r2, [pc, #288]	; (8005a9c <HAL_GPIO_Init+0x2ac>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_GPIO_Init+0x192>
 800597e:	2303      	movs	r3, #3
 8005980:	e006      	b.n	8005990 <HAL_GPIO_Init+0x1a0>
 8005982:	2304      	movs	r3, #4
 8005984:	e004      	b.n	8005990 <HAL_GPIO_Init+0x1a0>
 8005986:	2302      	movs	r3, #2
 8005988:	e002      	b.n	8005990 <HAL_GPIO_Init+0x1a0>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_GPIO_Init+0x1a0>
 800598e:	2300      	movs	r3, #0
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	f002 0203 	and.w	r2, r2, #3
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	4093      	lsls	r3, r2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80059a0:	493a      	ldr	r1, [pc, #232]	; (8005a8c <HAL_GPIO_Init+0x29c>)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	089b      	lsrs	r3, r3, #2
 80059a6:	3302      	adds	r3, #2
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4938      	ldr	r1, [pc, #224]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
 80059c6:	e006      	b.n	80059d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80059c8:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	4933      	ldr	r1, [pc, #204]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d006      	beq.n	80059f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80059e2:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	492e      	ldr	r1, [pc, #184]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	604b      	str	r3, [r1, #4]
 80059ee:	e006      	b.n	80059fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80059f0:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	4929      	ldr	r1, [pc, #164]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	4924      	ldr	r1, [pc, #144]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
 8005a16:	e006      	b.n	8005a26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	491f      	ldr	r1, [pc, #124]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	491a      	ldr	r1, [pc, #104]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
 8005a3e:	e006      	b.n	8005a4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	43db      	mvns	r3, r3
 8005a48:	4915      	ldr	r1, [pc, #84]	; (8005aa0 <HAL_GPIO_Init+0x2b0>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	3301      	adds	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f aed0 	bne.w	8005804 <HAL_GPIO_Init+0x14>
  }
}
 8005a64:	bf00      	nop
 8005a66:	372c      	adds	r7, #44	; 0x2c
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	10210000 	.word	0x10210000
 8005a74:	10110000 	.word	0x10110000
 8005a78:	10120000 	.word	0x10120000
 8005a7c:	10310000 	.word	0x10310000
 8005a80:	10320000 	.word	0x10320000
 8005a84:	10220000 	.word	0x10220000
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40010800 	.word	0x40010800
 8005a94:	40010c00 	.word	0x40010c00
 8005a98:	40011000 	.word	0x40011000
 8005a9c:	40011400 	.word	0x40011400
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ab4:	787b      	ldrb	r3, [r7, #1]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aba:	887a      	ldrh	r2, [r7, #2]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005ac0:	e003      	b.n	8005aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	041a      	lsls	r2, r3, #16
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	611a      	str	r2, [r3, #16]
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	887b      	ldrh	r3, [r7, #2]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005af2:	e002      	b.n	8005afa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005af4:	887a      	ldrh	r2, [r7, #2]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d006      	beq.n	8005b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b1a:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd fe56 	bl	80037d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40010400 	.word	0x40010400

08005b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e10f      	b.n	8005d66 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff f9da 	bl	8004f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b78:	f001 fc6c 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4a7b      	ldr	r2, [pc, #492]	; (8005d70 <HAL_I2C_Init+0x23c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d807      	bhi.n	8005b98 <HAL_I2C_Init+0x64>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a7a      	ldr	r2, [pc, #488]	; (8005d74 <HAL_I2C_Init+0x240>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf94      	ite	ls
 8005b90:	2301      	movls	r3, #1
 8005b92:	2300      	movhi	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e006      	b.n	8005ba6 <HAL_I2C_Init+0x72>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a77      	ldr	r2, [pc, #476]	; (8005d78 <HAL_I2C_Init+0x244>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf94      	ite	ls
 8005ba0:	2301      	movls	r3, #1
 8005ba2:	2300      	movhi	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0db      	b.n	8005d66 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a72      	ldr	r2, [pc, #456]	; (8005d7c <HAL_I2C_Init+0x248>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0c9b      	lsrs	r3, r3, #18
 8005bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <HAL_I2C_Init+0x23c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d802      	bhi.n	8005be8 <HAL_I2C_Init+0xb4>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3301      	adds	r3, #1
 8005be6:	e009      	b.n	8005bfc <HAL_I2C_Init+0xc8>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	4a63      	ldr	r2, [pc, #396]	; (8005d80 <HAL_I2C_Init+0x24c>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4956      	ldr	r1, [pc, #344]	; (8005d70 <HAL_I2C_Init+0x23c>)
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	d80d      	bhi.n	8005c38 <HAL_I2C_Init+0x104>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1e59      	subs	r1, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	bf38      	it	cc
 8005c34:	2304      	movcc	r3, #4
 8005c36:	e04f      	b.n	8005cd8 <HAL_I2C_Init+0x1a4>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <HAL_I2C_Init+0x130>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1e58      	subs	r0, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e012      	b.n	8005c8a <HAL_I2C_Init+0x156>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1e58      	subs	r0, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	0099      	lsls	r1, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Init+0x15e>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e022      	b.n	8005cd8 <HAL_I2C_Init+0x1a4>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <HAL_I2C_Init+0x184>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1e58      	subs	r0, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	e00f      	b.n	8005cd8 <HAL_I2C_Init+0x1a4>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e58      	subs	r0, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	0099      	lsls	r1, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6809      	ldr	r1, [r1, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6911      	ldr	r1, [r2, #16]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	000186a0 	.word	0x000186a0
 8005d74:	001e847f 	.word	0x001e847f
 8005d78:	003d08ff 	.word	0x003d08ff
 8005d7c:	431bde83 	.word	0x431bde83
 8005d80:	10624dd3 	.word	0x10624dd3

08005d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	460b      	mov	r3, r1
 8005d92:	817b      	strh	r3, [r7, #10]
 8005d94:	4613      	mov	r3, r2
 8005d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d98:	f7ff fbf0 	bl	800557c <HAL_GetTick>
 8005d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80e0 	bne.w	8005f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2319      	movs	r3, #25
 8005db2:	2201      	movs	r2, #1
 8005db4:	4970      	ldr	r1, [pc, #448]	; (8005f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fd8e 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0d3      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x50>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0cc      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d007      	beq.n	8005dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2221      	movs	r2, #33	; 0x21
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2210      	movs	r2, #16
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	893a      	ldrh	r2, [r7, #8]
 8005e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a50      	ldr	r2, [pc, #320]	; (8005f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e3c:	8979      	ldrh	r1, [r7, #10]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fc02 	bl	800664c <I2C_MasterRequestWrite>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e08d      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e68:	e066      	b.n	8005f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fe08 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d107      	bne.n	8005e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e06b      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11b      	bne.n	8005f0c <HAL_I2C_Master_Transmit+0x188>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d017      	beq.n	8005f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6a39      	ldr	r1, [r7, #32]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fdf8 	bl	8006b06 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d107      	bne.n	8005f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01a      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d194      	bne.n	8005e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	00100002 	.word	0x00100002
 8005f7c:	ffff0000 	.word	0xffff0000

08005f80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	460b      	mov	r3, r1
 8005f94:	813b      	strh	r3, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f9a:	f7ff faef 	bl	800557c <HAL_GetTick>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	f040 8218 	bne.w	80063de <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2319      	movs	r3, #25
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	4981      	ldr	r1, [pc, #516]	; (80061bc <HAL_I2C_Mem_Read+0x23c>)
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fc8d 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e20b      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_I2C_Mem_Read+0x56>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e204      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d007      	beq.n	8005ffc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800600a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2222      	movs	r2, #34	; 0x22
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2240      	movs	r2, #64	; 0x40
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800602c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a61      	ldr	r2, [pc, #388]	; (80061c0 <HAL_I2C_Mem_Read+0x240>)
 800603c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800603e:	88f8      	ldrh	r0, [r7, #6]
 8006040:	893a      	ldrh	r2, [r7, #8]
 8006042:	8979      	ldrh	r1, [r7, #10]
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4603      	mov	r3, r0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fb72 	bl	8006738 <I2C_RequestMemoryRead>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e1c0      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d113      	bne.n	800608e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	2300      	movs	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e194      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11d      	bne.n	80060d2 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060a6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80060ce:	b662      	cpsie	i
 80060d0:	e172      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d11d      	bne.n	8006116 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80060ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006112:	b662      	cpsie	i
 8006114:	e150      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006124:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800613c:	e13c      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	2b03      	cmp	r3, #3
 8006144:	f200 80f5 	bhi.w	8006332 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614c:	2b01      	cmp	r3, #1
 800614e:	d123      	bne.n	8006198 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fd17 	bl	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e13d      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006196:	e10f      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	2b02      	cmp	r3, #2
 800619e:	d150      	bne.n	8006242 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	2200      	movs	r2, #0
 80061a8:	4906      	ldr	r1, [pc, #24]	; (80061c4 <HAL_I2C_Mem_Read+0x244>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fb94 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e112      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
 80061ba:	bf00      	nop
 80061bc:	00100002 	.word	0x00100002
 80061c0:	ffff0000 	.word	0xffff0000
 80061c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80061c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800620c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006240:	e0ba      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	2200      	movs	r2, #0
 800624a:	4967      	ldr	r1, [pc, #412]	; (80063e8 <HAL_I2C_Mem_Read+0x468>)
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fb43 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0c1      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800626c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2200      	movs	r2, #0
 80062a8:	494f      	ldr	r1, [pc, #316]	; (80063e8 <HAL_I2C_Mem_Read+0x468>)
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 fb14 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e092      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80062fc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006330:	e042      	b.n	80063b8 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fc26 	bl	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e04c      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b04      	cmp	r3, #4
 8006384:	d118      	bne.n	80063b8 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f aebe 	bne.w	800613e <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	; 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	00010004 	.word	0x00010004

080063ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	460b      	mov	r3, r1
 80063fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80063fc:	f7ff f8be 	bl	800557c <HAL_GetTick>
 8006400:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b20      	cmp	r3, #32
 8006410:	f040 8105 	bne.w	800661e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2319      	movs	r3, #25
 800641a:	2201      	movs	r2, #1
 800641c:	4982      	ldr	r1, [pc, #520]	; (8006628 <HAL_I2C_IsDeviceReady+0x23c>)
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fa5a 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800642a:	2302      	movs	r3, #2
 800642c:	e0f8      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_I2C_IsDeviceReady+0x50>
 8006438:	2302      	movs	r3, #2
 800643a:	e0f1      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d007      	beq.n	8006462 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2224      	movs	r2, #36	; 0x24
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4a6a      	ldr	r2, [pc, #424]	; (800662c <HAL_I2C_IsDeviceReady+0x240>)
 8006484:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fa18 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e0b6      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064b2:	897b      	ldrh	r3, [r7, #10]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80064c2:	f7ff f85b 	bl	800557c <HAL_GetTick>
 80064c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ec:	bf0c      	ite	eq
 80064ee:	2301      	moveq	r3, #1
 80064f0:	2300      	movne	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064f6:	e025      	b.n	8006544 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064f8:	f7ff f840 	bl	800557c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <HAL_I2C_IsDeviceReady+0x122>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22a0      	movs	r2, #160	; 0xa0
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2ba0      	cmp	r3, #160	; 0xa0
 800654e:	d005      	beq.n	800655c <HAL_I2C_IsDeviceReady+0x170>
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <HAL_I2C_IsDeviceReady+0x170>
 8006556:	7dbb      	ldrb	r3, [r7, #22]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0cd      	beq.n	80064f8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d129      	bne.n	80065c6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006580:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2319      	movs	r3, #25
 800659e:	2201      	movs	r2, #1
 80065a0:	4921      	ldr	r1, [pc, #132]	; (8006628 <HAL_I2C_IsDeviceReady+0x23c>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f998 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e036      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e02c      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2319      	movs	r3, #25
 80065e6:	2201      	movs	r2, #1
 80065e8:	490f      	ldr	r1, [pc, #60]	; (8006628 <HAL_I2C_IsDeviceReady+0x23c>)
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f974 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e012      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	3301      	adds	r3, #1
 80065fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	f4ff af3e 	bcc.w	8006486 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	00100002 	.word	0x00100002
 800662c:	ffff0000 	.word	0xffff0000

08006630 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663e:	b2db      	uxtb	r3, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
	...

0800664c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	460b      	mov	r3, r1
 800665a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d006      	beq.n	8006676 <I2C_MasterRequestWrite+0x2a>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d003      	beq.n	8006676 <I2C_MasterRequestWrite+0x2a>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006674:	d108      	bne.n	8006688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e00b      	b.n	80066a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	2b12      	cmp	r3, #18
 800668e:	d107      	bne.n	80066a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f913 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e035      	b.n	8006728 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c4:	d108      	bne.n	80066d8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066c6:	897b      	ldrh	r3, [r7, #10]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066d4:	611a      	str	r2, [r3, #16]
 80066d6:	e01b      	b.n	8006710 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066d8:	897b      	ldrh	r3, [r7, #10]
 80066da:	11db      	asrs	r3, r3, #7
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0306 	and.w	r3, r3, #6
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f063 030f 	orn	r3, r3, #15
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	490e      	ldr	r1, [pc, #56]	; (8006730 <I2C_MasterRequestWrite+0xe4>)
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f945 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e010      	b.n	8006728 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006706:	897b      	ldrh	r3, [r7, #10]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4907      	ldr	r1, [pc, #28]	; (8006734 <I2C_MasterRequestWrite+0xe8>)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f935 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00010008 	.word	0x00010008
 8006734:	00010002 	.word	0x00010002

08006738 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006760:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2200      	movs	r2, #0
 800677a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8aa 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e09e      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800678e:	897b      	ldrh	r3, [r7, #10]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800679c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	494c      	ldr	r1, [pc, #304]	; (80068d4 <I2C_RequestMemoryRead+0x19c>)
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f8ee 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e08b      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067cc:	6a39      	ldr	r1, [r7, #32]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f958 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d107      	bne.n	80067f2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e06a      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d105      	bne.n	8006808 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067fc:	893b      	ldrh	r3, [r7, #8]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	611a      	str	r2, [r3, #16]
 8006806:	e021      	b.n	800684c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006808:	893b      	ldrh	r3, [r7, #8]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b29b      	uxth	r3, r3
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006818:	6a39      	ldr	r1, [r7, #32]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f932 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b04      	cmp	r3, #4
 800682c:	d107      	bne.n	800683e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e044      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006842:	893b      	ldrh	r3, [r7, #8]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	6a39      	ldr	r1, [r7, #32]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f917 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	2b04      	cmp	r3, #4
 8006862:	d107      	bne.n	8006874 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006872:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e029      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006886:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2200      	movs	r2, #0
 8006890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f81f 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e013      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068a4:	897b      	ldrh	r3, [r7, #10]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	6a3a      	ldr	r2, [r7, #32]
 80068b8:	4906      	ldr	r1, [pc, #24]	; (80068d4 <I2C_RequestMemoryRead+0x19c>)
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f863 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	00010002 	.word	0x00010002

080068d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e8:	e025      	b.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d021      	beq.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fe fe43 	bl	800557c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e023      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10d      	bne.n	800695c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	43da      	mvns	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	e00c      	b.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d0b6      	beq.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006994:	e051      	b.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d123      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e046      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d021      	beq.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fe fdc1 	bl	800557c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d116      	bne.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e020      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10c      	bne.n	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	43da      	mvns	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	e00b      	b.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d18d      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a90:	e02d      	b.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f8ce 	bl	8006c34 <I2C_IsAcknowledgeFailed>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02d      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d021      	beq.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fe fd67 	bl	800557c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e007      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d1ca      	bne.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b12:	e02d      	b.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f88d 	bl	8006c34 <I2C_IsAcknowledgeFailed>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e02d      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d021      	beq.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fe fd26 	bl	800557c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e007      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d1ca      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b94:	e042      	b.n	8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d119      	bne.n	8006bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0210 	mvn.w	r2, #16
 8006bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e029      	b.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd8:	f7fe fcd0 	bl	800557c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d302      	bcc.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d116      	bne.n	8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e007      	b.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d1b5      	bne.n	8006b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4a:	d11b      	bne.n	8006c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006c94:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	bf00      	nop
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	420e0020 	.word	0x420e0020

08006ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e26c      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8087 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cc8:	4b92      	ldr	r3, [pc, #584]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d00c      	beq.n	8006cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006cd4:	4b8f      	ldr	r3, [pc, #572]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d112      	bne.n	8006d06 <HAL_RCC_OscConfig+0x5e>
 8006ce0:	4b8c      	ldr	r3, [pc, #560]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cec:	d10b      	bne.n	8006d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cee:	4b89      	ldr	r3, [pc, #548]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d06c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x12c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d168      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e246      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCC_OscConfig+0x76>
 8006d10:	4b80      	ldr	r3, [pc, #512]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a7f      	ldr	r2, [pc, #508]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e02e      	b.n	8006d7c <HAL_RCC_OscConfig+0xd4>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCC_OscConfig+0x98>
 8006d26:	4b7b      	ldr	r3, [pc, #492]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7a      	ldr	r2, [pc, #488]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	4b78      	ldr	r3, [pc, #480]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a77      	ldr	r2, [pc, #476]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e01d      	b.n	8006d7c <HAL_RCC_OscConfig+0xd4>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCC_OscConfig+0xbc>
 8006d4a:	4b72      	ldr	r3, [pc, #456]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a71      	ldr	r2, [pc, #452]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	4b6f      	ldr	r3, [pc, #444]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a6e      	ldr	r2, [pc, #440]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e00b      	b.n	8006d7c <HAL_RCC_OscConfig+0xd4>
 8006d64:	4b6b      	ldr	r3, [pc, #428]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6a      	ldr	r2, [pc, #424]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	4b68      	ldr	r3, [pc, #416]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a67      	ldr	r2, [pc, #412]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d013      	beq.n	8006dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d84:	f7fe fbfa 	bl	800557c <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d8c:	f7fe fbf6 	bl	800557c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b64      	cmp	r3, #100	; 0x64
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e1fa      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	4b5d      	ldr	r3, [pc, #372]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0xe4>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fe fbe6 	bl	800557c <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db4:	f7fe fbe2 	bl	800557c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	; 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e1e6      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc6:	4b53      	ldr	r3, [pc, #332]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x10c>
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d063      	beq.n	8006eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006de2:	4b4c      	ldr	r3, [pc, #304]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dee:	4b49      	ldr	r3, [pc, #292]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f003 030c 	and.w	r3, r3, #12
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d11c      	bne.n	8006e34 <HAL_RCC_OscConfig+0x18c>
 8006dfa:	4b46      	ldr	r3, [pc, #280]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d116      	bne.n	8006e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e06:	4b43      	ldr	r3, [pc, #268]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_RCC_OscConfig+0x176>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d001      	beq.n	8006e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e1ba      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1e:	4b3d      	ldr	r3, [pc, #244]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	4939      	ldr	r1, [pc, #228]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e32:	e03a      	b.n	8006eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d020      	beq.n	8006e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e3c:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <HAL_RCC_OscConfig+0x270>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e42:	f7fe fb9b 	bl	800557c <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e4a:	f7fe fb97 	bl	800557c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e19b      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5c:	4b2d      	ldr	r3, [pc, #180]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e68:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4927      	ldr	r1, [pc, #156]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	600b      	str	r3, [r1, #0]
 8006e7c:	e015      	b.n	8006eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <HAL_RCC_OscConfig+0x270>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e84:	f7fe fb7a 	bl	800557c <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e8c:	f7fe fb76 	bl	800557c <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e17a      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f0      	bne.n	8006e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d03a      	beq.n	8006f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d019      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ebe:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <HAL_RCC_OscConfig+0x274>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec4:	f7fe fb5a 	bl	800557c <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ecc:	f7fe fb56 	bl	800557c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e15a      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f0      	beq.n	8006ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006eea:	2001      	movs	r0, #1
 8006eec:	f000 fada 	bl	80074a4 <RCC_Delay>
 8006ef0:	e01c      	b.n	8006f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <HAL_RCC_OscConfig+0x274>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef8:	f7fe fb40 	bl	800557c <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efe:	e00f      	b.n	8006f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f00:	f7fe fb3c 	bl	800557c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d908      	bls.n	8006f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e140      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
 8006f12:	bf00      	nop
 8006f14:	40021000 	.word	0x40021000
 8006f18:	42420000 	.word	0x42420000
 8006f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f20:	4b9e      	ldr	r3, [pc, #632]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e9      	bne.n	8006f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80a6 	beq.w	8007086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f3e:	4b97      	ldr	r3, [pc, #604]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f4a:	4b94      	ldr	r3, [pc, #592]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	4a93      	ldr	r2, [pc, #588]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f54:	61d3      	str	r3, [r2, #28]
 8006f56:	4b91      	ldr	r3, [pc, #580]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	60bb      	str	r3, [r7, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f66:	4b8e      	ldr	r3, [pc, #568]	; (80071a0 <HAL_RCC_OscConfig+0x4f8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d118      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f72:	4b8b      	ldr	r3, [pc, #556]	; (80071a0 <HAL_RCC_OscConfig+0x4f8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a8a      	ldr	r2, [pc, #552]	; (80071a0 <HAL_RCC_OscConfig+0x4f8>)
 8006f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f7e:	f7fe fafd 	bl	800557c <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f84:	e008      	b.n	8006f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f86:	f7fe faf9 	bl	800557c <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b64      	cmp	r3, #100	; 0x64
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e0fd      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f98:	4b81      	ldr	r3, [pc, #516]	; (80071a0 <HAL_RCC_OscConfig+0x4f8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d106      	bne.n	8006fba <HAL_RCC_OscConfig+0x312>
 8006fac:	4b7b      	ldr	r3, [pc, #492]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	4a7a      	ldr	r2, [pc, #488]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	6213      	str	r3, [r2, #32]
 8006fb8:	e02d      	b.n	8007016 <HAL_RCC_OscConfig+0x36e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x334>
 8006fc2:	4b76      	ldr	r3, [pc, #472]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	4a75      	ldr	r2, [pc, #468]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	6213      	str	r3, [r2, #32]
 8006fce:	4b73      	ldr	r3, [pc, #460]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	4a72      	ldr	r2, [pc, #456]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fd4:	f023 0304 	bic.w	r3, r3, #4
 8006fd8:	6213      	str	r3, [r2, #32]
 8006fda:	e01c      	b.n	8007016 <HAL_RCC_OscConfig+0x36e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d10c      	bne.n	8006ffe <HAL_RCC_OscConfig+0x356>
 8006fe4:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	4a6c      	ldr	r2, [pc, #432]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6213      	str	r3, [r2, #32]
 8006ff0:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	4a69      	ldr	r2, [pc, #420]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	6213      	str	r3, [r2, #32]
 8006ffc:	e00b      	b.n	8007016 <HAL_RCC_OscConfig+0x36e>
 8006ffe:	4b67      	ldr	r3, [pc, #412]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4a66      	ldr	r2, [pc, #408]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	6213      	str	r3, [r2, #32]
 800700a:	4b64      	ldr	r3, [pc, #400]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	4a63      	ldr	r2, [pc, #396]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d015      	beq.n	800704a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800701e:	f7fe faad 	bl	800557c <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007024:	e00a      	b.n	800703c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007026:	f7fe faa9 	bl	800557c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e0ab      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703c:	4b57      	ldr	r3, [pc, #348]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0ee      	beq.n	8007026 <HAL_RCC_OscConfig+0x37e>
 8007048:	e014      	b.n	8007074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800704a:	f7fe fa97 	bl	800557c <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fe fa93 	bl	800557c <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e095      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007068:	4b4c      	ldr	r3, [pc, #304]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1ee      	bne.n	8007052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d105      	bne.n	8007086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707a:	4b48      	ldr	r3, [pc, #288]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	4a47      	ldr	r2, [pc, #284]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8081 	beq.w	8007192 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007090:	4b42      	ldr	r3, [pc, #264]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b08      	cmp	r3, #8
 800709a:	d061      	beq.n	8007160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d146      	bne.n	8007132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a4:	4b3f      	ldr	r3, [pc, #252]	; (80071a4 <HAL_RCC_OscConfig+0x4fc>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070aa:	f7fe fa67 	bl	800557c <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b2:	f7fe fa63 	bl	800557c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e067      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070c4:	4b35      	ldr	r3, [pc, #212]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f0      	bne.n	80070b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d108      	bne.n	80070ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070da:	4b30      	ldr	r3, [pc, #192]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	492d      	ldr	r1, [pc, #180]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ec:	4b2b      	ldr	r3, [pc, #172]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a19      	ldr	r1, [r3, #32]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	430b      	orrs	r3, r1
 80070fe:	4927      	ldr	r1, [pc, #156]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <HAL_RCC_OscConfig+0x4fc>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710a:	f7fe fa37 	bl	800557c <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007112:	f7fe fa33 	bl	800557c <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e037      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007124:	4b1d      	ldr	r3, [pc, #116]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f0      	beq.n	8007112 <HAL_RCC_OscConfig+0x46a>
 8007130:	e02f      	b.n	8007192 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007132:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <HAL_RCC_OscConfig+0x4fc>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007138:	f7fe fa20 	bl	800557c <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007140:	f7fe fa1c 	bl	800557c <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e020      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x498>
 800715e:	e018      	b.n	8007192 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e013      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_OscConfig+0x4f4>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	429a      	cmp	r2, r3
 800717e:	d106      	bne.n	800718e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d001      	beq.n	8007192 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000
 80071a0:	40007000 	.word	0x40007000
 80071a4:	42420060 	.word	0x42420060

080071a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0d0      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071bc:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d910      	bls.n	80071ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	4b67      	ldr	r3, [pc, #412]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 0207 	bic.w	r2, r3, #7
 80071d2:	4965      	ldr	r1, [pc, #404]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b63      	ldr	r3, [pc, #396]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0b8      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007204:	4b59      	ldr	r3, [pc, #356]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a58      	ldr	r2, [pc, #352]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800720a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800720e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800721c:	4b53      	ldr	r3, [pc, #332]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a52      	ldr	r2, [pc, #328]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007228:	4b50      	ldr	r3, [pc, #320]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	494d      	ldr	r1, [pc, #308]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d040      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d107      	bne.n	800725e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d115      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e07f      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d107      	bne.n	8007276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e073      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007276:	4b3d      	ldr	r3, [pc, #244]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e06b      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f023 0203 	bic.w	r2, r3, #3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	4936      	ldr	r1, [pc, #216]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007298:	f7fe f970 	bl	800557c <HAL_GetTick>
 800729c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729e:	e00a      	b.n	80072b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a0:	f7fe f96c 	bl	800557c <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e053      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b6:	4b2d      	ldr	r3, [pc, #180]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f003 020c 	and.w	r2, r3, #12
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d1eb      	bne.n	80072a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c8:	4b27      	ldr	r3, [pc, #156]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d210      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d6:	4b24      	ldr	r3, [pc, #144]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 0207 	bic.w	r2, r3, #7
 80072de:	4922      	ldr	r1, [pc, #136]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e032      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007304:	4b19      	ldr	r3, [pc, #100]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4916      	ldr	r1, [pc, #88]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007312:	4313      	orrs	r3, r2
 8007314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007322:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	490e      	ldr	r1, [pc, #56]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007332:	4313      	orrs	r3, r2
 8007334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007336:	f000 f821 	bl	800737c <HAL_RCC_GetSysClockFreq>
 800733a:	4601      	mov	r1, r0
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	5cd3      	ldrb	r3, [r2, r3]
 800734a:	fa21 f303 	lsr.w	r3, r1, r3
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <HAL_RCC_ClockConfig+0x1cc>)
 8007350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <HAL_RCC_ClockConfig+0x1d0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe f8ce 	bl	80054f8 <HAL_InitTick>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40022000 	.word	0x40022000
 800736c:	40021000 	.word	0x40021000
 8007370:	08009698 	.word	0x08009698
 8007374:	200005f0 	.word	0x200005f0
 8007378:	200005f4 	.word	0x200005f4

0800737c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800737c:	b490      	push	{r4, r7}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007384:	1d3c      	adds	r4, r7, #4
 8007386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800738c:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_RCC_GetSysClockFreq+0xb4>)
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f003 030c 	and.w	r3, r3, #12
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d002      	beq.n	80073bc <HAL_RCC_GetSysClockFreq+0x40>
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d003      	beq.n	80073c2 <HAL_RCC_GetSysClockFreq+0x46>
 80073ba:	e02d      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073bc:	4b1e      	ldr	r3, [pc, #120]	; (8007438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073be:	623b      	str	r3, [r7, #32]
      break;
 80073c0:	e02d      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	0c9b      	lsrs	r3, r3, #18
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073ce:	4413      	add	r3, r2
 80073d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80073d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d013      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	0c5b      	lsrs	r3, r3, #17
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073ee:	4413      	add	r3, r2
 80073f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80073f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4a0f      	ldr	r2, [pc, #60]	; (8007438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073fa:	fb02 f203 	mul.w	r2, r2, r3
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
 8007406:	e004      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4a0b      	ldr	r2, [pc, #44]	; (8007438 <HAL_RCC_GetSysClockFreq+0xbc>)
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	623b      	str	r3, [r7, #32]
      break;
 8007416:	e002      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007418:	4b08      	ldr	r3, [pc, #32]	; (800743c <HAL_RCC_GetSysClockFreq+0xc0>)
 800741a:	623b      	str	r3, [r7, #32]
      break;
 800741c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800741e:	6a3b      	ldr	r3, [r7, #32]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3728      	adds	r7, #40	; 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bc90      	pop	{r4, r7}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	08009670 	.word	0x08009670
 8007430:	08009680 	.word	0x08009680
 8007434:	40021000 	.word	0x40021000
 8007438:	003d0900 	.word	0x003d0900
 800743c:	007a1200 	.word	0x007a1200

08007440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <HAL_RCC_GetHCLKFreq+0x10>)
 8007446:	681b      	ldr	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr
 8007450:	200005f0 	.word	0x200005f0

08007454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007458:	f7ff fff2 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 800745c:	4601      	mov	r1, r0
 800745e:	4b05      	ldr	r3, [pc, #20]	; (8007474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	0a1b      	lsrs	r3, r3, #8
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	4a03      	ldr	r2, [pc, #12]	; (8007478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800746a:	5cd3      	ldrb	r3, [r2, r3]
 800746c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40021000 	.word	0x40021000
 8007478:	080096a8 	.word	0x080096a8

0800747c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007480:	f7ff ffde 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 8007484:	4601      	mov	r1, r0
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	0adb      	lsrs	r3, r3, #11
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	4a03      	ldr	r2, [pc, #12]	; (80074a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
 8007494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40021000 	.word	0x40021000
 80074a0:	080096a8 	.word	0x080096a8

080074a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <RCC_Delay+0x34>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0a      	ldr	r2, [pc, #40]	; (80074dc <RCC_Delay+0x38>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	0a5b      	lsrs	r3, r3, #9
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80074c0:	bf00      	nop
  }
  while (Delay --);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1e5a      	subs	r2, r3, #1
 80074c6:	60fa      	str	r2, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f9      	bne.n	80074c0 <RCC_Delay+0x1c>
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	200005f0 	.word	0x200005f0
 80074dc:	10624dd3 	.word	0x10624dd3

080074e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d07d      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007500:	4b4f      	ldr	r3, [pc, #316]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800750c:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	4a4b      	ldr	r2, [pc, #300]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007516:	61d3      	str	r3, [r2, #28]
 8007518:	4b49      	ldr	r3, [pc, #292]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007524:	2301      	movs	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007528:	4b46      	ldr	r3, [pc, #280]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007530:	2b00      	cmp	r3, #0
 8007532:	d118      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007534:	4b43      	ldr	r3, [pc, #268]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a42      	ldr	r2, [pc, #264]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800753a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007540:	f7fe f81c 	bl	800557c <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007546:	e008      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007548:	f7fe f818 	bl	800557c <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b64      	cmp	r3, #100	; 0x64
 8007554:	d901      	bls.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e06d      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755a:	4b3a      	ldr	r3, [pc, #232]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0f0      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007566:	4b36      	ldr	r3, [pc, #216]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d02e      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	429a      	cmp	r2, r3
 8007582:	d027      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007584:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007594:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800759a:	4a29      	ldr	r2, [pc, #164]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d014      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075aa:	f7fd ffe7 	bl	800557c <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b0:	e00a      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b2:	f7fd ffe3 	bl	800557c <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e036      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0ee      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4917      	ldr	r1, [pc, #92]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	4a13      	ldr	r2, [pc, #76]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	490b      	ldr	r1, [pc, #44]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007612:	4313      	orrs	r3, r2
 8007614:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	4904      	ldr	r1, [pc, #16]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007630:	4313      	orrs	r3, r2
 8007632:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	40007000 	.word	0x40007000
 8007648:	42420440 	.word	0x42420440

0800764c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b08d      	sub	sp, #52	; 0x34
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007654:	4b55      	ldr	r3, [pc, #340]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007656:	f107 040c 	add.w	r4, r7, #12
 800765a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800765c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007660:	4b53      	ldr	r3, [pc, #332]	; (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
 800766a:	2300      	movs	r3, #0
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766e:	2300      	movs	r3, #0
 8007670:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	2300      	movs	r3, #0
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d07f      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007680:	2b10      	cmp	r3, #16
 8007682:	d002      	beq.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8007684:	2b01      	cmp	r3, #1
 8007686:	d048      	beq.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007688:	e08b      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800768a:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007690:	4b48      	ldr	r3, [pc, #288]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d07f      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	0c9b      	lsrs	r3, r3, #18
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076a8:	4413      	add	r3, r2
 80076aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80076ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d018      	beq.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076ba:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	0c5b      	lsrs	r3, r3, #17
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076c8:	4413      	add	r3, r2
 80076ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00d      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80076da:	4a37      	ldr	r2, [pc, #220]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	fbb2 f2f3 	udiv	r2, r2, r3
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ea:	e004      	b.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	4a32      	ldr	r2, [pc, #200]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80076f6:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007702:	d102      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007708:	e048      	b.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	085b      	lsrs	r3, r3, #1
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007718:	e040      	b.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800771a:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	d108      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8007736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28
 800773c:	e01f      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007748:	d109      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8007756:	f649 4340 	movw	r3, #40000	; 0x9c40
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
 800775c:	e00f      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007768:	d11a      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d014      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8007776:	f647 2312 	movw	r3, #31250	; 0x7a12
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800777c:	e010      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800777e:	e00f      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007780:	f7ff fe7c 	bl	800747c <HAL_RCC_GetPCLK2Freq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	0b9b      	lsrs	r3, r3, #14
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	3301      	adds	r3, #1
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	fbb2 f3f3 	udiv	r3, r2, r3
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800779a:	e002      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80077a0:	bf00      	nop
    }
  }
  return (frequency);
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3734      	adds	r7, #52	; 0x34
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd90      	pop	{r4, r7, pc}
 80077ac:	08009684 	.word	0x08009684
 80077b0:	08009694 	.word	0x08009694
 80077b4:	40021000 	.word	0x40021000
 80077b8:	003d0900 	.word	0x003d0900
 80077bc:	aaaaaaab 	.word	0xaaaaaaab

080077c0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e084      	b.n	80078e0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7c5b      	ldrb	r3, [r3, #17]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fd fbd2 	bl	8004f90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f87a 	bl	80078ec <HAL_RTC_WaitForSynchro>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e06b      	b.n	80078e0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f89c 	bl	8007946 <RTC_EnterInitMode>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e060      	b.n	80078e0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0207 	bic.w	r2, r2, #7
 800782c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007836:	4b2c      	ldr	r3, [pc, #176]	; (80078e8 <HAL_RTC_Init+0x128>)
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	4a2b      	ldr	r2, [pc, #172]	; (80078e8 <HAL_RTC_Init+0x128>)
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007842:	4b29      	ldr	r3, [pc, #164]	; (80078e8 <HAL_RTC_Init+0x128>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	4926      	ldr	r1, [pc, #152]	; (80078e8 <HAL_RTC_Init+0x128>)
 8007850:	4313      	orrs	r3, r2
 8007852:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d003      	beq.n	8007866 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e00e      	b.n	8007884 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007866:	2001      	movs	r0, #1
 8007868:	f7ff fef0 	bl	800764c <HAL_RCCEx_GetPeriphCLKFreq>
 800786c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2204      	movs	r2, #4
 8007878:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e030      	b.n	80078e0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3b01      	subs	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f023 010f 	bic.w	r1, r3, #15
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	0c1a      	lsrs	r2, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	041b      	lsls	r3, r3, #16
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	b291      	uxth	r1, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	430b      	orrs	r3, r1
 80078ae:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f870 	bl	8007996 <RTC_ExitInitMode>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2204      	movs	r2, #4
 80078c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e00c      	b.n	80078e0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80078de:	2300      	movs	r3, #0
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40006c00 	.word	0x40006c00

080078ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e01d      	b.n	800793e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0208 	bic.w	r2, r2, #8
 8007910:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007912:	f7fd fe33 	bl	800557c <HAL_GetTick>
 8007916:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007918:	e009      	b.n	800792e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800791a:	f7fd fe2f 	bl	800557c <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007928:	d901      	bls.n	800792e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e007      	b.n	800793e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0ee      	beq.n	800791a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007952:	f7fd fe13 	bl	800557c <HAL_GetTick>
 8007956:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007958:	e009      	b.n	800796e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800795a:	f7fd fe0f 	bl	800557c <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007968:	d901      	bls.n	800796e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e00f      	b.n	800798e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0ee      	beq.n	800795a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0210 	orr.w	r2, r2, #16
 800798a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0210 	bic.w	r2, r2, #16
 80079b0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80079b2:	f7fd fde3 	bl	800557c <HAL_GetTick>
 80079b6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80079b8:	e009      	b.n	80079ce <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80079ba:	f7fd fddf 	bl	800557c <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c8:	d901      	bls.n	80079ce <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e007      	b.n	80079de <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0ee      	beq.n	80079ba <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e053      	b.n	8007aa0 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fd fae0 	bl	8004fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	ea42 0103 	orr.w	r1, r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	0c1a      	lsrs	r2, r3, #16
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f002 0204 	and.w	r2, r2, #4
 8007a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69da      	ldr	r2, [r3, #28]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_SPI_Transmit+0x22>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e11e      	b.n	8007d08 <HAL_SPI_Transmit+0x260>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ad2:	f7fd fd53 	bl	800557c <HAL_GetTick>
 8007ad6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d002      	beq.n	8007aee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007aec:	e103      	b.n	8007cf6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_SPI_Transmit+0x52>
 8007af4:	88fb      	ldrh	r3, [r7, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d102      	bne.n	8007b00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007afe:	e0fa      	b.n	8007cf6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b46:	d107      	bne.n	8007b58 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d007      	beq.n	8007b76 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7e:	d14b      	bne.n	8007c18 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_Transmit+0xe6>
 8007b88:	8afb      	ldrh	r3, [r7, #22]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d13e      	bne.n	8007c0c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	881a      	ldrh	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	1c9a      	adds	r2, r3, #2
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bb2:	e02b      	b.n	8007c0c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d112      	bne.n	8007be8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	881a      	ldrh	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	1c9a      	adds	r2, r3, #2
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007be6:	e011      	b.n	8007c0c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007be8:	f7fd fcc8 	bl	800557c <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d803      	bhi.n	8007c00 <HAL_SPI_Transmit+0x158>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d102      	bne.n	8007c06 <HAL_SPI_Transmit+0x15e>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c0a:	e074      	b.n	8007cf6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1ce      	bne.n	8007bb4 <HAL_SPI_Transmit+0x10c>
 8007c16:	e04c      	b.n	8007cb2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_SPI_Transmit+0x17e>
 8007c20:	8afb      	ldrh	r3, [r7, #22]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d140      	bne.n	8007ca8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c4c:	e02c      	b.n	8007ca8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d113      	bne.n	8007c84 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	7812      	ldrb	r2, [r2, #0]
 8007c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c82:	e011      	b.n	8007ca8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c84:	f7fd fc7a 	bl	800557c <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d803      	bhi.n	8007c9c <HAL_SPI_Transmit+0x1f4>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9a:	d102      	bne.n	8007ca2 <HAL_SPI_Transmit+0x1fa>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ca6:	e026      	b.n	8007cf6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1cd      	bne.n	8007c4e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f894 	bl	8007de4 <SPI_EndRxTxTransaction>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e000      	b.n	8007cf6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007cf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d20:	e04c      	b.n	8007dbc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d048      	beq.n	8007dbc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d2a:	f7fd fc27 	bl	800557c <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d902      	bls.n	8007d40 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d13d      	bne.n	8007dbc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d58:	d111      	bne.n	8007d7e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d62:	d004      	beq.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6c:	d107      	bne.n	8007d7e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	d10f      	bne.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e00f      	b.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d1a3      	bne.n	8007d22 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff ff88 	bl	8007d10 <SPI_WaitFlagStateUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e000      	b.n	8007e18 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b06      	cmp	r3, #6
 8007e48:	d007      	beq.n	8007e5a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0201 	orr.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bc80      	pop	{r7}
 8007e64:	4770      	bx	lr

08007e66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e01d      	b.n	8007eb4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fd f913 	bl	80050b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 fab9 	bl	800841c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fc8e 	bl	80087f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <HAL_TIM_OC_Start+0x60>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d107      	bne.n	8007eee <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b06      	cmp	r3, #6
 8007efe:	d007      	beq.n	8007f10 <HAL_TIM_OC_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40012c00 	.word	0x40012c00

08007f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e01d      	b.n	8007f6e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fd f890 	bl	800506c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f000 fa5c 	bl	800841c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d122      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d11b      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0202 	mvn.w	r2, #2
 8007fa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fa14 	bl	80083e6 <HAL_TIM_IC_CaptureCallback>
 8007fbe:	e005      	b.n	8007fcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa07 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa16 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d122      	bne.n	8008026 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d11b      	bne.n	8008026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f06f 0204 	mvn.w	r2, #4
 8007ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9ea 	bl	80083e6 <HAL_TIM_IC_CaptureCallback>
 8008012:	e005      	b.n	8008020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9dd 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9ec 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d122      	bne.n	800807a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b08      	cmp	r3, #8
 8008040:	d11b      	bne.n	800807a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f06f 0208 	mvn.w	r2, #8
 800804a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f9c0 	bl	80083e6 <HAL_TIM_IC_CaptureCallback>
 8008066:	e005      	b.n	8008074 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9b3 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f9c2 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d122      	bne.n	80080ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b10      	cmp	r3, #16
 8008094:	d11b      	bne.n	80080ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f06f 0210 	mvn.w	r2, #16
 800809e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2208      	movs	r2, #8
 80080a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f996 	bl	80083e6 <HAL_TIM_IC_CaptureCallback>
 80080ba:	e005      	b.n	80080c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f989 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f998 	bl	80083f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10e      	bne.n	80080fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f06f 0201 	mvn.w	r2, #1
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fb fba9 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	2b80      	cmp	r3, #128	; 0x80
 8008106:	d10e      	bne.n	8008126 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d107      	bne.n	8008126 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fc27 	bl	8008974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d10e      	bne.n	8008152 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d107      	bne.n	8008152 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f95c 	bl	800840a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b20      	cmp	r3, #32
 800815e:	d10e      	bne.n	800817e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b20      	cmp	r3, #32
 800816c:	d107      	bne.n	800817e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f06f 0220 	mvn.w	r2, #32
 8008176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fbf2 	bl	8008962 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800819e:	2302      	movs	r3, #2
 80081a0:	e04e      	b.n	8008240 <HAL_TIM_OC_ConfigChannel+0xb8>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b0c      	cmp	r3, #12
 80081b6:	d839      	bhi.n	800822c <HAL_TIM_OC_ConfigChannel+0xa4>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081f5 	.word	0x080081f5
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	0800822d 	.word	0x0800822d
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	08008203 	.word	0x08008203
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	08008211 	.word	0x08008211
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800822d 	.word	0x0800822d
 80081f0:	0800821f 	.word	0x0800821f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f970 	bl	80084e0 <TIM_OC1_SetConfig>
      break;
 8008200:	e015      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f9cf 	bl	80085ac <TIM_OC2_SetConfig>
      break;
 800820e:	e00e      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fa32 	bl	8008680 <TIM_OC3_SetConfig>
      break;
 800821c:	e007      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fa95 	bl	8008754 <TIM_OC4_SetConfig>
      break;
 800822a:	e000      	b.n	800822e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800822c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800825e:	2302      	movs	r3, #2
 8008260:	e0b4      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b0c      	cmp	r3, #12
 8008276:	f200 809f 	bhi.w	80083b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800827a:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	080082b5 	.word	0x080082b5
 8008284:	080083b9 	.word	0x080083b9
 8008288:	080083b9 	.word	0x080083b9
 800828c:	080083b9 	.word	0x080083b9
 8008290:	080082f5 	.word	0x080082f5
 8008294:	080083b9 	.word	0x080083b9
 8008298:	080083b9 	.word	0x080083b9
 800829c:	080083b9 	.word	0x080083b9
 80082a0:	08008337 	.word	0x08008337
 80082a4:	080083b9 	.word	0x080083b9
 80082a8:	080083b9 	.word	0x080083b9
 80082ac:	080083b9 	.word	0x080083b9
 80082b0:	08008377 	.word	0x08008377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f910 	bl	80084e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0208 	orr.w	r2, r2, #8
 80082ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0204 	bic.w	r2, r2, #4
 80082de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6999      	ldr	r1, [r3, #24]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	619a      	str	r2, [r3, #24]
      break;
 80082f2:	e062      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f956 	bl	80085ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800830e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699a      	ldr	r2, [r3, #24]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800831e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6999      	ldr	r1, [r3, #24]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	021a      	lsls	r2, r3, #8
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	619a      	str	r2, [r3, #24]
      break;
 8008334:	e041      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f99f 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f042 0208 	orr.w	r2, r2, #8
 8008350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69da      	ldr	r2, [r3, #28]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0204 	bic.w	r2, r2, #4
 8008360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69d9      	ldr	r1, [r3, #28]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	61da      	str	r2, [r3, #28]
      break;
 8008374:	e021      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	4618      	mov	r0, r3
 800837e:	f000 f9e9 	bl	8008754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69da      	ldr	r2, [r3, #28]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69d9      	ldr	r1, [r3, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	021a      	lsls	r2, r3, #8
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	61da      	str	r2, [r3, #28]
      break;
 80083b6:	e000      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80083b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr

0800840a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a29      	ldr	r2, [pc, #164]	; (80084d4 <TIM_Base_SetConfig+0xb8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_Base_SetConfig+0x30>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843a:	d007      	beq.n	800844c <TIM_Base_SetConfig+0x30>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a26      	ldr	r2, [pc, #152]	; (80084d8 <TIM_Base_SetConfig+0xbc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_Base_SetConfig+0x30>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a25      	ldr	r2, [pc, #148]	; (80084dc <TIM_Base_SetConfig+0xc0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d108      	bne.n	800845e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <TIM_Base_SetConfig+0xb8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_Base_SetConfig+0x62>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d007      	beq.n	800847e <TIM_Base_SetConfig+0x62>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <TIM_Base_SetConfig+0xbc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_Base_SetConfig+0x62>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a18      	ldr	r2, [pc, #96]	; (80084dc <TIM_Base_SetConfig+0xc0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a07      	ldr	r2, [pc, #28]	; (80084d4 <TIM_Base_SetConfig+0xb8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d103      	bne.n	80084c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	615a      	str	r2, [r3, #20]
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	40012c00 	.word	0x40012c00
 80084d8:	40000400 	.word	0x40000400
 80084dc:	40000800 	.word	0x40000800

080084e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 0302 	bic.w	r3, r3, #2
 8008528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a1c      	ldr	r2, [pc, #112]	; (80085a8 <TIM_OC1_SetConfig+0xc8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d10c      	bne.n	8008556 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f023 0308 	bic.w	r3, r3, #8
 8008542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 0304 	bic.w	r3, r3, #4
 8008554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <TIM_OC1_SetConfig+0xc8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d111      	bne.n	8008582 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800856c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	621a      	str	r2, [r3, #32]
}
 800859c:	bf00      	nop
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40012c00 	.word	0x40012c00

080085ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0210 	bic.w	r2, r3, #16
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1d      	ldr	r2, [pc, #116]	; (800867c <TIM_OC2_SetConfig+0xd0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d10d      	bne.n	8008628 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a14      	ldr	r2, [pc, #80]	; (800867c <TIM_OC2_SetConfig+0xd0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d113      	bne.n	8008658 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	40012c00 	.word	0x40012c00

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <TIM_OC3_SetConfig+0xd0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d10d      	bne.n	80086fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a14      	ldr	r2, [pc, #80]	; (8008750 <TIM_OC3_SetConfig+0xd0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d113      	bne.n	800872a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4313      	orrs	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	621a      	str	r2, [r3, #32]
}
 8008744:	bf00      	nop
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40012c00 	.word	0x40012c00

08008754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800879e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a0f      	ldr	r2, [pc, #60]	; (80087ec <TIM_OC4_SetConfig+0x98>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d109      	bne.n	80087c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	019b      	lsls	r3, r3, #6
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	40012c00 	.word	0x40012c00

080087f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2201      	movs	r2, #1
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	43db      	mvns	r3, r3
 8008812:	401a      	ands	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a1a      	ldr	r2, [r3, #32]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f003 031f 	and.w	r3, r3, #31
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	fa01 f303 	lsl.w	r3, r1, r3
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	621a      	str	r2, [r3, #32]
}
 800882e:	bf00      	nop
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800884c:	2302      	movs	r3, #2
 800884e:	e032      	b.n	80088b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008888:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	4313      	orrs	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088d8:	2302      	movs	r3, #2
 80088da:	e03d      	b.n	8008958 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr

08008962 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e03f      	b.n	8008a18 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fc fbf1 	bl	8005194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2224      	movs	r2, #36	; 0x24
 80089b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f828 	bl	8008a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695a      	ldr	r2, [r3, #20]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008a5a:	f023 030c 	bic.w	r3, r3, #12
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	68f9      	ldr	r1, [r7, #12]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a52      	ldr	r2, [pc, #328]	; (8008bcc <UART_SetConfig+0x1ac>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d14e      	bne.n	8008b26 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a88:	f7fe fcf8 	bl	800747c <HAL_RCC_GetPCLK2Freq>
 8008a8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009a      	lsls	r2, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa4:	4a4a      	ldr	r2, [pc, #296]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	0119      	lsls	r1, r3, #4
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009a      	lsls	r2, r3, #2
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac4:	4b42      	ldr	r3, [pc, #264]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	2064      	movs	r0, #100	; 0x64
 8008ace:	fb00 f303 	mul.w	r3, r0, r3
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	3332      	adds	r3, #50	; 0x32
 8008ad8:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ae4:	4419      	add	r1, r3
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009a      	lsls	r2, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008afc:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008afe:	fba3 0302 	umull	r0, r3, r3, r2
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	2064      	movs	r0, #100	; 0x64
 8008b06:	fb00 f303 	mul.w	r3, r0, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	3332      	adds	r3, #50	; 0x32
 8008b10:	4a2f      	ldr	r2, [pc, #188]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	f003 020f 	and.w	r2, r3, #15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	440a      	add	r2, r1
 8008b22:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008b24:	e04d      	b.n	8008bc2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fe fc95 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 8008b2a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009a      	lsls	r2, r3, #2
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b42:	4a23      	ldr	r2, [pc, #140]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008b44:	fba2 2303 	umull	r2, r3, r2, r3
 8008b48:	095b      	lsrs	r3, r3, #5
 8008b4a:	0119      	lsls	r1, r3, #4
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009a      	lsls	r2, r3, #2
 8008b56:	441a      	add	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b62:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008b64:	fba3 0302 	umull	r0, r3, r3, r2
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	2064      	movs	r0, #100	; 0x64
 8008b6c:	fb00 f303 	mul.w	r3, r0, r3
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	3332      	adds	r3, #50	; 0x32
 8008b76:	4a16      	ldr	r2, [pc, #88]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008b78:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b82:	4419      	add	r1, r3
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009a      	lsls	r2, r3, #2
 8008b8e:	441a      	add	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008b9c:	fba3 0302 	umull	r0, r3, r3, r2
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	2064      	movs	r0, #100	; 0x64
 8008ba4:	fb00 f303 	mul.w	r3, r0, r3
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	3332      	adds	r3, #50	; 0x32
 8008bae:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <UART_SetConfig+0x1b0>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	f003 020f 	and.w	r2, r3, #15
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40013800 	.word	0x40013800
 8008bd0:	51eb851f 	.word	0x51eb851f

08008bd4 <__errno>:
 8008bd4:	4b01      	ldr	r3, [pc, #4]	; (8008bdc <__errno+0x8>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	200005fc 	.word	0x200005fc

08008be0 <__libc_init_array>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	2500      	movs	r5, #0
 8008be4:	4e0c      	ldr	r6, [pc, #48]	; (8008c18 <__libc_init_array+0x38>)
 8008be6:	4c0d      	ldr	r4, [pc, #52]	; (8008c1c <__libc_init_array+0x3c>)
 8008be8:	1ba4      	subs	r4, r4, r6
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	42a5      	cmp	r5, r4
 8008bee:	d109      	bne.n	8008c04 <__libc_init_array+0x24>
 8008bf0:	f000 fc36 	bl	8009460 <_init>
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	4e0a      	ldr	r6, [pc, #40]	; (8008c20 <__libc_init_array+0x40>)
 8008bf8:	4c0a      	ldr	r4, [pc, #40]	; (8008c24 <__libc_init_array+0x44>)
 8008bfa:	1ba4      	subs	r4, r4, r6
 8008bfc:	10a4      	asrs	r4, r4, #2
 8008bfe:	42a5      	cmp	r5, r4
 8008c00:	d105      	bne.n	8008c0e <__libc_init_array+0x2e>
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c08:	4798      	blx	r3
 8008c0a:	3501      	adds	r5, #1
 8008c0c:	e7ee      	b.n	8008bec <__libc_init_array+0xc>
 8008c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c12:	4798      	blx	r3
 8008c14:	3501      	adds	r5, #1
 8008c16:	e7f2      	b.n	8008bfe <__libc_init_array+0x1e>
 8008c18:	080096e4 	.word	0x080096e4
 8008c1c:	080096e4 	.word	0x080096e4
 8008c20:	080096e4 	.word	0x080096e4
 8008c24:	080096e8 	.word	0x080096e8

08008c28 <memcpy>:
 8008c28:	b510      	push	{r4, lr}
 8008c2a:	1e43      	subs	r3, r0, #1
 8008c2c:	440a      	add	r2, r1
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d100      	bne.n	8008c34 <memcpy+0xc>
 8008c32:	bd10      	pop	{r4, pc}
 8008c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3c:	e7f7      	b.n	8008c2e <memcpy+0x6>

08008c3e <memset>:
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4402      	add	r2, r0
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d100      	bne.n	8008c48 <memset+0xa>
 8008c46:	4770      	bx	lr
 8008c48:	f803 1b01 	strb.w	r1, [r3], #1
 8008c4c:	e7f9      	b.n	8008c42 <memset+0x4>
	...

08008c50 <_vsiprintf_r>:
 8008c50:	b500      	push	{lr}
 8008c52:	b09b      	sub	sp, #108	; 0x6c
 8008c54:	9100      	str	r1, [sp, #0]
 8008c56:	9104      	str	r1, [sp, #16]
 8008c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	9102      	str	r1, [sp, #8]
 8008c60:	4905      	ldr	r1, [pc, #20]	; (8008c78 <_vsiprintf_r+0x28>)
 8008c62:	9103      	str	r1, [sp, #12]
 8008c64:	4669      	mov	r1, sp
 8008c66:	f000 f86d 	bl	8008d44 <_svfiprintf_r>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	b01b      	add	sp, #108	; 0x6c
 8008c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c76:	bf00      	nop
 8008c78:	ffff0208 	.word	0xffff0208

08008c7c <vsiprintf>:
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	460a      	mov	r2, r1
 8008c80:	4601      	mov	r1, r0
 8008c82:	4802      	ldr	r0, [pc, #8]	; (8008c8c <vsiprintf+0x10>)
 8008c84:	6800      	ldr	r0, [r0, #0]
 8008c86:	f7ff bfe3 	b.w	8008c50 <_vsiprintf_r>
 8008c8a:	bf00      	nop
 8008c8c:	200005fc 	.word	0x200005fc

08008c90 <__ssputs_r>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	688e      	ldr	r6, [r1, #8]
 8008c96:	4682      	mov	sl, r0
 8008c98:	429e      	cmp	r6, r3
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	4699      	mov	r9, r3
 8008ca0:	d837      	bhi.n	8008d12 <__ssputs_r+0x82>
 8008ca2:	898a      	ldrh	r2, [r1, #12]
 8008ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca8:	d031      	beq.n	8008d0e <__ssputs_r+0x7e>
 8008caa:	2302      	movs	r3, #2
 8008cac:	6825      	ldr	r5, [r4, #0]
 8008cae:	6909      	ldr	r1, [r1, #16]
 8008cb0:	1a6f      	subs	r7, r5, r1
 8008cb2:	6965      	ldr	r5, [r4, #20]
 8008cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008cbc:	f109 0301 	add.w	r3, r9, #1
 8008cc0:	443b      	add	r3, r7
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf38      	it	cc
 8008cc6:	461d      	movcc	r5, r3
 8008cc8:	0553      	lsls	r3, r2, #21
 8008cca:	d530      	bpl.n	8008d2e <__ssputs_r+0x9e>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f000 fb2d 	bl	800932c <_malloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	b950      	cbnz	r0, 8008cec <__ssputs_r+0x5c>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	f8ca 3000 	str.w	r3, [sl]
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cec:	463a      	mov	r2, r7
 8008cee:	6921      	ldr	r1, [r4, #16]
 8008cf0:	f7ff ff9a 	bl	8008c28 <memcpy>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	6126      	str	r6, [r4, #16]
 8008d02:	443e      	add	r6, r7
 8008d04:	6026      	str	r6, [r4, #0]
 8008d06:	464e      	mov	r6, r9
 8008d08:	6165      	str	r5, [r4, #20]
 8008d0a:	1bed      	subs	r5, r5, r7
 8008d0c:	60a5      	str	r5, [r4, #8]
 8008d0e:	454e      	cmp	r6, r9
 8008d10:	d900      	bls.n	8008d14 <__ssputs_r+0x84>
 8008d12:	464e      	mov	r6, r9
 8008d14:	4632      	mov	r2, r6
 8008d16:	4641      	mov	r1, r8
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	f000 faa1 	bl	8009260 <memmove>
 8008d1e:	68a3      	ldr	r3, [r4, #8]
 8008d20:	2000      	movs	r0, #0
 8008d22:	1b9b      	subs	r3, r3, r6
 8008d24:	60a3      	str	r3, [r4, #8]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	441e      	add	r6, r3
 8008d2a:	6026      	str	r6, [r4, #0]
 8008d2c:	e7dc      	b.n	8008ce8 <__ssputs_r+0x58>
 8008d2e:	462a      	mov	r2, r5
 8008d30:	f000 fb56 	bl	80093e0 <_realloc_r>
 8008d34:	4606      	mov	r6, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d1e2      	bne.n	8008d00 <__ssputs_r+0x70>
 8008d3a:	6921      	ldr	r1, [r4, #16]
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	f000 faa9 	bl	8009294 <_free_r>
 8008d42:	e7c8      	b.n	8008cd6 <__ssputs_r+0x46>

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	461d      	mov	r5, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	b09d      	sub	sp, #116	; 0x74
 8008d4e:	061f      	lsls	r7, r3, #24
 8008d50:	4680      	mov	r8, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	4616      	mov	r6, r2
 8008d56:	d50f      	bpl.n	8008d78 <_svfiprintf_r+0x34>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b96b      	cbnz	r3, 8008d78 <_svfiprintf_r+0x34>
 8008d5c:	2140      	movs	r1, #64	; 0x40
 8008d5e:	f000 fae5 	bl	800932c <_malloc_r>
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	6120      	str	r0, [r4, #16]
 8008d66:	b928      	cbnz	r0, 8008d74 <_svfiprintf_r+0x30>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	f8c8 3000 	str.w	r3, [r8]
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d72:	e0c8      	b.n	8008f06 <_svfiprintf_r+0x1c2>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	6163      	str	r3, [r4, #20]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d82:	2330      	movs	r3, #48	; 0x30
 8008d84:	f04f 0b01 	mov.w	fp, #1
 8008d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8c:	9503      	str	r5, [sp, #12]
 8008d8e:	4637      	mov	r7, r6
 8008d90:	463d      	mov	r5, r7
 8008d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d96:	b10b      	cbz	r3, 8008d9c <_svfiprintf_r+0x58>
 8008d98:	2b25      	cmp	r3, #37	; 0x25
 8008d9a:	d13e      	bne.n	8008e1a <_svfiprintf_r+0xd6>
 8008d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008da0:	d00b      	beq.n	8008dba <_svfiprintf_r+0x76>
 8008da2:	4653      	mov	r3, sl
 8008da4:	4632      	mov	r2, r6
 8008da6:	4621      	mov	r1, r4
 8008da8:	4640      	mov	r0, r8
 8008daa:	f7ff ff71 	bl	8008c90 <__ssputs_r>
 8008dae:	3001      	adds	r0, #1
 8008db0:	f000 80a4 	beq.w	8008efc <_svfiprintf_r+0x1b8>
 8008db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db6:	4453      	add	r3, sl
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	783b      	ldrb	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 809d 	beq.w	8008efc <_svfiprintf_r+0x1b8>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dcc:	9304      	str	r3, [sp, #16]
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd6:	462f      	mov	r7, r5
 8008dd8:	2205      	movs	r2, #5
 8008dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008dde:	4850      	ldr	r0, [pc, #320]	; (8008f20 <_svfiprintf_r+0x1dc>)
 8008de0:	f000 fa30 	bl	8009244 <memchr>
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	b9d0      	cbnz	r0, 8008e1e <_svfiprintf_r+0xda>
 8008de8:	06d9      	lsls	r1, r3, #27
 8008dea:	bf44      	itt	mi
 8008dec:	2220      	movmi	r2, #32
 8008dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008df2:	071a      	lsls	r2, r3, #28
 8008df4:	bf44      	itt	mi
 8008df6:	222b      	movmi	r2, #43	; 0x2b
 8008df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008dfc:	782a      	ldrb	r2, [r5, #0]
 8008dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xea>
 8008e02:	462f      	mov	r7, r5
 8008e04:	2000      	movs	r0, #0
 8008e06:	250a      	movs	r5, #10
 8008e08:	9a07      	ldr	r2, [sp, #28]
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e10:	3b30      	subs	r3, #48	; 0x30
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d94d      	bls.n	8008eb2 <_svfiprintf_r+0x16e>
 8008e16:	b1b8      	cbz	r0, 8008e48 <_svfiprintf_r+0x104>
 8008e18:	e00f      	b.n	8008e3a <_svfiprintf_r+0xf6>
 8008e1a:	462f      	mov	r7, r5
 8008e1c:	e7b8      	b.n	8008d90 <_svfiprintf_r+0x4c>
 8008e1e:	4a40      	ldr	r2, [pc, #256]	; (8008f20 <_svfiprintf_r+0x1dc>)
 8008e20:	463d      	mov	r5, r7
 8008e22:	1a80      	subs	r0, r0, r2
 8008e24:	fa0b f000 	lsl.w	r0, fp, r0
 8008e28:	4318      	orrs	r0, r3
 8008e2a:	9004      	str	r0, [sp, #16]
 8008e2c:	e7d3      	b.n	8008dd6 <_svfiprintf_r+0x92>
 8008e2e:	9a03      	ldr	r2, [sp, #12]
 8008e30:	1d11      	adds	r1, r2, #4
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	db01      	blt.n	8008e3e <_svfiprintf_r+0xfa>
 8008e3a:	9207      	str	r2, [sp, #28]
 8008e3c:	e004      	b.n	8008e48 <_svfiprintf_r+0x104>
 8008e3e:	4252      	negs	r2, r2
 8008e40:	f043 0302 	orr.w	r3, r3, #2
 8008e44:	9207      	str	r2, [sp, #28]
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	783b      	ldrb	r3, [r7, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x124>
 8008e4e:	787b      	ldrb	r3, [r7, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d133      	bne.n	8008ebc <_svfiprintf_r+0x178>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	3702      	adds	r7, #2
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	9203      	str	r2, [sp, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	4d2e      	ldr	r5, [pc, #184]	; (8008f24 <_svfiprintf_r+0x1e0>)
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	7839      	ldrb	r1, [r7, #0]
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f9e8 	bl	8009244 <memchr>
 8008e74:	b138      	cbz	r0, 8008e86 <_svfiprintf_r+0x142>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	1b40      	subs	r0, r0, r5
 8008e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	3701      	adds	r7, #1
 8008e82:	4303      	orrs	r3, r0
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	7839      	ldrb	r1, [r7, #0]
 8008e88:	2206      	movs	r2, #6
 8008e8a:	4827      	ldr	r0, [pc, #156]	; (8008f28 <_svfiprintf_r+0x1e4>)
 8008e8c:	1c7e      	adds	r6, r7, #1
 8008e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e92:	f000 f9d7 	bl	8009244 <memchr>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d038      	beq.n	8008f0c <_svfiprintf_r+0x1c8>
 8008e9a:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <_svfiprintf_r+0x1e8>)
 8008e9c:	bb13      	cbnz	r3, 8008ee4 <_svfiprintf_r+0x1a0>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	3307      	adds	r3, #7
 8008ea2:	f023 0307 	bic.w	r3, r3, #7
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	9303      	str	r3, [sp, #12]
 8008eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eac:	444b      	add	r3, r9
 8008eae:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb0:	e76d      	b.n	8008d8e <_svfiprintf_r+0x4a>
 8008eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	460f      	mov	r7, r1
 8008eba:	e7a6      	b.n	8008e0a <_svfiprintf_r+0xc6>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	250a      	movs	r5, #10
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	3701      	adds	r7, #1
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ecc:	3a30      	subs	r2, #48	; 0x30
 8008ece:	2a09      	cmp	r2, #9
 8008ed0:	d903      	bls.n	8008eda <_svfiprintf_r+0x196>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0c8      	beq.n	8008e68 <_svfiprintf_r+0x124>
 8008ed6:	9105      	str	r1, [sp, #20]
 8008ed8:	e7c6      	b.n	8008e68 <_svfiprintf_r+0x124>
 8008eda:	fb05 2101 	mla	r1, r5, r1, r2
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	e7f0      	b.n	8008ec6 <_svfiprintf_r+0x182>
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	4622      	mov	r2, r4
 8008eea:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f3af 8000 	nop.w
 8008ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ef8:	4681      	mov	r9, r0
 8008efa:	d1d6      	bne.n	8008eaa <_svfiprintf_r+0x166>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	065b      	lsls	r3, r3, #25
 8008f00:	f53f af35 	bmi.w	8008d6e <_svfiprintf_r+0x2a>
 8008f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f06:	b01d      	add	sp, #116	; 0x74
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	ab03      	add	r3, sp, #12
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4622      	mov	r2, r4
 8008f12:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008f14:	a904      	add	r1, sp, #16
 8008f16:	4640      	mov	r0, r8
 8008f18:	f000 f882 	bl	8009020 <_printf_i>
 8008f1c:	e7ea      	b.n	8008ef4 <_svfiprintf_r+0x1b0>
 8008f1e:	bf00      	nop
 8008f20:	080096b0 	.word	0x080096b0
 8008f24:	080096b6 	.word	0x080096b6
 8008f28:	080096ba 	.word	0x080096ba
 8008f2c:	00000000 	.word	0x00000000
 8008f30:	08008c91 	.word	0x08008c91

08008f34 <_printf_common>:
 8008f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	4691      	mov	r9, r2
 8008f3a:	461f      	mov	r7, r3
 8008f3c:	688a      	ldr	r2, [r1, #8]
 8008f3e:	690b      	ldr	r3, [r1, #16]
 8008f40:	4606      	mov	r6, r0
 8008f42:	4293      	cmp	r3, r2
 8008f44:	bfb8      	it	lt
 8008f46:	4613      	movlt	r3, r2
 8008f48:	f8c9 3000 	str.w	r3, [r9]
 8008f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f50:	460c      	mov	r4, r1
 8008f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f56:	b112      	cbz	r2, 8008f5e <_printf_common+0x2a>
 8008f58:	3301      	adds	r3, #1
 8008f5a:	f8c9 3000 	str.w	r3, [r9]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	0699      	lsls	r1, r3, #26
 8008f62:	bf42      	ittt	mi
 8008f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008f68:	3302      	addmi	r3, #2
 8008f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	f015 0506 	ands.w	r5, r5, #6
 8008f74:	d107      	bne.n	8008f86 <_printf_common+0x52>
 8008f76:	f104 0a19 	add.w	sl, r4, #25
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f80:	1a9b      	subs	r3, r3, r2
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	dc29      	bgt.n	8008fda <_printf_common+0xa6>
 8008f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	3300      	adds	r3, #0
 8008f8e:	bf18      	it	ne
 8008f90:	2301      	movne	r3, #1
 8008f92:	0692      	lsls	r2, r2, #26
 8008f94:	d42e      	bmi.n	8008ff4 <_printf_common+0xc0>
 8008f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	47c0      	blx	r8
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d021      	beq.n	8008fe8 <_printf_common+0xb4>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	68e5      	ldr	r5, [r4, #12]
 8008fa8:	f003 0306 	and.w	r3, r3, #6
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	bf18      	it	ne
 8008fb0:	2500      	movne	r5, #0
 8008fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8008fb6:	f04f 0900 	mov.w	r9, #0
 8008fba:	bf08      	it	eq
 8008fbc:	1aad      	subeq	r5, r5, r2
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	bf08      	it	eq
 8008fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	bfc4      	itt	gt
 8008fcc:	1a9b      	subgt	r3, r3, r2
 8008fce:	18ed      	addgt	r5, r5, r3
 8008fd0:	341a      	adds	r4, #26
 8008fd2:	454d      	cmp	r5, r9
 8008fd4:	d11a      	bne.n	800900c <_printf_common+0xd8>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e008      	b.n	8008fec <_printf_common+0xb8>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4639      	mov	r1, r7
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	47c0      	blx	r8
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d103      	bne.n	8008ff0 <_printf_common+0xbc>
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	e7c2      	b.n	8008f7a <_printf_common+0x46>
 8008ff4:	2030      	movs	r0, #48	; 0x30
 8008ff6:	18e1      	adds	r1, r4, r3
 8008ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009002:	4422      	add	r2, r4
 8009004:	3302      	adds	r3, #2
 8009006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800900a:	e7c4      	b.n	8008f96 <_printf_common+0x62>
 800900c:	2301      	movs	r3, #1
 800900e:	4622      	mov	r2, r4
 8009010:	4639      	mov	r1, r7
 8009012:	4630      	mov	r0, r6
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d0e6      	beq.n	8008fe8 <_printf_common+0xb4>
 800901a:	f109 0901 	add.w	r9, r9, #1
 800901e:	e7d8      	b.n	8008fd2 <_printf_common+0x9e>

08009020 <_printf_i>:
 8009020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009028:	460c      	mov	r4, r1
 800902a:	7e09      	ldrb	r1, [r1, #24]
 800902c:	b085      	sub	sp, #20
 800902e:	296e      	cmp	r1, #110	; 0x6e
 8009030:	4617      	mov	r7, r2
 8009032:	4606      	mov	r6, r0
 8009034:	4698      	mov	r8, r3
 8009036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009038:	f000 80b3 	beq.w	80091a2 <_printf_i+0x182>
 800903c:	d822      	bhi.n	8009084 <_printf_i+0x64>
 800903e:	2963      	cmp	r1, #99	; 0x63
 8009040:	d036      	beq.n	80090b0 <_printf_i+0x90>
 8009042:	d80a      	bhi.n	800905a <_printf_i+0x3a>
 8009044:	2900      	cmp	r1, #0
 8009046:	f000 80b9 	beq.w	80091bc <_printf_i+0x19c>
 800904a:	2958      	cmp	r1, #88	; 0x58
 800904c:	f000 8083 	beq.w	8009156 <_printf_i+0x136>
 8009050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009058:	e032      	b.n	80090c0 <_printf_i+0xa0>
 800905a:	2964      	cmp	r1, #100	; 0x64
 800905c:	d001      	beq.n	8009062 <_printf_i+0x42>
 800905e:	2969      	cmp	r1, #105	; 0x69
 8009060:	d1f6      	bne.n	8009050 <_printf_i+0x30>
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	6813      	ldr	r3, [r2, #0]
 8009066:	0605      	lsls	r5, r0, #24
 8009068:	f103 0104 	add.w	r1, r3, #4
 800906c:	d52a      	bpl.n	80090c4 <_printf_i+0xa4>
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6011      	str	r1, [r2, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	da03      	bge.n	800907e <_printf_i+0x5e>
 8009076:	222d      	movs	r2, #45	; 0x2d
 8009078:	425b      	negs	r3, r3
 800907a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800907e:	486f      	ldr	r0, [pc, #444]	; (800923c <_printf_i+0x21c>)
 8009080:	220a      	movs	r2, #10
 8009082:	e039      	b.n	80090f8 <_printf_i+0xd8>
 8009084:	2973      	cmp	r1, #115	; 0x73
 8009086:	f000 809d 	beq.w	80091c4 <_printf_i+0x1a4>
 800908a:	d808      	bhi.n	800909e <_printf_i+0x7e>
 800908c:	296f      	cmp	r1, #111	; 0x6f
 800908e:	d020      	beq.n	80090d2 <_printf_i+0xb2>
 8009090:	2970      	cmp	r1, #112	; 0x70
 8009092:	d1dd      	bne.n	8009050 <_printf_i+0x30>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	f043 0320 	orr.w	r3, r3, #32
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	e003      	b.n	80090a6 <_printf_i+0x86>
 800909e:	2975      	cmp	r1, #117	; 0x75
 80090a0:	d017      	beq.n	80090d2 <_printf_i+0xb2>
 80090a2:	2978      	cmp	r1, #120	; 0x78
 80090a4:	d1d4      	bne.n	8009050 <_printf_i+0x30>
 80090a6:	2378      	movs	r3, #120	; 0x78
 80090a8:	4865      	ldr	r0, [pc, #404]	; (8009240 <_printf_i+0x220>)
 80090aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ae:	e055      	b.n	800915c <_printf_i+0x13c>
 80090b0:	6813      	ldr	r3, [r2, #0]
 80090b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b6:	1d19      	adds	r1, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6011      	str	r1, [r2, #0]
 80090bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c0:	2301      	movs	r3, #1
 80090c2:	e08c      	b.n	80091de <_printf_i+0x1be>
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090ca:	6011      	str	r1, [r2, #0]
 80090cc:	bf18      	it	ne
 80090ce:	b21b      	sxthne	r3, r3
 80090d0:	e7cf      	b.n	8009072 <_printf_i+0x52>
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	6825      	ldr	r5, [r4, #0]
 80090d6:	1d18      	adds	r0, r3, #4
 80090d8:	6010      	str	r0, [r2, #0]
 80090da:	0628      	lsls	r0, r5, #24
 80090dc:	d501      	bpl.n	80090e2 <_printf_i+0xc2>
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	e002      	b.n	80090e8 <_printf_i+0xc8>
 80090e2:	0668      	lsls	r0, r5, #25
 80090e4:	d5fb      	bpl.n	80090de <_printf_i+0xbe>
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	296f      	cmp	r1, #111	; 0x6f
 80090ea:	bf14      	ite	ne
 80090ec:	220a      	movne	r2, #10
 80090ee:	2208      	moveq	r2, #8
 80090f0:	4852      	ldr	r0, [pc, #328]	; (800923c <_printf_i+0x21c>)
 80090f2:	2100      	movs	r1, #0
 80090f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090f8:	6865      	ldr	r5, [r4, #4]
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	60a5      	str	r5, [r4, #8]
 80090fe:	f2c0 8095 	blt.w	800922c <_printf_i+0x20c>
 8009102:	6821      	ldr	r1, [r4, #0]
 8009104:	f021 0104 	bic.w	r1, r1, #4
 8009108:	6021      	str	r1, [r4, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d13d      	bne.n	800918a <_printf_i+0x16a>
 800910e:	2d00      	cmp	r5, #0
 8009110:	f040 808e 	bne.w	8009230 <_printf_i+0x210>
 8009114:	4665      	mov	r5, ip
 8009116:	2a08      	cmp	r2, #8
 8009118:	d10b      	bne.n	8009132 <_printf_i+0x112>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	07db      	lsls	r3, r3, #31
 800911e:	d508      	bpl.n	8009132 <_printf_i+0x112>
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	429a      	cmp	r2, r3
 8009126:	bfde      	ittt	le
 8009128:	2330      	movle	r3, #48	; 0x30
 800912a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800912e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009132:	ebac 0305 	sub.w	r3, ip, r5
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	f8cd 8000 	str.w	r8, [sp]
 800913c:	463b      	mov	r3, r7
 800913e:	aa03      	add	r2, sp, #12
 8009140:	4621      	mov	r1, r4
 8009142:	4630      	mov	r0, r6
 8009144:	f7ff fef6 	bl	8008f34 <_printf_common>
 8009148:	3001      	adds	r0, #1
 800914a:	d14d      	bne.n	80091e8 <_printf_i+0x1c8>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b005      	add	sp, #20
 8009152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009156:	4839      	ldr	r0, [pc, #228]	; (800923c <_printf_i+0x21c>)
 8009158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800915c:	6813      	ldr	r3, [r2, #0]
 800915e:	6821      	ldr	r1, [r4, #0]
 8009160:	1d1d      	adds	r5, r3, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6015      	str	r5, [r2, #0]
 8009166:	060a      	lsls	r2, r1, #24
 8009168:	d50b      	bpl.n	8009182 <_printf_i+0x162>
 800916a:	07ca      	lsls	r2, r1, #31
 800916c:	bf44      	itt	mi
 800916e:	f041 0120 	orrmi.w	r1, r1, #32
 8009172:	6021      	strmi	r1, [r4, #0]
 8009174:	b91b      	cbnz	r3, 800917e <_printf_i+0x15e>
 8009176:	6822      	ldr	r2, [r4, #0]
 8009178:	f022 0220 	bic.w	r2, r2, #32
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	2210      	movs	r2, #16
 8009180:	e7b7      	b.n	80090f2 <_printf_i+0xd2>
 8009182:	064d      	lsls	r5, r1, #25
 8009184:	bf48      	it	mi
 8009186:	b29b      	uxthmi	r3, r3
 8009188:	e7ef      	b.n	800916a <_printf_i+0x14a>
 800918a:	4665      	mov	r5, ip
 800918c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009190:	fb02 3311 	mls	r3, r2, r1, r3
 8009194:	5cc3      	ldrb	r3, [r0, r3]
 8009196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800919a:	460b      	mov	r3, r1
 800919c:	2900      	cmp	r1, #0
 800919e:	d1f5      	bne.n	800918c <_printf_i+0x16c>
 80091a0:	e7b9      	b.n	8009116 <_printf_i+0xf6>
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1d18      	adds	r0, r3, #4
 80091a8:	6961      	ldr	r1, [r4, #20]
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	0628      	lsls	r0, r5, #24
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	d501      	bpl.n	80091b6 <_printf_i+0x196>
 80091b2:	6019      	str	r1, [r3, #0]
 80091b4:	e002      	b.n	80091bc <_printf_i+0x19c>
 80091b6:	066a      	lsls	r2, r5, #25
 80091b8:	d5fb      	bpl.n	80091b2 <_printf_i+0x192>
 80091ba:	8019      	strh	r1, [r3, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	4665      	mov	r5, ip
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	e7b9      	b.n	8009138 <_printf_i+0x118>
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	1d19      	adds	r1, r3, #4
 80091c8:	6011      	str	r1, [r2, #0]
 80091ca:	681d      	ldr	r5, [r3, #0]
 80091cc:	6862      	ldr	r2, [r4, #4]
 80091ce:	2100      	movs	r1, #0
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 f837 	bl	8009244 <memchr>
 80091d6:	b108      	cbz	r0, 80091dc <_printf_i+0x1bc>
 80091d8:	1b40      	subs	r0, r0, r5
 80091da:	6060      	str	r0, [r4, #4]
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	2300      	movs	r3, #0
 80091e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e6:	e7a7      	b.n	8009138 <_printf_i+0x118>
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	462a      	mov	r2, r5
 80091ec:	4639      	mov	r1, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	47c0      	blx	r8
 80091f2:	3001      	adds	r0, #1
 80091f4:	d0aa      	beq.n	800914c <_printf_i+0x12c>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	079b      	lsls	r3, r3, #30
 80091fa:	d413      	bmi.n	8009224 <_printf_i+0x204>
 80091fc:	68e0      	ldr	r0, [r4, #12]
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	4298      	cmp	r0, r3
 8009202:	bfb8      	it	lt
 8009204:	4618      	movlt	r0, r3
 8009206:	e7a3      	b.n	8009150 <_printf_i+0x130>
 8009208:	2301      	movs	r3, #1
 800920a:	464a      	mov	r2, r9
 800920c:	4639      	mov	r1, r7
 800920e:	4630      	mov	r0, r6
 8009210:	47c0      	blx	r8
 8009212:	3001      	adds	r0, #1
 8009214:	d09a      	beq.n	800914c <_printf_i+0x12c>
 8009216:	3501      	adds	r5, #1
 8009218:	68e3      	ldr	r3, [r4, #12]
 800921a:	9a03      	ldr	r2, [sp, #12]
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	42ab      	cmp	r3, r5
 8009220:	dcf2      	bgt.n	8009208 <_printf_i+0x1e8>
 8009222:	e7eb      	b.n	80091fc <_printf_i+0x1dc>
 8009224:	2500      	movs	r5, #0
 8009226:	f104 0919 	add.w	r9, r4, #25
 800922a:	e7f5      	b.n	8009218 <_printf_i+0x1f8>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1ac      	bne.n	800918a <_printf_i+0x16a>
 8009230:	7803      	ldrb	r3, [r0, #0]
 8009232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800923a:	e76c      	b.n	8009116 <_printf_i+0xf6>
 800923c:	080096c1 	.word	0x080096c1
 8009240:	080096d2 	.word	0x080096d2

08009244 <memchr>:
 8009244:	b510      	push	{r4, lr}
 8009246:	b2c9      	uxtb	r1, r1
 8009248:	4402      	add	r2, r0
 800924a:	4290      	cmp	r0, r2
 800924c:	4603      	mov	r3, r0
 800924e:	d101      	bne.n	8009254 <memchr+0x10>
 8009250:	2300      	movs	r3, #0
 8009252:	e003      	b.n	800925c <memchr+0x18>
 8009254:	781c      	ldrb	r4, [r3, #0]
 8009256:	3001      	adds	r0, #1
 8009258:	428c      	cmp	r4, r1
 800925a:	d1f6      	bne.n	800924a <memchr+0x6>
 800925c:	4618      	mov	r0, r3
 800925e:	bd10      	pop	{r4, pc}

08009260 <memmove>:
 8009260:	4288      	cmp	r0, r1
 8009262:	b510      	push	{r4, lr}
 8009264:	eb01 0302 	add.w	r3, r1, r2
 8009268:	d807      	bhi.n	800927a <memmove+0x1a>
 800926a:	1e42      	subs	r2, r0, #1
 800926c:	4299      	cmp	r1, r3
 800926e:	d00a      	beq.n	8009286 <memmove+0x26>
 8009270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009274:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009278:	e7f8      	b.n	800926c <memmove+0xc>
 800927a:	4283      	cmp	r3, r0
 800927c:	d9f5      	bls.n	800926a <memmove+0xa>
 800927e:	1881      	adds	r1, r0, r2
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	42d3      	cmn	r3, r2
 8009284:	d100      	bne.n	8009288 <memmove+0x28>
 8009286:	bd10      	pop	{r4, pc}
 8009288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009290:	e7f7      	b.n	8009282 <memmove+0x22>
	...

08009294 <_free_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4605      	mov	r5, r0
 8009298:	2900      	cmp	r1, #0
 800929a:	d043      	beq.n	8009324 <_free_r+0x90>
 800929c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a0:	1f0c      	subs	r4, r1, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfb8      	it	lt
 80092a6:	18e4      	addlt	r4, r4, r3
 80092a8:	f000 f8d0 	bl	800944c <__malloc_lock>
 80092ac:	4a1e      	ldr	r2, [pc, #120]	; (8009328 <_free_r+0x94>)
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	4610      	mov	r0, r2
 80092b2:	b933      	cbnz	r3, 80092c2 <_free_r+0x2e>
 80092b4:	6063      	str	r3, [r4, #4]
 80092b6:	6014      	str	r4, [r2, #0]
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092be:	f000 b8c6 	b.w	800944e <__malloc_unlock>
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	d90b      	bls.n	80092de <_free_r+0x4a>
 80092c6:	6821      	ldr	r1, [r4, #0]
 80092c8:	1862      	adds	r2, r4, r1
 80092ca:	4293      	cmp	r3, r2
 80092cc:	bf01      	itttt	eq
 80092ce:	681a      	ldreq	r2, [r3, #0]
 80092d0:	685b      	ldreq	r3, [r3, #4]
 80092d2:	1852      	addeq	r2, r2, r1
 80092d4:	6022      	streq	r2, [r4, #0]
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	6004      	str	r4, [r0, #0]
 80092da:	e7ed      	b.n	80092b8 <_free_r+0x24>
 80092dc:	4613      	mov	r3, r2
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	b10a      	cbz	r2, 80092e6 <_free_r+0x52>
 80092e2:	42a2      	cmp	r2, r4
 80092e4:	d9fa      	bls.n	80092dc <_free_r+0x48>
 80092e6:	6819      	ldr	r1, [r3, #0]
 80092e8:	1858      	adds	r0, r3, r1
 80092ea:	42a0      	cmp	r0, r4
 80092ec:	d10b      	bne.n	8009306 <_free_r+0x72>
 80092ee:	6820      	ldr	r0, [r4, #0]
 80092f0:	4401      	add	r1, r0
 80092f2:	1858      	adds	r0, r3, r1
 80092f4:	4282      	cmp	r2, r0
 80092f6:	6019      	str	r1, [r3, #0]
 80092f8:	d1de      	bne.n	80092b8 <_free_r+0x24>
 80092fa:	6810      	ldr	r0, [r2, #0]
 80092fc:	6852      	ldr	r2, [r2, #4]
 80092fe:	4401      	add	r1, r0
 8009300:	6019      	str	r1, [r3, #0]
 8009302:	605a      	str	r2, [r3, #4]
 8009304:	e7d8      	b.n	80092b8 <_free_r+0x24>
 8009306:	d902      	bls.n	800930e <_free_r+0x7a>
 8009308:	230c      	movs	r3, #12
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	e7d4      	b.n	80092b8 <_free_r+0x24>
 800930e:	6820      	ldr	r0, [r4, #0]
 8009310:	1821      	adds	r1, r4, r0
 8009312:	428a      	cmp	r2, r1
 8009314:	bf01      	itttt	eq
 8009316:	6811      	ldreq	r1, [r2, #0]
 8009318:	6852      	ldreq	r2, [r2, #4]
 800931a:	1809      	addeq	r1, r1, r0
 800931c:	6021      	streq	r1, [r4, #0]
 800931e:	6062      	str	r2, [r4, #4]
 8009320:	605c      	str	r4, [r3, #4]
 8009322:	e7c9      	b.n	80092b8 <_free_r+0x24>
 8009324:	bd38      	pop	{r3, r4, r5, pc}
 8009326:	bf00      	nop
 8009328:	200006dc 	.word	0x200006dc

0800932c <_malloc_r>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	1ccd      	adds	r5, r1, #3
 8009330:	f025 0503 	bic.w	r5, r5, #3
 8009334:	3508      	adds	r5, #8
 8009336:	2d0c      	cmp	r5, #12
 8009338:	bf38      	it	cc
 800933a:	250c      	movcc	r5, #12
 800933c:	2d00      	cmp	r5, #0
 800933e:	4606      	mov	r6, r0
 8009340:	db01      	blt.n	8009346 <_malloc_r+0x1a>
 8009342:	42a9      	cmp	r1, r5
 8009344:	d903      	bls.n	800934e <_malloc_r+0x22>
 8009346:	230c      	movs	r3, #12
 8009348:	6033      	str	r3, [r6, #0]
 800934a:	2000      	movs	r0, #0
 800934c:	bd70      	pop	{r4, r5, r6, pc}
 800934e:	f000 f87d 	bl	800944c <__malloc_lock>
 8009352:	4a21      	ldr	r2, [pc, #132]	; (80093d8 <_malloc_r+0xac>)
 8009354:	6814      	ldr	r4, [r2, #0]
 8009356:	4621      	mov	r1, r4
 8009358:	b991      	cbnz	r1, 8009380 <_malloc_r+0x54>
 800935a:	4c20      	ldr	r4, [pc, #128]	; (80093dc <_malloc_r+0xb0>)
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	b91b      	cbnz	r3, 8009368 <_malloc_r+0x3c>
 8009360:	4630      	mov	r0, r6
 8009362:	f000 f863 	bl	800942c <_sbrk_r>
 8009366:	6020      	str	r0, [r4, #0]
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f85e 	bl	800942c <_sbrk_r>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d124      	bne.n	80093be <_malloc_r+0x92>
 8009374:	230c      	movs	r3, #12
 8009376:	4630      	mov	r0, r6
 8009378:	6033      	str	r3, [r6, #0]
 800937a:	f000 f868 	bl	800944e <__malloc_unlock>
 800937e:	e7e4      	b.n	800934a <_malloc_r+0x1e>
 8009380:	680b      	ldr	r3, [r1, #0]
 8009382:	1b5b      	subs	r3, r3, r5
 8009384:	d418      	bmi.n	80093b8 <_malloc_r+0x8c>
 8009386:	2b0b      	cmp	r3, #11
 8009388:	d90f      	bls.n	80093aa <_malloc_r+0x7e>
 800938a:	600b      	str	r3, [r1, #0]
 800938c:	18cc      	adds	r4, r1, r3
 800938e:	50cd      	str	r5, [r1, r3]
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f85c 	bl	800944e <__malloc_unlock>
 8009396:	f104 000b 	add.w	r0, r4, #11
 800939a:	1d23      	adds	r3, r4, #4
 800939c:	f020 0007 	bic.w	r0, r0, #7
 80093a0:	1ac3      	subs	r3, r0, r3
 80093a2:	d0d3      	beq.n	800934c <_malloc_r+0x20>
 80093a4:	425a      	negs	r2, r3
 80093a6:	50e2      	str	r2, [r4, r3]
 80093a8:	e7d0      	b.n	800934c <_malloc_r+0x20>
 80093aa:	684b      	ldr	r3, [r1, #4]
 80093ac:	428c      	cmp	r4, r1
 80093ae:	bf16      	itet	ne
 80093b0:	6063      	strne	r3, [r4, #4]
 80093b2:	6013      	streq	r3, [r2, #0]
 80093b4:	460c      	movne	r4, r1
 80093b6:	e7eb      	b.n	8009390 <_malloc_r+0x64>
 80093b8:	460c      	mov	r4, r1
 80093ba:	6849      	ldr	r1, [r1, #4]
 80093bc:	e7cc      	b.n	8009358 <_malloc_r+0x2c>
 80093be:	1cc4      	adds	r4, r0, #3
 80093c0:	f024 0403 	bic.w	r4, r4, #3
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d005      	beq.n	80093d4 <_malloc_r+0xa8>
 80093c8:	1a21      	subs	r1, r4, r0
 80093ca:	4630      	mov	r0, r6
 80093cc:	f000 f82e 	bl	800942c <_sbrk_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d0cf      	beq.n	8009374 <_malloc_r+0x48>
 80093d4:	6025      	str	r5, [r4, #0]
 80093d6:	e7db      	b.n	8009390 <_malloc_r+0x64>
 80093d8:	200006dc 	.word	0x200006dc
 80093dc:	200006e0 	.word	0x200006e0

080093e0 <_realloc_r>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	4607      	mov	r7, r0
 80093e4:	4614      	mov	r4, r2
 80093e6:	460e      	mov	r6, r1
 80093e8:	b921      	cbnz	r1, 80093f4 <_realloc_r+0x14>
 80093ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093ee:	4611      	mov	r1, r2
 80093f0:	f7ff bf9c 	b.w	800932c <_malloc_r>
 80093f4:	b922      	cbnz	r2, 8009400 <_realloc_r+0x20>
 80093f6:	f7ff ff4d 	bl	8009294 <_free_r>
 80093fa:	4625      	mov	r5, r4
 80093fc:	4628      	mov	r0, r5
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	f000 f826 	bl	8009450 <_malloc_usable_size_r>
 8009404:	42a0      	cmp	r0, r4
 8009406:	d20f      	bcs.n	8009428 <_realloc_r+0x48>
 8009408:	4621      	mov	r1, r4
 800940a:	4638      	mov	r0, r7
 800940c:	f7ff ff8e 	bl	800932c <_malloc_r>
 8009410:	4605      	mov	r5, r0
 8009412:	2800      	cmp	r0, #0
 8009414:	d0f2      	beq.n	80093fc <_realloc_r+0x1c>
 8009416:	4631      	mov	r1, r6
 8009418:	4622      	mov	r2, r4
 800941a:	f7ff fc05 	bl	8008c28 <memcpy>
 800941e:	4631      	mov	r1, r6
 8009420:	4638      	mov	r0, r7
 8009422:	f7ff ff37 	bl	8009294 <_free_r>
 8009426:	e7e9      	b.n	80093fc <_realloc_r+0x1c>
 8009428:	4635      	mov	r5, r6
 800942a:	e7e7      	b.n	80093fc <_realloc_r+0x1c>

0800942c <_sbrk_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	2300      	movs	r3, #0
 8009430:	4c05      	ldr	r4, [pc, #20]	; (8009448 <_sbrk_r+0x1c>)
 8009432:	4605      	mov	r5, r0
 8009434:	4608      	mov	r0, r1
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	f7fb ff3a 	bl	80052b0 <_sbrk>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_sbrk_r+0x1a>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	b103      	cbz	r3, 8009446 <_sbrk_r+0x1a>
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20001bb4 	.word	0x20001bb4

0800944c <__malloc_lock>:
 800944c:	4770      	bx	lr

0800944e <__malloc_unlock>:
 800944e:	4770      	bx	lr

08009450 <_malloc_usable_size_r>:
 8009450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009454:	1f18      	subs	r0, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfbc      	itt	lt
 800945a:	580b      	ldrlt	r3, [r1, r0]
 800945c:	18c0      	addlt	r0, r0, r3
 800945e:	4770      	bx	lr

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
